{"AWS::AutoScalingPlans::ScalingPlan.PredefinedScalingMetricSpecification"
 [:map
  {:closed :true}
  ["ResourceLabel" {:optional true} [:ref "String"]]
  ["PredefinedScalingMetricType" {:optional true} [:ref "String"]]],
 "AWS::SecretsManager::SecretTargetAttachment"
 [:map
  ["Type" [:= "AWS::SecretsManager::SecretTargetAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SecretId" {:optional true} [:ref "String"]]
    ["TargetType" {:optional true} [:ref "String"]]
    ["TargetId" {:optional true} [:ref "String"]]]]],
 "AWS::Pinpoint::Campaign.SetDimension"
 [:map
  {:closed :true}
  ["DimensionType" {:optional true} [:ref "String"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::NetworkManager::CustomerGatewayAssociation"
 [:map
  ["Type" [:= "AWS::NetworkManager::CustomerGatewayAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GlobalNetworkId" {:optional true} [:ref "String"]]
    ["CustomerGatewayArn" {:optional true} [:ref "String"]]
    ["DeviceId" {:optional true} [:ref "String"]]
    ["LinkId" {:optional true} [:ref "String"]]]]],
 "AWS::WAFRegional::ByteMatchSet.FieldToMatch"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Data" {:optional true} [:ref "String"]]],
 "AWS::ManagedBlockchain::Member.NetworkConfiguration"
 [:map
  {:closed :true}
  ["Description" {:optional true} [:ref "String"]]
  ["FrameworkVersion" {:optional true} [:ref "String"]]
  ["VotingPolicy"
   {:optional true}
   [:ref "AWS::ManagedBlockchain::Member.VotingPolicy"]]
  ["Framework" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]
  ["NetworkFrameworkConfiguration"
   {:optional true}
   [:ref
    "AWS::ManagedBlockchain::Member.NetworkFrameworkConfiguration"]]],
 "AWS::Lambda::EventSourceMapping"
 [:map
  ["Type" [:= "AWS::Lambda::EventSourceMapping"]]
  ["Properties"
   [:map
    {:closed :true}
    ["BatchSize" {:optional true} [:ref "Integer"]]
    ["Topics" {:optional true} [:ref "StringList"]]
    ["DestinationConfig"
     {:optional true}
     [:ref "AWS::Lambda::EventSourceMapping.DestinationConfig"]]
    ["EventSourceArn" {:optional true} [:ref "String"]]
    ["BisectBatchOnFunctionError" {:optional true} [:ref "Boolean"]]
    ["MaximumBatchingWindowInSeconds"
     {:optional true}
     [:ref "Integer"]]
    ["ParallelizationFactor" {:optional true} [:ref "Integer"]]
    ["FunctionName" {:optional true} [:ref "String"]]
    ["MaximumRetryAttempts" {:optional true} [:ref "Integer"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["StartingPosition" {:optional true} [:ref "String"]]
    ["MaximumRecordAgeInSeconds" {:optional true} [:ref "Integer"]]]]],
 "AWS::ElastiCache::ReplicationGroup"
 [:map
  ["Type" [:= "AWS::ElastiCache::ReplicationGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CacheNodeType" {:optional true} [:ref "String"]]
    ["Port" {:optional true} [:ref "Integer"]]
    ["CacheSubnetGroupName" {:optional true} [:ref "String"]]
    ["PrimaryClusterId" {:optional true} [:ref "String"]]
    ["NodeGroupConfiguration"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ElastiCache::ReplicationGroup.NodeGroupConfiguration"]]
      "Fn::If"]]
    ["AutomaticFailoverEnabled" {:optional true} [:ref "Boolean"]]
    ["AutoMinorVersionUpgrade" {:optional true} [:ref "Boolean"]]
    ["NumCacheClusters" {:optional true} [:ref "Integer"]]
    ["ReplicasPerNodeGroup" {:optional true} [:ref "Integer"]]
    ["CacheSecurityGroupNames" {:optional true} [:ref "StringList"]]
    ["NumNodeGroups" {:optional true} [:ref "Integer"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ReplicationGroupDescription" {:optional true} [:ref "String"]]
    ["AuthToken" {:optional true} [:ref "String"]]
    ["ReplicationGroupId" {:optional true} [:ref "String"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["PreferredCacheClusterAZs" {:optional true} [:ref "StringList"]]
    ["SnapshotArns" {:optional true} [:ref "StringList"]]
    ["CacheParameterGroupName" {:optional true} [:ref "String"]]
    ["AtRestEncryptionEnabled" {:optional true} [:ref "Boolean"]]
    ["TransitEncryptionEnabled" {:optional true} [:ref "Boolean"]]
    ["SnapshotName" {:optional true} [:ref "String"]]
    ["SnapshotRetentionLimit" {:optional true} [:ref "Integer"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["EngineVersion" {:optional true} [:ref "String"]]
    ["MultiAZEnabled" {:optional true} [:ref "Boolean"]]
    ["NotificationTopicArn" {:optional true} [:ref "String"]]
    ["SnapshotWindow" {:optional true} [:ref "String"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["SnapshottingClusterId" {:optional true} [:ref "String"]]
    ["Engine" {:optional true} [:ref "String"]]]]],
 "AWS::ElasticLoadBalancing::LoadBalancer.AccessLoggingPolicy"
 [:map
  {:closed :true}
  ["EmitInterval" {:optional true} [:ref "Integer"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["S3BucketName" {:optional true} [:ref "String"]]
  ["S3BucketPrefix" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::Application.ApplicationSnapshotConfiguration"
 [:map
  {:closed :true}
  ["SnapshotsEnabled" {:optional true} [:ref "Boolean"]]],
 "AWS::OpsWorks::Instance.EbsBlockDevice"
 [:map
  {:closed :true}
  ["DeleteOnTermination" {:optional true} [:ref "Boolean"]]
  ["Iops" {:optional true} [:ref "Integer"]]
  ["SnapshotId" {:optional true} [:ref "String"]]
  ["VolumeSize" {:optional true} [:ref "Integer"]]
  ["VolumeType" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Campaign.CampaignEmailMessage"
 [:map
  {:closed :true}
  ["FromAddress" {:optional true} [:ref "String"]]
  ["HtmlBody" {:optional true} [:ref "String"]]
  ["Title" {:optional true} [:ref "String"]]
  ["Body" {:optional true} [:ref "String"]]],
 "AWS::AutoScaling::ScalingPolicy.CustomizedMetricSpecification"
 [:map
  {:closed :true}
  ["Dimensions"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::AutoScaling::ScalingPolicy.MetricDimension"]]
    "Fn::If"]]
  ["MetricName" {:optional true} [:ref "String"]]
  ["Namespace" {:optional true} [:ref "String"]]
  ["Statistic" {:optional true} [:ref "String"]]
  ["Unit" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.MsSmoothGroupSettings"
 [:map
  {:closed :true}
  ["AcquisitionPointId" {:optional true} [:ref "String"]]
  ["AudioOnlyTimecodeControl" {:optional true} [:ref "String"]]
  ["TimestampOffset" {:optional true} [:ref "String"]]
  ["CertificateMode" {:optional true} [:ref "String"]]
  ["EventIdMode" {:optional true} [:ref "String"]]
  ["FilecacheDuration" {:optional true} [:ref "Integer"]]
  ["Destination"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.OutputLocationRef"]]
  ["NumRetries" {:optional true} [:ref "Integer"]]
  ["FragmentLength" {:optional true} [:ref "Integer"]]
  ["TimestampOffsetMode" {:optional true} [:ref "String"]]
  ["ConnectionRetryInterval" {:optional true} [:ref "Integer"]]
  ["EventStopBehavior" {:optional true} [:ref "String"]]
  ["SendDelayMs" {:optional true} [:ref "Integer"]]
  ["StreamManifestBehavior" {:optional true} [:ref "String"]]
  ["SparseTrackType" {:optional true} [:ref "String"]]
  ["SegmentationMode" {:optional true} [:ref "String"]]
  ["RestartDelay" {:optional true} [:ref "Integer"]]
  ["EventId" {:optional true} [:ref "String"]]
  ["InputLossAction" {:optional true} [:ref "String"]]],
 "AWS::Glue::SecurityConfiguration.EncryptionConfiguration"
 [:map
  {:closed :true}
  ["S3Encryptions"
   {:optional true}
   [:ref "AWS::Glue::SecurityConfiguration.S3Encryptions"]]
  ["CloudWatchEncryption"
   {:optional true}
   [:ref "AWS::Glue::SecurityConfiguration.CloudWatchEncryption"]]
  ["JobBookmarksEncryption"
   {:optional true}
   [:ref "AWS::Glue::SecurityConfiguration.JobBookmarksEncryption"]]],
 "AWS::CloudWatch::Alarm.Dimension"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::AutoScaling::AutoScalingGroup.LifecycleHookSpecification"
 [:map
  {:closed :true}
  ["DefaultResult" {:optional true} [:ref "String"]]
  ["HeartbeatTimeout" {:optional true} [:ref "Integer"]]
  ["LifecycleHookName" {:optional true} [:ref "String"]]
  ["LifecycleTransition" {:optional true} [:ref "String"]]
  ["NotificationMetadata" {:optional true} [:ref "String"]]
  ["NotificationTargetARN" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Segment.Demographic"
 [:map
  {:closed :true}
  ["AppVersion"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.SetDimension"]]
  ["DeviceType"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.SetDimension"]]
  ["Platform"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.SetDimension"]]
  ["Channel"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.SetDimension"]]
  ["Model"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.SetDimension"]]
  ["Make"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.SetDimension"]]],
 "AWS::EC2::ClientVpnEndpoint.CertificateAuthenticationRequest"
 [:map
  {:closed :true}
  ["ClientRootCertificateChainArn" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.SqliMatchStatement"
 [:map
  {:closed :true}
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.FieldToMatch"]]
  ["TextTransformations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::RuleGroup.TextTransformation"]]
    "Fn::If"]]],
 "AWS::ECS::TaskDefinition.Ulimit"
 [:map
  {:closed :true}
  ["HardLimit" {:optional true} [:ref "Integer"]]
  ["Name" {:optional true} [:ref "String"]]
  ["SoftLimit" {:optional true} [:ref "Integer"]]],
 "AWS::CodePipeline::Pipeline.ArtifactStoreMap"
 [:map
  {:closed :true}
  ["ArtifactStore"
   {:optional true}
   [:ref "AWS::CodePipeline::Pipeline.ArtifactStore"]]
  ["Region" {:optional true} [:ref "String"]]],
 "AWS::CloudWatch::InsightRule"
 [:map
  ["Type" [:= "AWS::CloudWatch::InsightRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RuleState" {:optional true} [:ref "String"]]
    ["RuleBody" {:optional true} [:ref "String"]]
    ["RuleName" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:ref "AWS::CloudWatch::InsightRule.Tags"]]]]],
 "AWS::ApplicationAutoScaling::ScalingPolicy.StepScalingPolicyConfiguration"
 [:map
  {:closed :true}
  ["AdjustmentType" {:optional true} [:ref "String"]]
  ["Cooldown" {:optional true} [:ref "Integer"]]
  ["MetricAggregationType" {:optional true} [:ref "String"]]
  ["MinAdjustmentMagnitude" {:optional true} [:ref "Integer"]]
  ["StepAdjustments"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::ApplicationAutoScaling::ScalingPolicy.StepAdjustment"]]
    "Fn::If"]]],
 "AWS::Backup::BackupSelection.BackupSelectionResourceType"
 [:map
  {:closed :true}
  ["ListOfTags"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Backup::BackupSelection.ConditionResourceType"]]
    "Fn::If"]]
  ["SelectionName" {:optional true} [:ref "String"]]
  ["IamRoleArn" {:optional true} [:ref "String"]]
  ["Resources" {:optional true} [:ref "StringList"]]],
 "AWS::ElasticBeanstalk::Application"
 [:map
  ["Type" [:= "AWS::ElasticBeanstalk::Application"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["ResourceLifecycleConfig"
     {:optional true}
     [:ref
      "AWS::ElasticBeanstalk::Application.ApplicationResourceLifecycleConfig"]]]]],
 "AWS::MediaLive::Channel.InputAttachment"
 [:map
  {:closed :true}
  ["InputAttachmentName" {:optional true} [:ref "String"]]
  ["InputId" {:optional true} [:ref "String"]]
  ["AutomaticInputFailoverSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AutomaticInputFailoverSettings"]]
  ["InputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.InputSettings"]]],
 "AWS::CloudWatch::AnomalyDetector.Range"
 [:map
  {:closed :true}
  ["EndTime" {:optional true} [:ref "String"]]
  ["StartTime" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::Route.HttpRouteAction"
 [:map
  {:closed :true}
  ["WeightedTargets"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::AppMesh::Route.WeightedTarget"]]
    "Fn::If"]]],
 "AWS::Route53::RecordSetGroup"
 [:map
  ["Type" [:= "AWS::Route53::RecordSetGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Comment" {:optional true} [:ref "String"]]
    ["HostedZoneId" {:optional true} [:ref "String"]]
    ["HostedZoneName" {:optional true} [:ref "String"]]
    ["RecordSets"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Route53::RecordSetGroup.RecordSet"]]
      "Fn::If"]]]]],
 "AWS::EMR::Cluster.PlacementType"
 [:map
  {:closed :true}
  ["AvailabilityZone" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.RateBasedStatementTwo"
 [:map
  {:closed :true}
  ["Limit" {:optional true} [:ref "Integer"]]
  ["AggregateKeyType" {:optional true} [:ref "String"]]
  ["ScopeDownStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.StatementThree"]]
  ["ForwardedIPConfig"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.ForwardedIPConfiguration"]]],
 "AWS::ApplicationAutoScaling::ScalingPolicy.CustomizedMetricSpecification"
 [:map
  {:closed :true}
  ["Dimensions"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::ApplicationAutoScaling::ScalingPolicy.MetricDimension"]]
    "Fn::If"]]
  ["MetricName" {:optional true} [:ref "String"]]
  ["Namespace" {:optional true} [:ref "String"]]
  ["Statistic" {:optional true} [:ref "String"]]
  ["Unit" {:optional true} [:ref "String"]]],
 "AWS::MediaStore::Container.CorsRule"
 [:map
  {:closed :true}
  ["AllowedMethods" {:optional true} [:ref "StringList"]]
  ["AllowedOrigins" {:optional true} [:ref "StringList"]]
  ["ExposeHeaders" {:optional true} [:ref "StringList"]]
  ["MaxAgeSeconds" {:optional true} [:ref "Integer"]]
  ["AllowedHeaders" {:optional true} [:ref "StringList"]]],
 "AWS::ACMPCA::CertificateAuthority.CrlConfiguration"
 [:map
  {:closed :true}
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["ExpirationInDays" {:optional true} [:ref "Integer"]]
  ["CustomCname" {:optional true} [:ref "String"]]
  ["S3BucketName" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Input.InputDestinationRequest"
 [:map
  {:closed :true}
  ["StreamName" {:optional true} [:ref "String"]]],
 "AWS::Batch::JobDefinition.MountPoints"
 [:map
  {:closed :true}
  ["ReadOnly" {:optional true} [:ref "Boolean"]]
  ["SourceVolume" {:optional true} [:ref "String"]]
  ["ContainerPath" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::DocumentationPart.Location"
 [:map
  {:closed :true}
  ["Method" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Path" {:optional true} [:ref "String"]]
  ["StatusCode" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::CodeBuild::ReportGroup.S3ReportExportConfig"
 [:map
  {:closed :true}
  ["Path" {:optional true} [:ref "String"]]
  ["Bucket" {:optional true} [:ref "String"]]
  ["Packaging" {:optional true} [:ref "String"]]
  ["EncryptionKey" {:optional true} [:ref "String"]]
  ["EncryptionDisabled" {:optional true} [:ref "Boolean"]]],
 "AWS::AutoScalingPlans::ScalingPlan.MetricDimension"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::TargetGroup.TargetDescription"
 [:map
  {:closed :true}
  ["AvailabilityZone" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Port" {:optional true} [:ref "Integer"]]],
 "AWS::DAX::Cluster.SSESpecification"
 [:map
  {:closed :true}
  ["SSEEnabled" {:optional true} [:ref "Boolean"]]],
 "AWS::CodeDeploy::DeploymentGroup.GitHubLocation"
 [:map
  {:closed :true}
  ["CommitId" {:optional true} [:ref "String"]]
  ["Repository" {:optional true} [:ref "String"]]],
 "AWS::AppSync::GraphQLApi"
 [:map
  ["Type" [:= "AWS::AppSync::GraphQLApi"]]
  ["Properties"
   [:map
    {:closed :true}
    ["OpenIDConnectConfig"
     {:optional true}
     [:ref "AWS::AppSync::GraphQLApi.OpenIDConnectConfig"]]
    ["XrayEnabled" {:optional true} [:ref "Boolean"]]
    ["UserPoolConfig"
     {:optional true}
     [:ref "AWS::AppSync::GraphQLApi.UserPoolConfig"]]
    ["Tags" {:optional true} [:ref "AWS::AppSync::GraphQLApi.Tags"]]
    ["Name" {:optional true} [:ref "String"]]
    ["AuthenticationType" {:optional true} [:ref "String"]]
    ["LogConfig"
     {:optional true}
     [:ref "AWS::AppSync::GraphQLApi.LogConfig"]]
    ["AdditionalAuthenticationProviders"
     {:optional true}
     [:ref
      "AWS::AppSync::GraphQLApi.AdditionalAuthenticationProviders"]]]]],
 "AWS::IoTEvents::DetectorModel.ClearTimer"
 [:map {:closed :true} ["TimerName" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Input.InputVpcRequest"
 [:map
  {:closed :true}
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
  ["SubnetIds" {:optional true} [:ref "StringList"]]],
 "AWS::Glue::Connection"
 [:map
  ["Type" [:= "AWS::Glue::Connection"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ConnectionInput"
     {:optional true}
     [:ref "AWS::Glue::Connection.ConnectionInput"]]
    ["CatalogId" {:optional true} [:ref "String"]]]]],
 "AWS::CodeDeploy::DeploymentGroup.TargetGroupInfo"
 [:map {:closed :true} ["Name" {:optional true} [:ref "String"]]],
 "AWS::WAF::SqlInjectionMatchSet.SqlInjectionMatchTuple"
 [:map
  {:closed :true}
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAF::SqlInjectionMatchSet.FieldToMatch"]]
  ["TextTransformation" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.VideoSelectorPid"
 [:map {:closed :true} ["Pid" {:optional true} [:ref "Integer"]]],
 "AWS::SSM::Parameter"
 [:map
  ["Type" [:= "AWS::SSM::Parameter"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Policies" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Tier" {:optional true} [:ref "String"]]
    ["Value" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]
    ["AllowedPattern" {:optional true} [:ref "String"]]
    ["DataType" {:optional true} [:ref "String"]]]]],
 "AWS::StepFunctions::StateMachine.DefinitionSubstitutions"
 [:map {:closed :true}],
 "AWS::ApiGateway::UsagePlan.ApiStage"
 [:map
  {:closed :true}
  ["ApiId" {:optional true} [:ref "String"]]
  ["Stage" {:optional true} [:ref "String"]]
  ["Throttle"
   {:optional true}
   [:map-of [:ref "String"] [:ref "ThrottleSettings"]]]],
 "AWS::MediaLive::Channel.BurnInDestinationSettings"
 [:map
  {:closed :true}
  ["ShadowYOffset" {:optional true} [:ref "Integer"]]
  ["BackgroundOpacity" {:optional true} [:ref "Integer"]]
  ["Font"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.InputLocation"]]
  ["OutlineColor" {:optional true} [:ref "String"]]
  ["ShadowXOffset" {:optional true} [:ref "Integer"]]
  ["FontSize" {:optional true} [:ref "String"]]
  ["FontOpacity" {:optional true} [:ref "Integer"]]
  ["Alignment" {:optional true} [:ref "String"]]
  ["FontColor" {:optional true} [:ref "String"]]
  ["YPosition" {:optional true} [:ref "Integer"]]
  ["ShadowColor" {:optional true} [:ref "String"]]
  ["FontResolution" {:optional true} [:ref "Integer"]]
  ["BackgroundColor" {:optional true} [:ref "String"]]
  ["TeletextGridControl" {:optional true} [:ref "String"]]
  ["ShadowOpacity" {:optional true} [:ref "Integer"]]
  ["XPosition" {:optional true} [:ref "Integer"]]
  ["OutlineSize" {:optional true} [:ref "Integer"]]],
 "AWS::CodeDeploy::DeploymentGroup.EC2TagSetListObject"
 [:map
  {:closed :true}
  ["Ec2TagGroup"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::CodeDeploy::DeploymentGroup.EC2TagFilter"]]
    "Fn::If"]]],
 "AWS::MediaLive::Channel.EmbeddedPlusScte20DestinationSettings"
 [:map {:closed :true}],
 "AWS::EC2::SpotFleet.SpotFleetTagSpecification"
 [:map
  {:closed :true}
  ["ResourceType" {:optional true} [:ref "String"]]
  ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::MediaLive::Channel.FrameCaptureOutputSettings"
 [:map
  {:closed :true}
  ["NameModifier" {:optional true} [:ref "String"]]],
 "AWS::WAF::IPSet.IPSetDescriptor"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.HttpRequestMethodConfig"
 [:map
  {:closed :true}
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::Greengrass::CoreDefinitionVersion.Core"
 [:map
  {:closed :true}
  ["SyncShadow" {:optional true} [:ref "Boolean"]]
  ["ThingArn" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["CertificateArn" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancing::LoadBalancer"
 [:map
  ["Type" [:= "AWS::ElasticLoadBalancing::LoadBalancer"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Instances" {:optional true} [:ref "StringList"]]
    ["CrossZone" {:optional true} [:ref "Boolean"]]
    ["Subnets" {:optional true} [:ref "StringList"]]
    ["Policies"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ElasticLoadBalancing::LoadBalancer.Policies"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["AccessLoggingPolicy"
     {:optional true}
     [:ref
      "AWS::ElasticLoadBalancing::LoadBalancer.AccessLoggingPolicy"]]
    ["LoadBalancerName" {:optional true} [:ref "String"]]
    ["LBCookieStickinessPolicy"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ElasticLoadBalancing::LoadBalancer.LBCookieStickinessPolicy"]]
      "Fn::If"]]
    ["AvailabilityZones" {:optional true} [:ref "StringList"]]
    ["HealthCheck"
     {:optional true}
     [:ref "AWS::ElasticLoadBalancing::LoadBalancer.HealthCheck"]]
    ["SecurityGroups" {:optional true} [:ref "StringList"]]
    ["ConnectionDrainingPolicy"
     {:optional true}
     [:ref
      "AWS::ElasticLoadBalancing::LoadBalancer.ConnectionDrainingPolicy"]]
    ["AppCookieStickinessPolicy"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ElasticLoadBalancing::LoadBalancer.AppCookieStickinessPolicy"]]
      "Fn::If"]]
    ["Listeners"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ElasticLoadBalancing::LoadBalancer.Listeners"]]
      "Fn::If"]]
    ["Scheme" {:optional true} [:ref "String"]]
    ["ConnectionSettings"
     {:optional true}
     [:ref
      "AWS::ElasticLoadBalancing::LoadBalancer.ConnectionSettings"]]]]],
 "AWS::Greengrass::FunctionDefinition.Environment"
 [:map
  {:closed :true}
  ["Variables" {:optional true} [:ref "Json"]]
  ["Execution"
   {:optional true}
   [:ref "AWS::Greengrass::FunctionDefinition.Execution"]]
  ["ResourceAccessPolicies"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Greengrass::FunctionDefinition.ResourceAccessPolicy"]]
    "Fn::If"]]
  ["AccessSysfs" {:optional true} [:ref "Boolean"]]],
 "AWS::EC2::TrafficMirrorFilterRule"
 [:map
  ["Type" [:= "AWS::EC2::TrafficMirrorFilterRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SourceCidrBlock" {:optional true} [:ref "String"]]
    ["TrafficDirection" {:optional true} [:ref "String"]]
    ["RuleNumber" {:optional true} [:ref "Integer"]]
    ["RuleAction" {:optional true} [:ref "String"]]
    ["SourcePortRange"
     {:optional true}
     [:ref "AWS::EC2::TrafficMirrorFilterRule.TrafficMirrorPortRange"]]
    ["DestinationCidrBlock" {:optional true} [:ref "String"]]
    ["DestinationPortRange"
     {:optional true}
     [:ref "AWS::EC2::TrafficMirrorFilterRule.TrafficMirrorPortRange"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Protocol" {:optional true} [:ref "Integer"]]
    ["TrafficMirrorFilterId" {:optional true} [:ref "String"]]]]],
 "AWS::NetworkManager::TransitGatewayRegistration"
 [:map
  ["Type" [:= "AWS::NetworkManager::TransitGatewayRegistration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GlobalNetworkId" {:optional true} [:ref "String"]]
    ["TransitGatewayArn" {:optional true} [:ref "String"]]]]],
 "AWS::GameLift::GameSessionQueue.PlayerLatencyPolicy"
 [:map
  {:closed :true}
  ["PolicyDurationSeconds" {:optional true} [:ref "Integer"]]
  ["MaximumIndividualPlayerLatencyMilliseconds"
   {:optional true}
   [:ref "Integer"]]],
 "AWS::EC2::LaunchTemplate"
 [:map
  ["Type" [:= "AWS::EC2::LaunchTemplate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LaunchTemplateName" {:optional true} [:ref "String"]]
    ["LaunchTemplateData"
     {:optional true}
     [:ref "AWS::EC2::LaunchTemplate.LaunchTemplateData"]]]]],
 "AWS::EC2::SpotFleet.TargetGroupsConfig"
 [:map
  {:closed :true}
  ["TargetGroups"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::SpotFleet.TargetGroup"]]
    "Fn::If"]]],
 "AWS::Config::RemediationConfiguration.SsmControls"
 [:map
  {:closed :true}
  ["ErrorPercentage" {:optional true} [:ref "Integer"]]
  ["ConcurrentExecutionRatePercentage"
   {:optional true}
   [:ref "Integer"]]],
 "AWS::Greengrass::LoggerDefinitionVersion.Logger"
 [:map
  {:closed :true}
  ["Space" {:optional true} [:ref "Integer"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Level" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Component" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.AssetPropertyTimestamp"
 [:map
  {:closed :true}
  ["TimeInSeconds" {:optional true} [:ref "String"]]
  ["OffsetInNanos" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.ObjectLockConfiguration"
 [:map
  {:closed :true}
  ["ObjectLockEnabled" {:optional true} [:ref "String"]]
  ["Rule" {:optional true} [:ref "AWS::S3::Bucket.ObjectLockRule"]]],
 "AWS::SageMaker::MonitoringSchedule.ScheduleConfig"
 [:map
  {:closed :true}
  ["ScheduleExpression" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.VisibilityConfig"
 [:map
  {:closed :true}
  ["SampledRequestsEnabled" {:optional true} [:ref "Boolean"]]
  ["CloudWatchMetricsEnabled" {:optional true} [:ref "Boolean"]]
  ["MetricName" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.ParquetSerDe"
 [:map
  {:closed :true}
  ["BlockSizeBytes" {:optional true} [:ref "Integer"]]
  ["Compression" {:optional true} [:ref "String"]]
  ["EnableDictionaryCompression" {:optional true} [:ref "Boolean"]]
  ["MaxPaddingBytes" {:optional true} [:ref "Integer"]]
  ["PageSizeBytes" {:optional true} [:ref "Integer"]]
  ["WriterVersion" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::Application.Input"
 [:map
  {:closed :true}
  ["NamePrefix" {:optional true} [:ref "String"]]
  ["InputSchema"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::Application.InputSchema"]]
  ["KinesisStreamsInput"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::Application.KinesisStreamsInput"]]
  ["KinesisFirehoseInput"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::Application.KinesisFirehoseInput"]]
  ["InputProcessingConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisAnalytics::Application.InputProcessingConfiguration"]]
  ["InputParallelism"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::Application.InputParallelism"]]],
 "AWS::SES::Template"
 [:map
  ["Type" [:= "AWS::SES::Template"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Template"
     {:optional true}
     [:ref "AWS::SES::Template.Template"]]]]],
 "AWS::Redshift::Cluster.LoggingProperties"
 [:map
  {:closed :true}
  ["BucketName" {:optional true} [:ref "String"]]
  ["S3KeyPrefix" {:optional true} [:ref "String"]]],
 "AWS::Amplify::Branch.BasicAuthConfig"
 [:map
  {:closed :true}
  ["Username" {:optional true} [:ref "String"]]
  ["EnableBasicAuth" {:optional true} [:ref "Boolean"]]
  ["Password" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::OriginRequestPolicy.QueryStringsConfig"
 [:map
  {:closed :true}
  ["QueryStringBehavior" {:optional true} [:ref "String"]]
  ["QueryStrings" {:optional true} [:ref "StringList"]]],
 "AWS::WAF::SizeConstraintSet.SizeConstraint"
 [:map
  {:closed :true}
  ["ComparisonOperator" {:optional true} [:ref "String"]]
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAF::SizeConstraintSet.FieldToMatch"]]
  ["Size" {:optional true} [:ref "Integer"]]
  ["TextTransformation" {:optional true} [:ref "String"]]],
 "AWS::EC2::LaunchTemplate.MetadataOptions"
 [:map
  {:closed :true}
  ["HttpPutResponseHopLimit" {:optional true} [:ref "Integer"]]
  ["HttpTokens" {:optional true} [:ref "String"]]
  ["HttpEndpoint" {:optional true} [:ref "String"]]],
 "AWS::PinpointEmail::ConfigurationSet.TrackingOptions"
 [:map
  {:closed :true}
  ["CustomRedirectDomain" {:optional true} [:ref "String"]]],
 "AWS::CodeBuild::Project.ProjectTriggers"
 [:map
  {:closed :true}
  ["FilterGroups"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CodeBuild::Project.FilterGroup"]]
    "Fn::If"]]
  ["Webhook" {:optional true} [:ref "Boolean"]]],
 "AWS::AppSync::Resolver.CachingConfig"
 [:map
  {:closed :true}
  ["CachingKeys" {:optional true} [:ref "StringList"]]
  ["Ttl" {:optional true} [:ref "Double"]]],
 "AWS::QLDB::Stream.KinesisConfiguration"
 [:map
  {:closed :true}
  ["StreamArn" {:optional true} [:ref "String"]]
  ["AggregationEnabled" {:optional true} [:ref "Boolean"]]],
 "AWS::Cognito::UserPool.DeviceConfiguration"
 [:map
  {:closed :true}
  ["DeviceOnlyRememberedOnUserPrompt"
   {:optional true}
   [:ref "Boolean"]]
  ["ChallengeRequiredOnNewDevice" {:optional true} [:ref "Boolean"]]],
 "AWS::AmazonMQ::Broker.LdapServerMetadata"
 [:map
  {:closed :true}
  ["RoleSearchSubtree" {:optional true} [:ref "Boolean"]]
  ["RoleBase" {:optional true} [:ref "String"]]
  ["UserSearchSubtree" {:optional true} [:ref "Boolean"]]
  ["RoleName" {:optional true} [:ref "String"]]
  ["ServiceAccountUsername" {:optional true} [:ref "String"]]
  ["Hosts" {:optional true} [:ref "StringList"]]
  ["RoleSearchMatching" {:optional true} [:ref "String"]]
  ["ServiceAccountPassword" {:optional true} [:ref "String"]]
  ["UserRoleName" {:optional true} [:ref "String"]]
  ["UserSearchMatching" {:optional true} [:ref "String"]]
  ["UserBase" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Dataset.Filter"
 [:map
  {:closed :true}
  ["DeltaTime"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Dataset.DeltaTime"]]],
 "AWS::AppSync::DataSource.DynamoDBConfig"
 [:map
  {:closed :true}
  ["TableName" {:optional true} [:ref "String"]]
  ["AwsRegion" {:optional true} [:ref "String"]]
  ["Versioned" {:optional true} [:ref "Boolean"]]
  ["DeltaSyncConfig"
   {:optional true}
   [:ref "AWS::AppSync::DataSource.DeltaSyncConfig"]]
  ["UseCallerCredentials" {:optional true} [:ref "Boolean"]]],
 "AWS::StepFunctions::Activity"
 [:map
  ["Type" [:= "AWS::StepFunctions::Activity"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Tags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::StepFunctions::Activity.TagsEntry"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Greengrass::ResourceDefinitionVersion.LocalVolumeResourceData"
 [:map
  {:closed :true}
  ["SourcePath" {:optional true} [:ref "String"]]
  ["DestinationPath" {:optional true} [:ref "String"]]
  ["GroupOwnerSetting"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinitionVersion.GroupOwnerSetting"]]],
 "AWS::Route53Resolver::ResolverRule.TargetAddress"
 [:map
  {:closed :true}
  ["Ip" {:optional true} [:ref "String"]]
  ["Port" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::ApiKey.StageKey"
 [:map
  {:closed :true}
  ["RestApiId" {:optional true} [:ref "String"]]
  ["StageName" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinition.ResourceDataContainer"
 [:map
  {:closed :true}
  ["SecretsManagerSecretResourceData"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinition.SecretsManagerSecretResourceData"]]
  ["SageMakerMachineLearningModelResourceData"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinition.SageMakerMachineLearningModelResourceData"]]
  ["LocalVolumeResourceData"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinition.LocalVolumeResourceData"]]
  ["LocalDeviceResourceData"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinition.LocalDeviceResourceData"]]
  ["S3MachineLearningModelResourceData"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinition.S3MachineLearningModelResourceData"]]],
 "AWS::IoT::TopicRule.IotAnalyticsAction"
 [:map
  {:closed :true}
  ["ChannelName" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::Lambda::Function.Code"
 [:map
  {:closed :true}
  ["S3Bucket" {:optional true} [:ref "String"]]
  ["S3Key" {:optional true} [:ref "String"]]
  ["S3ObjectVersion" {:optional true} [:ref "String"]]
  ["ZipFile" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.Scte20SourceSettings"
 [:map
  {:closed :true}
  ["Source608ChannelNumber" {:optional true} [:ref "Integer"]]
  ["Convert608To708" {:optional true} [:ref "String"]]],
 "AWS::Glue::Connection.PhysicalConnectionRequirements"
 [:map
  {:closed :true}
  ["AvailabilityZone" {:optional true} [:ref "String"]]
  ["SecurityGroupIdList" {:optional true} [:ref "StringList"]]
  ["SubnetId" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayTlsValidationContextTrust"
 [:map
  {:closed :true}
  ["ACM"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualGateway.VirtualGatewayTlsValidationContextAcmTrust"]]
  ["File"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualGateway.VirtualGatewayTlsValidationContextFileTrust"]]],
 "AWS::S3::Bucket.NotificationConfiguration"
 [:map
  {:closed :true}
  ["LambdaConfigurations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::S3::Bucket.LambdaConfiguration"]]
    "Fn::If"]]
  ["QueueConfigurations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::S3::Bucket.QueueConfiguration"]]
    "Fn::If"]]
  ["TopicConfigurations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::S3::Bucket.TopicConfiguration"]]
    "Fn::If"]]],
 "AWS::WAFRegional::GeoMatchSet"
 [:map
  ["Type" [:= "AWS::WAFRegional::GeoMatchSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GeoMatchConstraints"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::WAFRegional::GeoMatchSet.GeoMatchConstraint"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayFileAccessLog"
 [:map {:closed :true} ["Path" {:optional true} [:ref "String"]]],
 "AWS::Logs::MetricFilter"
 [:map
  ["Type" [:= "AWS::Logs::MetricFilter"]]
  ["Properties"
   [:map
    {:closed :true}
    ["FilterPattern" {:optional true} [:ref "String"]]
    ["LogGroupName" {:optional true} [:ref "String"]]
    ["MetricTransformations"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Logs::MetricFilter.MetricTransformation"]]
      "Fn::If"]]]]],
 "AWS::ManagedBlockchain::Member.MemberFabricConfiguration"
 [:map
  {:closed :true}
  ["AdminUsername" {:optional true} [:ref "String"]]
  ["AdminPassword" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::Group"
 [:map
  ["Type" [:= "AWS::Greengrass::Group"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InitialVersion"
     {:optional true}
     [:ref "AWS::Greengrass::Group.GroupVersion"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Cognito::UserPoolRiskConfigurationAttachment.RiskExceptionConfigurationType"
 [:map
  {:closed :true}
  ["BlockedIPRangeList" {:optional true} [:ref "StringList"]]
  ["SkippedIPRangeList" {:optional true} [:ref "StringList"]]],
 "AWS::Athena::WorkGroup.WorkGroupConfigurationUpdates"
 [:map
  {:closed :true}
  ["BytesScannedCutoffPerQuery" {:optional true} [:ref "Integer"]]
  ["EnforceWorkGroupConfiguration" {:optional true} [:ref "Boolean"]]
  ["PublishCloudWatchMetricsEnabled" {:optional true} [:ref "Boolean"]]
  ["RequesterPaysEnabled" {:optional true} [:ref "Boolean"]]
  ["ResultConfigurationUpdates"
   {:optional true}
   [:ref "AWS::Athena::WorkGroup.ResultConfigurationUpdates"]]
  ["RemoveBytesScannedCutoffPerQuery"
   {:optional true}
   [:ref "Boolean"]]],
 "AWS::EKS::Nodegroup"
 [:map
  ["Type" [:= "AWS::EKS::Nodegroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DiskSize" {:optional true} [:ref "Double"]]
    ["Subnets" {:optional true} [:ref "StringList"]]
    ["RemoteAccess"
     {:optional true}
     [:ref "AWS::EKS::Nodegroup.RemoteAccess"]]
    ["InstanceTypes" {:optional true} [:ref "StringList"]]
    ["Labels" {:optional true} [:ref "Json"]]
    ["ClusterName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["NodegroupName" {:optional true} [:ref "String"]]
    ["LaunchTemplate"
     {:optional true}
     [:ref "AWS::EKS::Nodegroup.LaunchTemplateSpecification"]]
    ["ReleaseVersion" {:optional true} [:ref "String"]]
    ["NodeRole" {:optional true} [:ref "String"]]
    ["AmiType" {:optional true} [:ref "String"]]
    ["ForceUpdateEnabled" {:optional true} [:ref "Boolean"]]
    ["Version" {:optional true} [:ref "String"]]
    ["ScalingConfig"
     {:optional true}
     [:ref "AWS::EKS::Nodegroup.ScalingConfig"]]]]],
 "AWS::RDS::DBSecurityGroup.Ingress"
 [:map
  {:closed :true}
  ["CIDRIP" {:optional true} [:ref "String"]]
  ["EC2SecurityGroupId" {:optional true} [:ref "String"]]
  ["EC2SecurityGroupName" {:optional true} [:ref "String"]]
  ["EC2SecurityGroupOwnerId" {:optional true} [:ref "String"]]],
 "AWS::Route53Resolver::ResolverRule"
 [:map
  ["Type" [:= "AWS::Route53Resolver::ResolverRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResolverEndpointId" {:optional true} [:ref "String"]]
    ["DomainName" {:optional true} [:ref "String"]]
    ["RuleType" {:optional true} [:ref "String"]]
    ["TargetIps"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Route53Resolver::ResolverRule.TargetAddress"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::ApiGatewayV2::Stage"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::Stage"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RouteSettings" {:optional true} [:ref "Json"]]
    ["ApiId" {:optional true} [:ref "String"]]
    ["AutoDeploy" {:optional true} [:ref "Boolean"]]
    ["DeploymentId" {:optional true} [:ref "String"]]
    ["AccessLogSettings"
     {:optional true}
     [:ref "AWS::ApiGatewayV2::Stage.AccessLogSettings"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["ClientCertificateId" {:optional true} [:ref "String"]]
    ["StageVariables" {:optional true} [:ref "Json"]]
    ["DefaultRouteSettings"
     {:optional true}
     [:ref "AWS::ApiGatewayV2::Stage.RouteSettings"]]
    ["Description" {:optional true} [:ref "String"]]
    ["StageName" {:optional true} [:ref "String"]]]]],
 "AWS::IoT::TopicRule.ElasticsearchAction"
 [:map
  {:closed :true}
  ["Endpoint" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Index" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.AwsCloudMapInstanceAttribute"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.QueryStringKeyValue"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.XssMatchStatement"
 [:map
  {:closed :true}
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.FieldToMatch"]]
  ["TextTransformations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.TextTransformation"]]
    "Fn::If"]]],
 "AWS::Config::RemediationConfiguration"
 [:map
  ["Type" [:= "AWS::Config::RemediationConfiguration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResourceType" {:optional true} [:ref "String"]]
    ["TargetId" {:optional true} [:ref "String"]]
    ["RetryAttemptSeconds" {:optional true} [:ref "Integer"]]
    ["Parameters" {:optional true} [:ref "Json"]]
    ["TargetType" {:optional true} [:ref "String"]]
    ["Automatic" {:optional true} [:ref "Boolean"]]
    ["TargetVersion" {:optional true} [:ref "String"]]
    ["ConfigRuleName" {:optional true} [:ref "String"]]
    ["MaximumAutomaticAttempts" {:optional true} [:ref "Integer"]]
    ["ExecutionControls"
     {:optional true}
     [:ref
      "AWS::Config::RemediationConfiguration.ExecutionControls"]]]]],
 "AWS::IoT::TopicRule.LambdaAction"
 [:map
  {:closed :true}
  ["FunctionArn" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.AudioSelector"
 [:map
  {:closed :true}
  ["SelectorSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AudioSelectorSettings"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::Listener.ForwardConfig"
 [:map
  {:closed :true}
  ["TargetGroupStickinessConfig"
   {:optional true}
   [:ref
    "AWS::ElasticLoadBalancingV2::Listener.TargetGroupStickinessConfig"]]
  ["TargetGroups"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::ElasticLoadBalancingV2::Listener.TargetGroupTuple"]]
    "Fn::If"]]],
 "AWS::IoTAnalytics::Dataset.DatasetContentDeliveryRule"
 [:map
  {:closed :true}
  ["Destination"
   {:optional true}
   [:ref
    "AWS::IoTAnalytics::Dataset.DatasetContentDeliveryRuleDestination"]]
  ["EntryName" {:optional true} [:ref "String"]]],
 "AWS::GameLift::Build.S3Location"
 [:map
  {:closed :true}
  ["Bucket" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]
  ["ObjectVersion" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::Logs::LogGroup"
 [:map
  ["Type" [:= "AWS::Logs::LogGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LogGroupName" {:optional true} [:ref "String"]]
    ["RetentionInDays" {:optional true} [:ref "Integer"]]]]],
 "AWS::OpsWorks::App"
 [:map
  ["Type" [:= "AWS::OpsWorks::App"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Domains" {:optional true} [:ref "StringList"]]
    ["Environment"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::OpsWorks::App.EnvironmentVariable"]]
      "Fn::If"]]
    ["AppSource" {:optional true} [:ref "AWS::OpsWorks::App.Source"]]
    ["Shortname" {:optional true} [:ref "String"]]
    ["DataSources"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::OpsWorks::App.DataSource"]]
      "Fn::If"]]
    ["StackId" {:optional true} [:ref "String"]]
    ["EnableSsl" {:optional true} [:ref "Boolean"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["SslConfiguration"
     {:optional true}
     [:ref "AWS::OpsWorks::App.SslConfiguration"]]
    ["Type" {:optional true} [:ref "String"]]
    ["Attributes" {:optional true} [:ref "StringMap"]]]]],
 "AWS::SageMaker::MonitoringSchedule.ConstraintsResource"
 [:map {:closed :true} ["S3Uri" {:optional true} [:ref "String"]]],
 "AWS::CodePipeline::Pipeline.ActionTypeId"
 [:map
  {:closed :true}
  ["Category" {:optional true} [:ref "String"]]
  ["Owner" {:optional true} [:ref "String"]]
  ["Provider" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]],
 "AWS::Amplify::App.EnvironmentVariable"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::Listener.Certificate"
 [:map
  {:closed :true}
  ["CertificateArn" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::App"
 [:map
  ["Type" [:= "AWS::Pinpoint::App"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::ServiceCatalog::CloudFormationProvisionedProduct.ProvisioningPreferences"
 [:map
  {:closed :true}
  ["StackSetAccounts" {:optional true} [:ref "StringList"]]
  ["StackSetFailureToleranceCount" {:optional true} [:ref "Integer"]]
  ["StackSetFailureTolerancePercentage"
   {:optional true}
   [:ref "Integer"]]
  ["StackSetMaxConcurrencyCount" {:optional true} [:ref "Integer"]]
  ["StackSetMaxConcurrencyPercentage"
   {:optional true}
   [:ref "Integer"]]
  ["StackSetOperationType" {:optional true} [:ref "String"]]
  ["StackSetRegions" {:optional true} [:ref "StringList"]]],
 "AWS::RoboMaker::SimulationApplication.SimulationSoftwareSuite"
 [:map
  {:closed :true}
  ["Version" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::GameLift::GameSessionQueue"
 [:map
  ["Type" [:= "AWS::GameLift::GameSessionQueue"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TimeoutInSeconds" {:optional true} [:ref "Integer"]]
    ["PlayerLatencyPolicies"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::GameLift::GameSessionQueue.PlayerLatencyPolicy"]]
      "Fn::If"]]
    ["Destinations"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::GameLift::GameSessionQueue.Destination"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::ImageBuilder::InfrastructureConfiguration.Logging"
 [:map
  {:closed :true}
  ["S3Logs"
   {:optional true}
   [:ref "AWS::ImageBuilder::InfrastructureConfiguration.S3Logs"]]],
 "AWS::GameLift::Script.S3Location"
 [:map
  {:closed :true}
  ["ObjectVersion" {:optional true} [:ref "String"]]
  ["Bucket" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::CloudFormation::Macro"
 [:map
  ["Type" [:= "AWS::CloudFormation::Macro"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["FunctionName" {:optional true} [:ref "String"]]
    ["LogGroupName" {:optional true} [:ref "String"]]
    ["LogRoleARN" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::WAF::WebACL.ActivatedRule"
 [:map
  {:closed :true}
  ["Action" {:optional true} [:ref "AWS::WAF::WebACL.WafAction"]]
  ["Priority" {:optional true} [:ref "Integer"]]
  ["RuleId" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Dataset.ContainerAction"
 [:map
  {:closed :true}
  ["Variables"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoTAnalytics::Dataset.Variable"]]
    "Fn::If"]]
  ["ExecutionRoleArn" {:optional true} [:ref "String"]]
  ["Image" {:optional true} [:ref "String"]]
  ["ResourceConfiguration"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Dataset.ResourceConfiguration"]]],
 "Alexa::ASK::Skill"
 [:map
  ["Type" [:= "Alexa::ASK::Skill"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AuthenticationConfiguration"
     {:optional true}
     [:ref "Alexa::ASK::Skill.AuthenticationConfiguration"]]
    ["VendorId" {:optional true} [:ref "String"]]
    ["SkillPackage"
     {:optional true}
     [:ref "Alexa::ASK::Skill.SkillPackage"]]]]],
 "AWS::AppMesh::Route.HttpTimeout"
 [:map
  {:closed :true}
  ["PerRequest" {:optional true} [:ref "AWS::AppMesh::Route.Duration"]]
  ["Idle" {:optional true} [:ref "AWS::AppMesh::Route.Duration"]]],
 "AWS::Cognito::UserPoolRiskConfigurationAttachment.NotifyEmailType"
 [:map
  {:closed :true}
  ["TextBody" {:optional true} [:ref "String"]]
  ["HtmlBody" {:optional true} [:ref "String"]]
  ["Subject" {:optional true} [:ref "String"]]],
 "AWS::ImageBuilder::Image"
 [:map
  ["Type" [:= "AWS::ImageBuilder::Image"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ImageTestsConfiguration"
     {:optional true}
     [:ref "AWS::ImageBuilder::Image.ImageTestsConfiguration"]]
    ["ImageRecipeArn" {:optional true} [:ref "String"]]
    ["DistributionConfigurationArn" {:optional true} [:ref "String"]]
    ["InfrastructureConfigurationArn" {:optional true} [:ref "String"]]
    ["EnhancedImageMetadataEnabled" {:optional true} [:ref "Boolean"]]
    ["Tags" {:optional true} [:ref "StringMap"]]]]],
 "AWS::Lambda::Function.Environment"
 [:map
  {:closed :true}
  ["Variables" {:optional true} [:ref "StringMap"]]],
 "AWS::Backup::BackupSelection"
 [:map
  ["Type" [:= "AWS::Backup::BackupSelection"]]
  ["Properties"
   [:map
    {:closed :true}
    ["BackupSelection"
     {:optional true}
     [:ref "AWS::Backup::BackupSelection.BackupSelectionResourceType"]]
    ["BackupPlanId" {:optional true} [:ref "String"]]]]],
 "AWS::SageMaker::MonitoringSchedule.BaselineConfig"
 [:map
  {:closed :true}
  ["ConstraintsResource"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.ConstraintsResource"]]
  ["StatisticsResource"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.StatisticsResource"]]],
 "AWS::CodePipeline::CustomActionType.ArtifactDetails"
 [:map
  {:closed :true}
  ["MaximumCount" {:optional true} [:ref "Integer"]]
  ["MinimumCount" {:optional true} [:ref "Integer"]]],
 "AWS::CloudFront::Distribution"
 [:map
  ["Type" [:= "AWS::CloudFront::Distribution"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DistributionConfig"
     {:optional true}
     [:ref "AWS::CloudFront::Distribution.DistributionConfig"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::ECS::Service.DeploymentController"
 [:map {:closed :true} ["Type" {:optional true} [:ref "String"]]],
 "AWS::CodeGuruProfiler::ProfilingGroup.Channel"
 [:map
  {:closed :true}
  ["channelId" {:optional true} [:ref "String"]]
  ["channelUri" {:optional true} [:ref "String"]]],
 "AWS::Elasticsearch::Domain.LogPublishingOption"
 [:map
  {:closed :true}
  ["CloudWatchLogsLogGroupArn" {:optional true} [:ref "String"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::EC2::ClientVpnEndpoint.FederatedAuthenticationRequest"
 [:map
  {:closed :true}
  ["SAMLProviderArn" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::ApplicationReferenceDataSource"
 [:map
  ["Type" [:= "AWS::KinesisAnalytics::ApplicationReferenceDataSource"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["ReferenceDataSource"
     {:optional true}
     [:ref
      "AWS::KinesisAnalytics::ApplicationReferenceDataSource.ReferenceDataSource"]]]]],
 "AWS::IoTEvents::DetectorModel.IotSiteWise"
 [:map
  {:closed :true}
  ["EntryId" {:optional true} [:ref "String"]]
  ["PropertyAlias" {:optional true} [:ref "String"]]
  ["PropertyValue"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.AssetPropertyValue"]]
  ["AssetId" {:optional true} [:ref "String"]]
  ["PropertyId" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.DataSourceToIndexFieldMapping"
 [:map
  {:closed :true}
  ["DataSourceFieldName" {:optional true} [:ref "String"]]
  ["DateFieldFormat" {:optional true} [:ref "String"]]
  ["IndexFieldName" {:optional true} [:ref "String"]]],
 "AWS::ECS::CapacityProvider"
 [:map
  ["Type" [:= "AWS::ECS::CapacityProvider"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AutoScalingGroupProvider"
     {:optional true}
     [:ref "AWS::ECS::CapacityProvider.AutoScalingGroupProvider"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EC2::LaunchTemplate.InstanceMarketOptions"
 [:map
  {:closed :true}
  ["SpotOptions"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.SpotOptions"]]
  ["MarketType" {:optional true} [:ref "String"]]],
 "AWS::SES::ConfigurationSetEventDestination.DimensionConfiguration"
 [:map
  {:closed :true}
  ["DimensionValueSource" {:optional true} [:ref "String"]]
  ["DefaultDimensionValue" {:optional true} [:ref "String"]]
  ["DimensionName" {:optional true} [:ref "String"]]],
 "AWS::EC2::LaunchTemplate.ElasticGpuSpecification"
 [:map {:closed :true} ["Type" {:optional true} [:ref "String"]]],
 "AWS::AppSync::DataSource"
 [:map
  ["Type" [:= "AWS::AppSync::DataSource"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApiId" {:optional true} [:ref "String"]]
    ["HttpConfig"
     {:optional true}
     [:ref "AWS::AppSync::DataSource.HttpConfig"]]
    ["ElasticsearchConfig"
     {:optional true}
     [:ref "AWS::AppSync::DataSource.ElasticsearchConfig"]]
    ["ServiceRoleArn" {:optional true} [:ref "String"]]
    ["RelationalDatabaseConfig"
     {:optional true}
     [:ref "AWS::AppSync::DataSource.RelationalDatabaseConfig"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["LambdaConfig"
     {:optional true}
     [:ref "AWS::AppSync::DataSource.LambdaConfig"]]
    ["Type" {:optional true} [:ref "String"]]
    ["DynamoDBConfig"
     {:optional true}
     [:ref "AWS::AppSync::DataSource.DynamoDBConfig"]]]]],
 "AWS::MediaLive::Channel"
 [:map
  ["Type" [:= "AWS::MediaLive::Channel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LogLevel" {:optional true} [:ref "String"]]
    ["EncoderSettings"
     {:optional true}
     [:ref "AWS::MediaLive::Channel.EncoderSettings"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["InputSpecification"
     {:optional true}
     [:ref "AWS::MediaLive::Channel.InputSpecification"]]
    ["Destinations"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::MediaLive::Channel.OutputDestination"]]
      "Fn::If"]]
    ["InputAttachments"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::MediaLive::Channel.InputAttachment"]]
      "Fn::If"]]
    ["ChannelClass" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::SNS::TopicPolicy"
 [:map
  ["Type" [:= "AWS::SNS::TopicPolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PolicyDocument" {:optional true} [:ref "Json"]]
    ["Topics" {:optional true} [:ref "StringList"]]]]],
 "AWS::FMS::NotificationChannel"
 [:map
  ["Type" [:= "AWS::FMS::NotificationChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SnsRoleName" {:optional true} [:ref "String"]]
    ["SnsTopicArn" {:optional true} [:ref "String"]]]]],
 "AWS::WAFv2::RuleGroup.OrStatementOne"
 [:map
  {:closed :true}
  ["Statements"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::RuleGroup.StatementTwo"]]
    "Fn::If"]]],
 "AWS::EC2::LaunchTemplate.LaunchTemplateElasticInferenceAccelerator"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Count" {:optional true} [:ref "Integer"]]],
 "AWS::EC2::LaunchTemplate.CpuOptions"
 [:map
  {:closed :true}
  ["ThreadsPerCore" {:optional true} [:ref "Integer"]]
  ["CoreCount" {:optional true} [:ref "Integer"]]],
 "AWS::IoT::TopicRule.S3Action"
 [:map
  {:closed :true}
  ["BucketName" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::EMR::InstanceGroupConfig.ScalingRule"
 [:map
  {:closed :true}
  ["Action"
   {:optional true}
   [:ref "AWS::EMR::InstanceGroupConfig.ScalingAction"]]
  ["Description" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Trigger"
   {:optional true}
   [:ref "AWS::EMR::InstanceGroupConfig.ScalingTrigger"]]],
 "AWS::Batch::JobDefinition.Environment"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Route53::HealthCheck.HealthCheckTag"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::CodeDeploy::DeploymentGroup"
 [:map
  ["Type" [:= "AWS::CodeDeploy::DeploymentGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LoadBalancerInfo"
     {:optional true}
     [:ref "AWS::CodeDeploy::DeploymentGroup.LoadBalancerInfo"]]
    ["DeploymentConfigName" {:optional true} [:ref "String"]]
    ["OnPremisesInstanceTagFilters"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::CodeDeploy::DeploymentGroup.TagFilter"]]
      "Fn::If"]]
    ["AutoScalingGroups" {:optional true} [:ref "StringList"]]
    ["DeploymentStyle"
     {:optional true}
     [:ref "AWS::CodeDeploy::DeploymentGroup.DeploymentStyle"]]
    ["OnPremisesTagSet"
     {:optional true}
     [:ref "AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSet"]]
    ["DeploymentGroupName" {:optional true} [:ref "String"]]
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["TriggerConfigurations"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodeDeploy::DeploymentGroup.TriggerConfig"]]
      "Fn::If"]]
    ["ServiceRoleArn" {:optional true} [:ref "String"]]
    ["Deployment"
     {:optional true}
     [:ref "AWS::CodeDeploy::DeploymentGroup.Deployment"]]
    ["AlarmConfiguration"
     {:optional true}
     [:ref "AWS::CodeDeploy::DeploymentGroup.AlarmConfiguration"]]
    ["Ec2TagSet"
     {:optional true}
     [:ref "AWS::CodeDeploy::DeploymentGroup.EC2TagSet"]]
    ["AutoRollbackConfiguration"
     {:optional true}
     [:ref
      "AWS::CodeDeploy::DeploymentGroup.AutoRollbackConfiguration"]]
    ["Ec2TagFilters"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodeDeploy::DeploymentGroup.EC2TagFilter"]]
      "Fn::If"]]]]],
 "AWS::AppMesh::VirtualNode.TlsValidationContextFileTrust"
 [:map
  {:closed :true}
  ["CertificateChain" {:optional true} [:ref "String"]]],
 "AWS::EC2::Route"
 [:map
  ["Type" [:= "AWS::EC2::Route"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RouteTableId" {:optional true} [:ref "String"]]
    ["InstanceId" {:optional true} [:ref "String"]]
    ["DestinationCidrBlock" {:optional true} [:ref "String"]]
    ["TransitGatewayId" {:optional true} [:ref "String"]]
    ["NatGatewayId" {:optional true} [:ref "String"]]
    ["EgressOnlyInternetGatewayId" {:optional true} [:ref "String"]]
    ["GatewayId" {:optional true} [:ref "String"]]
    ["DestinationIpv6CidrBlock" {:optional true} [:ref "String"]]
    ["VpcPeeringConnectionId" {:optional true} [:ref "String"]]
    ["NetworkInterfaceId" {:optional true} [:ref "String"]]]]],
 "AWS::MSK::Cluster.EncryptionInfo"
 [:map
  {:closed :true}
  ["EncryptionAtRest"
   {:optional true}
   [:ref "AWS::MSK::Cluster.EncryptionAtRest"]]
  ["EncryptionInTransit"
   {:optional true}
   [:ref "AWS::MSK::Cluster.EncryptionInTransit"]]],
 "AWS::Kendra::DataSource.OneDriveConfiguration"
 [:map
  {:closed :true}
  ["TenantDomain" {:optional true} [:ref "String"]]
  ["SecretArn" {:optional true} [:ref "String"]]
  ["OneDriveUsers"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.OneDriveUsers"]]
  ["InclusionPatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["ExclusionPatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["FieldMappings"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"]]],
 "AWS::MediaLive::Channel.InputChannelLevel"
 [:map
  {:closed :true}
  ["InputChannel" {:optional true} [:ref "Integer"]]
  ["Gain" {:optional true} [:ref "Integer"]]],
 "AWS::MediaLive::Channel.NielsenConfiguration"
 [:map
  {:closed :true}
  ["DistributorId" {:optional true} [:ref "String"]]
  ["NielsenPcmToId3Tagging" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ConnectorDefinitionVersion"
 [:map
  ["Type" [:= "AWS::Greengrass::ConnectorDefinitionVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Connectors"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Greengrass::ConnectorDefinitionVersion.Connector"]]
      "Fn::If"]]
    ["ConnectorDefinitionId" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::SpotFleet.TargetGroup"
 [:map {:closed :true} ["Arn" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.InstanceTypeConfig"
 [:map
  {:closed :true}
  ["BidPrice" {:optional true} [:ref "String"]]
  ["BidPriceAsPercentageOfOnDemandPrice"
   {:optional true}
   [:ref "Double"]]
  ["Configurations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::Cluster.Configuration"]]
    "Fn::If"]]
  ["EbsConfiguration"
   {:optional true}
   [:ref "AWS::EMR::Cluster.EbsConfiguration"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["WeightedCapacity" {:optional true} [:ref "Integer"]]],
 "AWS::S3::Bucket.MetricsConfiguration"
 [:map
  {:closed :true}
  ["Id" {:optional true} [:ref "String"]]
  ["Prefix" {:optional true} [:ref "String"]]
  ["TagFilters"
   {:optional true}
   [:or [:sequential [:ref "AWS::S3::Bucket.TagFilter"]] "Fn::If"]]],
 "AWS::Cognito::IdentityPoolRoleAttachment.RoleMapping"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["AmbiguousRoleResolution" {:optional true} [:ref "String"]]
  ["RulesConfiguration"
   {:optional true}
   [:ref
    "AWS::Cognito::IdentityPoolRoleAttachment.RulesConfigurationType"]]
  ["IdentityProvider" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.VideoSelectorSettings"
 [:map
  {:closed :true}
  ["VideoSelectorProgramId"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.VideoSelectorProgramId"]]
  ["VideoSelectorPid"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.VideoSelectorPid"]]],
 "AWS::IoTAnalytics::Dataset.ResourceConfiguration"
 [:map
  {:closed :true}
  ["VolumeSizeInGB" {:optional true} [:ref "Integer"]]
  ["ComputeType" {:optional true} [:ref "String"]]],
 "AWS::ElasticBeanstalk::ConfigurationTemplate.ConfigurationOptionSetting"
 [:map
  {:closed :true}
  ["Namespace" {:optional true} [:ref "String"]]
  ["OptionName" {:optional true} [:ref "String"]]
  ["ResourceName" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverActionType"
 [:map
  {:closed :true}
  ["Notify" {:optional true} [:ref "Boolean"]]
  ["EventAction" {:optional true} [:ref "String"]]],
 "AWS::SSM::MaintenanceWindowTask.Target"
 [:map
  {:closed :true}
  ["Values" {:optional true} [:ref "StringList"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.ExtendedS3DestinationConfiguration"
 [:map
  {:closed :true}
  ["S3BackupConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration"]]
  ["Prefix" {:optional true} [:ref "String"]]
  ["BucketARN" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]
  ["CloudWatchLoggingOptions"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions"]]
  ["ProcessingConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration"]]
  ["CompressionFormat" {:optional true} [:ref "String"]]
  ["DataFormatConversionConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.DataFormatConversionConfiguration"]]
  ["EncryptionConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.EncryptionConfiguration"]]
  ["BufferingHints"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.BufferingHints"]]
  ["ErrorOutputPrefix" {:optional true} [:ref "String"]]
  ["S3BackupMode" {:optional true} [:ref "String"]]],
 "AWS::DocDB::DBCluster"
 [:map
  ["Type" [:= "AWS::DocDB::DBCluster"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Port" {:optional true} [:ref "Integer"]]
    ["DBClusterIdentifier" {:optional true} [:ref "String"]]
    ["PreferredBackupWindow" {:optional true} [:ref "String"]]
    ["MasterUsername" {:optional true} [:ref "String"]]
    ["DBClusterParameterGroupName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["AvailabilityZones" {:optional true} [:ref "StringList"]]
    ["DBSubnetGroupName" {:optional true} [:ref "String"]]
    ["DeletionProtection" {:optional true} [:ref "Boolean"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["EngineVersion" {:optional true} [:ref "String"]]
    ["BackupRetentionPeriod" {:optional true} [:ref "Integer"]]
    ["VpcSecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["EnableCloudwatchLogsExports"
     {:optional true}
     [:ref "StringList"]]
    ["SnapshotIdentifier" {:optional true} [:ref "String"]]
    ["StorageEncrypted" {:optional true} [:ref "Boolean"]]
    ["MasterUserPassword" {:optional true} [:ref "String"]]]]],
 "AWS::MSK::Cluster.EncryptionAtRest"
 [:map
  {:closed :true}
  ["DataVolumeKMSKeyId" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancing::LoadBalancer.Listeners"
 [:map
  {:closed :true}
  ["InstancePort" {:optional true} [:ref "String"]]
  ["InstanceProtocol" {:optional true} [:ref "String"]]
  ["LoadBalancerPort" {:optional true} [:ref "String"]]
  ["PolicyNames" {:optional true} [:ref "StringList"]]
  ["Protocol" {:optional true} [:ref "String"]]
  ["SSLCertificateId" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Campaign.Message"
 [:map
  {:closed :true}
  ["Url" {:optional true} [:ref "String"]]
  ["RawContent" {:optional true} [:ref "String"]]
  ["ImageUrl" {:optional true} [:ref "String"]]
  ["JsonBody" {:optional true} [:ref "String"]]
  ["ImageSmallIconUrl" {:optional true} [:ref "String"]]
  ["Title" {:optional true} [:ref "String"]]
  ["MediaUrl" {:optional true} [:ref "String"]]
  ["Body" {:optional true} [:ref "String"]]
  ["Action" {:optional true} [:ref "String"]]
  ["TimeToLive" {:optional true} [:ref "Integer"]]
  ["SilentPush" {:optional true} [:ref "Boolean"]]
  ["ImageIconUrl" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinitionVersion.LocalDeviceResourceData"
 [:map
  {:closed :true}
  ["SourcePath" {:optional true} [:ref "String"]]
  ["GroupOwnerSetting"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinitionVersion.GroupOwnerSetting"]]],
 "AWS::SQS::Queue"
 [:map
  ["Type" [:= "AWS::SQS::Queue"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DelaySeconds" {:optional true} [:ref "Integer"]]
    ["MaximumMessageSize" {:optional true} [:ref "Integer"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["VisibilityTimeout" {:optional true} [:ref "Integer"]]
    ["KmsMasterKeyId" {:optional true} [:ref "String"]]
    ["FifoQueue" {:optional true} [:ref "Boolean"]]
    ["QueueName" {:optional true} [:ref "String"]]
    ["MessageRetentionPeriod" {:optional true} [:ref "Integer"]]
    ["ReceiveMessageWaitTimeSeconds" {:optional true} [:ref "Integer"]]
    ["RedrivePolicy" {:optional true} [:ref "Json"]]
    ["ContentBasedDeduplication" {:optional true} [:ref "Boolean"]]
    ["KmsDataKeyReusePeriodSeconds"
     {:optional true}
     [:ref "Integer"]]]]],
 "AWS::ServiceCatalog::LaunchTemplateConstraint"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::LaunchTemplateConstraint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["PortfolioId" {:optional true} [:ref "String"]]
    ["ProductId" {:optional true} [:ref "String"]]
    ["Rules" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisAnalyticsV2::ApplicationOutput.DestinationSchema"
 [:map
  {:closed :true}
  ["RecordFormatType" {:optional true} [:ref "String"]]],
 "AWS::DMS::Endpoint.ElasticsearchSettings"
 [:map
  {:closed :true}
  ["EndpointUri" {:optional true} [:ref "String"]]
  ["FullLoadErrorPercentage" {:optional true} [:ref "Integer"]]
  ["ErrorRetryDuration" {:optional true} [:ref "Integer"]]
  ["ServiceAccessRoleArn" {:optional true} [:ref "String"]]],
 "AWS::LakeFormation::Permissions.DatabaseResource"
 [:map {:closed :true} ["Name" {:optional true} [:ref "String"]]],
 "AWS::PinpointEmail::DedicatedIpPool.Tags"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::EMR::InstanceFleetConfig.VolumeSpecification"
 [:map
  {:closed :true}
  ["Iops" {:optional true} [:ref "Integer"]]
  ["SizeInGB" {:optional true} [:ref "Integer"]]
  ["VolumeType" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::Mesh"
 [:map
  ["Type" [:= "AWS::AppMesh::Mesh"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MeshName" {:optional true} [:ref "String"]]
    ["Spec" {:optional true} [:ref "AWS::AppMesh::Mesh.MeshSpec"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayTlsValidationContextAcmTrust"
 [:map
  {:closed :true}
  ["CertificateAuthorityArns" {:optional true} [:ref "StringList"]]],
 "AWS::EC2::LaunchTemplate.IamInstanceProfile"
 [:map
  {:closed :true}
  ["Arn" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Config::ConfigurationRecorder"
 [:map
  ["Type" [:= "AWS::Config::ConfigurationRecorder"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["RecordingGroup"
     {:optional true}
     [:ref "AWS::Config::ConfigurationRecorder.RecordingGroup"]]
    ["RoleARN" {:optional true} [:ref "String"]]]]],
 "AWS::Pinpoint::Campaign.CampaignHook"
 [:map
  {:closed :true}
  ["Mode" {:optional true} [:ref "String"]]
  ["WebUrl" {:optional true} [:ref "String"]]
  ["LambdaFunctionName" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.TemporalFilterSettings"
 [:map
  {:closed :true}
  ["PostFilterSharpening" {:optional true} [:ref "String"]]
  ["Strength" {:optional true} [:ref "String"]]],
 "AWS::AutoScaling::AutoScalingGroup.TagProperty"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["PropagateAtLaunch" {:optional true} [:ref "Boolean"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::IAM::User"
 [:map
  ["Type" [:= "AWS::IAM::User"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Groups" {:optional true} [:ref "StringList"]]
    ["LoginProfile"
     {:optional true}
     [:ref "AWS::IAM::User.LoginProfile"]]
    ["ManagedPolicyArns" {:optional true} [:ref "StringList"]]
    ["Path" {:optional true} [:ref "String"]]
    ["PermissionsBoundary" {:optional true} [:ref "String"]]
    ["Policies"
     {:optional true}
     [:or [:sequential [:ref "AWS::IAM::User.Policy"]] "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["UserName" {:optional true} [:ref "String"]]]]],
 "AWS::ApiGateway::RequestValidator"
 [:map
  ["Type" [:= "AWS::ApiGateway::RequestValidator"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["RestApiId" {:optional true} [:ref "String"]]
    ["ValidateRequestBody" {:optional true} [:ref "Boolean"]]
    ["ValidateRequestParameters" {:optional true} [:ref "Boolean"]]]]],
 "AWS::IoTAnalytics::Datastore.RetentionPeriod"
 [:map
  {:closed :true}
  ["NumberOfDays" {:optional true} [:ref "Integer"]]
  ["Unlimited" {:optional true} [:ref "Boolean"]]],
 "AWS::SageMaker::MonitoringSchedule.MonitoringInput"
 [:map
  {:closed :true}
  ["EndpointInput"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.EndpointInput"]]],
 "AWS::WAFv2::WebACL.RuleAction"
 [:map
  {:closed :true}
  ["Allow" {:optional true} [:ref "Json"]]
  ["Block" {:optional true} [:ref "Json"]]
  ["Count" {:optional true} [:ref "Json"]]],
 "AWS::ElasticLoadBalancingV2::Listener.AuthenticateOidcConfig"
 [:map
  {:closed :true}
  ["SessionCookieName" {:optional true} [:ref "String"]]
  ["AuthenticationRequestExtraParams"
   {:optional true}
   [:ref "StringMap"]]
  ["Issuer" {:optional true} [:ref "String"]]
  ["AuthorizationEndpoint" {:optional true} [:ref "String"]]
  ["Scope" {:optional true} [:ref "String"]]
  ["ClientId" {:optional true} [:ref "String"]]
  ["ClientSecret" {:optional true} [:ref "String"]]
  ["UserInfoEndpoint" {:optional true} [:ref "String"]]
  ["SessionTimeout" {:optional true} [:ref "Long"]]
  ["OnUnauthenticatedRequest" {:optional true} [:ref "String"]]
  ["TokenEndpoint" {:optional true} [:ref "String"]]],
 "AWS::EC2::Instance.Ebs"
 [:map
  {:closed :true}
  ["DeleteOnTermination" {:optional true} [:ref "Boolean"]]
  ["Encrypted" {:optional true} [:ref "Boolean"]]
  ["Iops" {:optional true} [:ref "Integer"]]
  ["KmsKeyId" {:optional true} [:ref "String"]]
  ["SnapshotId" {:optional true} [:ref "String"]]
  ["VolumeSize" {:optional true} [:ref "Integer"]]
  ["VolumeType" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::Listener.TargetGroupStickinessConfig"
 [:map
  {:closed :true}
  ["DurationSeconds" {:optional true} [:ref "Integer"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::Cognito::UserPoolUser.AttributeType"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::OpsWorks::App.Source"
 [:map
  {:closed :true}
  ["Password" {:optional true} [:ref "String"]]
  ["Revision" {:optional true} [:ref "String"]]
  ["SshKey" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Url" {:optional true} [:ref "String"]]
  ["Username" {:optional true} [:ref "String"]]],
 "AWS::EC2::NetworkInterface.PrivateIpAddressSpecification"
 [:map
  {:closed :true}
  ["Primary" {:optional true} [:ref "Boolean"]]
  ["PrivateIpAddress" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.AuthenticateOidcConfig"
 [:map
  {:closed :true}
  ["SessionCookieName" {:optional true} [:ref "String"]]
  ["AuthenticationRequestExtraParams"
   {:optional true}
   [:ref "StringMap"]]
  ["Issuer" {:optional true} [:ref "String"]]
  ["AuthorizationEndpoint" {:optional true} [:ref "String"]]
  ["Scope" {:optional true} [:ref "String"]]
  ["ClientId" {:optional true} [:ref "String"]]
  ["ClientSecret" {:optional true} [:ref "String"]]
  ["UserInfoEndpoint" {:optional true} [:ref "String"]]
  ["SessionTimeout" {:optional true} [:ref "Long"]]
  ["OnUnauthenticatedRequest" {:optional true} [:ref "String"]]
  ["TokenEndpoint" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.CSVMappingParameters"
 [:map
  {:closed :true}
  ["RecordRowDelimiter" {:optional true} [:ref "String"]]
  ["RecordColumnDelimiter" {:optional true} [:ref "String"]]],
 "AWS::CloudTrail::Trail"
 [:map
  ["Type" [:= "AWS::CloudTrail::Trail"]]
  ["Properties"
   [:map
    {:closed :true}
    ["KMSKeyId" {:optional true} [:ref "String"]]
    ["TrailName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["EnableLogFileValidation" {:optional true} [:ref "Boolean"]]
    ["SnsTopicName" {:optional true} [:ref "String"]]
    ["IncludeGlobalServiceEvents" {:optional true} [:ref "Boolean"]]
    ["CloudWatchLogsRoleArn" {:optional true} [:ref "String"]]
    ["EventSelectors"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::CloudTrail::Trail.EventSelector"]]
      "Fn::If"]]
    ["CloudWatchLogsLogGroupArn" {:optional true} [:ref "String"]]
    ["IsLogging" {:optional true} [:ref "Boolean"]]
    ["S3BucketName" {:optional true} [:ref "String"]]
    ["IsMultiRegionTrail" {:optional true} [:ref "Boolean"]]
    ["S3KeyPrefix" {:optional true} [:ref "String"]]]]],
 "AWS::DynamoDB::Table.GlobalSecondaryIndex"
 [:map
  {:closed :true}
  ["IndexName" {:optional true} [:ref "String"]]
  ["KeySchema"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::DynamoDB::Table.KeySchema"]]
    "Fn::If"]]
  ["Projection"
   {:optional true}
   [:ref "AWS::DynamoDB::Table.Projection"]]
  ["ProvisionedThroughput"
   {:optional true}
   [:ref "AWS::DynamoDB::Table.ProvisionedThroughput"]]],
 "AWS::Glue::Classifier"
 [:map
  ["Type" [:= "AWS::Glue::Classifier"]]
  ["Properties"
   [:map
    {:closed :true}
    ["XMLClassifier"
     {:optional true}
     [:ref "AWS::Glue::Classifier.XMLClassifier"]]
    ["JsonClassifier"
     {:optional true}
     [:ref "AWS::Glue::Classifier.JsonClassifier"]]
    ["CsvClassifier"
     {:optional true}
     [:ref "AWS::Glue::Classifier.CsvClassifier"]]
    ["GrokClassifier"
     {:optional true}
     [:ref "AWS::Glue::Classifier.GrokClassifier"]]]]],
 "AWS::WAFv2::WebACL.TextTransformation"
 [:map
  {:closed :true}
  ["Priority" {:optional true} [:ref "Integer"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::Config::ConfigRule.Scope"
 [:map
  {:closed :true}
  ["ComplianceResourceId" {:optional true} [:ref "String"]]
  ["ComplianceResourceTypes" {:optional true} [:ref "StringList"]]
  ["TagKey" {:optional true} [:ref "String"]]
  ["TagValue" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.BufferingHints"
 [:map
  {:closed :true}
  ["IntervalInSeconds" {:optional true} [:ref "Integer"]]
  ["SizeInMBs" {:optional true} [:ref "Integer"]]],
 "AWS::RoboMaker::SimulationApplication"
 [:map
  ["Type" [:= "AWS::RoboMaker::SimulationApplication"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RenderingEngine"
     {:optional true}
     [:ref "AWS::RoboMaker::SimulationApplication.RenderingEngine"]]
    ["SimulationSoftwareSuite"
     {:optional true}
     [:ref
      "AWS::RoboMaker::SimulationApplication.SimulationSoftwareSuite"]]
    ["CurrentRevisionId" {:optional true} [:ref "String"]]
    ["RobotSoftwareSuite"
     {:optional true}
     [:ref "AWS::RoboMaker::SimulationApplication.RobotSoftwareSuite"]]
    ["Sources"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::RoboMaker::SimulationApplication.SourceConfig"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::WAF::XssMatchSet.XssMatchTuple"
 [:map
  {:closed :true}
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAF::XssMatchSet.FieldToMatch"]]
  ["TextTransformation" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.ClientPolicy"
 [:map
  {:closed :true}
  ["TLS"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.ClientPolicyTls"]]],
 "AWS::MediaLive::Input.MediaConnectFlowRequest"
 [:map {:closed :true} ["FlowArn" {:optional true} [:ref "String"]]],
 "AWS::AppStream::Fleet"
 [:map
  ["Type" [:= "AWS::AppStream::Fleet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["FleetType" {:optional true} [:ref "String"]]
    ["MaxUserDurationInSeconds" {:optional true} [:ref "Integer"]]
    ["DomainJoinInfo"
     {:optional true}
     [:ref "AWS::AppStream::Fleet.DomainJoinInfo"]]
    ["VpcConfig"
     {:optional true}
     [:ref "AWS::AppStream::Fleet.VpcConfig"]]
    ["ImageArn" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["InstanceType" {:optional true} [:ref "String"]]
    ["ComputeCapacity"
     {:optional true}
     [:ref "AWS::AppStream::Fleet.ComputeCapacity"]]
    ["EnableDefaultInternetAccess" {:optional true} [:ref "Boolean"]]
    ["DisplayName" {:optional true} [:ref "String"]]
    ["IdleDisconnectTimeoutInSeconds"
     {:optional true}
     [:ref "Integer"]]
    ["ImageName" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["DisconnectTimeoutInSeconds"
     {:optional true}
     [:ref "Integer"]]]]],
 "AWS::AppStream::StackFleetAssociation"
 [:map
  ["Type" [:= "AWS::AppStream::StackFleetAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["FleetName" {:optional true} [:ref "String"]]
    ["StackName" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisFirehose::DeliveryStream.CopyCommand"
 [:map
  {:closed :true}
  ["CopyOptions" {:optional true} [:ref "String"]]
  ["DataTableColumns" {:optional true} [:ref "String"]]
  ["DataTableName" {:optional true} [:ref "String"]]],
 "AWS::DirectoryService::MicrosoftAD"
 [:map
  ["Type" [:= "AWS::DirectoryService::MicrosoftAD"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CreateAlias" {:optional true} [:ref "Boolean"]]
    ["Edition" {:optional true} [:ref "String"]]
    ["EnableSso" {:optional true} [:ref "Boolean"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Password" {:optional true} [:ref "String"]]
    ["ShortName" {:optional true} [:ref "String"]]
    ["VpcSettings"
     {:optional true}
     [:ref "AWS::DirectoryService::MicrosoftAD.VpcSettings"]]]]],
 "AWS::EC2::Instance.InstanceIpv6Address"
 [:map
  {:closed :true}
  ["Ipv6Address" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.S3Path"
 [:map
  {:closed :true}
  ["Bucket" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::GameLift::Alias"
 [:map
  ["Type" [:= "AWS::GameLift::Alias"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["RoutingStrategy"
     {:optional true}
     [:ref "AWS::GameLift::Alias.RoutingStrategy"]]]]],
 "AWS::AutoScaling::LaunchConfiguration.BlockDevice"
 [:map
  {:closed :true}
  ["DeleteOnTermination" {:optional true} [:ref "Boolean"]]
  ["Encrypted" {:optional true} [:ref "Boolean"]]
  ["Iops" {:optional true} [:ref "Integer"]]
  ["SnapshotId" {:optional true} [:ref "String"]]
  ["VolumeSize" {:optional true} [:ref "Integer"]]
  ["VolumeType" {:optional true} [:ref "String"]]],
 "AWS::Lambda::LayerVersionPermission"
 [:map
  ["Type" [:= "AWS::Lambda::LayerVersionPermission"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Action" {:optional true} [:ref "String"]]
    ["LayerVersionArn" {:optional true} [:ref "String"]]
    ["OrganizationId" {:optional true} [:ref "String"]]
    ["Principal" {:optional true} [:ref "String"]]]]],
 "AWS::CloudFront::CachePolicy.CachePolicyConfig"
 [:map
  {:closed :true}
  ["Comment" {:optional true} [:ref "String"]]
  ["DefaultTTL" {:optional true} [:ref "Double"]]
  ["MaxTTL" {:optional true} [:ref "Double"]]
  ["MinTTL" {:optional true} [:ref "Double"]]
  ["Name" {:optional true} [:ref "String"]]
  ["ParametersInCacheKeyAndForwardedToOrigin"
   {:optional true}
   [:ref
    "AWS::CloudFront::CachePolicy.ParametersInCacheKeyAndForwardedToOrigin"]]],
 "AWS::RDS::EventSubscription"
 [:map
  ["Type" [:= "AWS::RDS::EventSubscription"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["EventCategories" {:optional true} [:ref "StringList"]]
    ["SnsTopicArn" {:optional true} [:ref "String"]]
    ["SourceIds" {:optional true} [:ref "StringList"]]
    ["SourceType" {:optional true} [:ref "String"]]]]],
 "AWS::IoTAnalytics::Pipeline"
 [:map
  ["Type" [:= "AWS::IoTAnalytics::Pipeline"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PipelineName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["PipelineActivities"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::IoTAnalytics::Pipeline.Activity"]]
      "Fn::If"]]]]],
 "AWS::SSM::PatchBaseline.PatchFilter"
 [:map
  {:closed :true}
  ["Values" {:optional true} [:ref "StringList"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.DvbSubSourceSettings"
 [:map {:closed :true} ["Pid" {:optional true} [:ref "Integer"]]],
 "AWS::WAFv2::RegexPatternSet"
 [:map
  ["Type" [:= "AWS::WAFv2::RegexPatternSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["RegularExpressionList" {:optional true} [:ref "StringList"]]
    ["Scope" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Athena::WorkGroup"
 [:map
  ["Type" [:= "AWS::Athena::WorkGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "AWS::Athena::WorkGroup.Tags"]]
    ["WorkGroupConfiguration"
     {:optional true}
     [:ref "AWS::Athena::WorkGroup.WorkGroupConfiguration"]]
    ["WorkGroupConfigurationUpdates"
     {:optional true}
     [:ref "AWS::Athena::WorkGroup.WorkGroupConfigurationUpdates"]]
    ["State" {:optional true} [:ref "String"]]
    ["RecursiveDeleteOption" {:optional true} [:ref "Boolean"]]]]],
 "AWS::IoTEvents::DetectorModel"
 [:map
  ["Type" [:= "AWS::IoTEvents::DetectorModel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DetectorModelDefinition"
     {:optional true}
     [:ref "AWS::IoTEvents::DetectorModel.DetectorModelDefinition"]]
    ["EvaluationMethod" {:optional true} [:ref "String"]]
    ["DetectorModelName" {:optional true} [:ref "String"]]
    ["DetectorModelDescription" {:optional true} [:ref "String"]]
    ["Key" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationType"
 [:map
  {:closed :true}
  ["Actions"
   {:optional true}
   [:ref
    "AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverActionsType"]]
  ["NotifyConfiguration"
   {:optional true}
   [:ref
    "AWS::Cognito::UserPoolRiskConfigurationAttachment.NotifyConfigurationType"]]],
 "AWS::MediaLive::Channel.AudioDescription"
 [:map
  {:closed :true}
  ["AudioTypeControl" {:optional true} [:ref "String"]]
  ["LanguageCodeControl" {:optional true} [:ref "String"]]
  ["AudioType" {:optional true} [:ref "String"]]
  ["StreamName" {:optional true} [:ref "String"]]
  ["RemixSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.RemixSettings"]]
  ["CodecSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AudioCodecSettings"]]
  ["Name" {:optional true} [:ref "String"]]
  ["AudioSelectorName" {:optional true} [:ref "String"]]
  ["AudioNormalizationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AudioNormalizationSettings"]]
  ["LanguageCode" {:optional true} [:ref "String"]]],
 "AWS::RDS::DBInstance"
 [:map
  ["Type" [:= "AWS::RDS::DBInstance"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PromotionTier" {:optional true} [:ref "Integer"]]
    ["Port" {:optional true} [:ref "String"]]
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["Domain" {:optional true} [:ref "String"]]
    ["CopyTagsToSnapshot" {:optional true} [:ref "Boolean"]]
    ["MonitoringRoleArn" {:optional true} [:ref "String"]]
    ["DBClusterIdentifier" {:optional true} [:ref "String"]]
    ["MonitoringInterval" {:optional true} [:ref "Integer"]]
    ["PreferredBackupWindow" {:optional true} [:ref "String"]]
    ["AllocatedStorage" {:optional true} [:ref "String"]]
    ["PubliclyAccessible" {:optional true} [:ref "Boolean"]]
    ["AutoMinorVersionUpgrade" {:optional true} [:ref "Boolean"]]
    ["MasterUsername" {:optional true} [:ref "String"]]
    ["DBInstanceClass" {:optional true} [:ref "String"]]
    ["PerformanceInsightsKMSKeyId" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["DBParameterGroupName" {:optional true} [:ref "String"]]
    ["DBName" {:optional true} [:ref "String"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["AllowMajorVersionUpgrade" {:optional true} [:ref "Boolean"]]
    ["MaxAllocatedStorage" {:optional true} [:ref "Integer"]]
    ["OptionGroupName" {:optional true} [:ref "String"]]
    ["VPCSecurityGroups" {:optional true} [:ref "StringList"]]
    ["CACertificateIdentifier" {:optional true} [:ref "String"]]
    ["DBSubnetGroupName" {:optional true} [:ref "String"]]
    ["DeletionProtection" {:optional true} [:ref "Boolean"]]
    ["DBInstanceIdentifier" {:optional true} [:ref "String"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["Timezone" {:optional true} [:ref "String"]]
    ["EngineVersion" {:optional true} [:ref "String"]]
    ["EnablePerformanceInsights" {:optional true} [:ref "Boolean"]]
    ["BackupRetentionPeriod" {:optional true} [:ref "Integer"]]
    ["EnableIAMDatabaseAuthentication"
     {:optional true}
     [:ref "Boolean"]]
    ["SourceDBInstanceIdentifier" {:optional true} [:ref "String"]]
    ["AssociatedRoles"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::RDS::DBInstance.DBInstanceRole"]]
      "Fn::If"]]
    ["DBSecurityGroups" {:optional true} [:ref "StringList"]]
    ["PerformanceInsightsRetentionPeriod"
     {:optional true}
     [:ref "Integer"]]
    ["UseDefaultProcessorFeatures" {:optional true} [:ref "Boolean"]]
    ["EnableCloudwatchLogsExports"
     {:optional true}
     [:ref "StringList"]]
    ["LicenseModel" {:optional true} [:ref "String"]]
    ["DomainIAMRoleName" {:optional true} [:ref "String"]]
    ["DeleteAutomatedBackups" {:optional true} [:ref "Boolean"]]
    ["SourceRegion" {:optional true} [:ref "String"]]
    ["DBSnapshotIdentifier" {:optional true} [:ref "String"]]
    ["ProcessorFeatures"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::RDS::DBInstance.ProcessorFeature"]]
      "Fn::If"]]
    ["CharacterSetName" {:optional true} [:ref "String"]]
    ["StorageEncrypted" {:optional true} [:ref "Boolean"]]
    ["Iops" {:optional true} [:ref "Integer"]]
    ["MasterUserPassword" {:optional true} [:ref "String"]]
    ["StorageType" {:optional true} [:ref "String"]]
    ["MultiAZ" {:optional true} [:ref "Boolean"]]
    ["Engine" {:optional true} [:ref "String"]]]]],
 "AWS::Cognito::IdentityPoolRoleAttachment.MappingRule"
 [:map
  {:closed :true}
  ["MatchType" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]
  ["Claim" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::Model"
 [:map
  ["Type" [:= "AWS::ApiGateway::Model"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ContentType" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["RestApiId" {:optional true} [:ref "String"]]
    ["Schema" {:optional true} [:ref "Json"]]]]],
 "AWS::EC2::NetworkInterfaceAttachment"
 [:map
  ["Type" [:= "AWS::EC2::NetworkInterfaceAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DeleteOnTermination" {:optional true} [:ref "Boolean"]]
    ["DeviceIndex" {:optional true} [:ref "String"]]
    ["InstanceId" {:optional true} [:ref "String"]]
    ["NetworkInterfaceId" {:optional true} [:ref "String"]]]]],
 "AWS::Cognito::UserPool.StringAttributeConstraints"
 [:map
  {:closed :true}
  ["MinLength" {:optional true} [:ref "String"]]
  ["MaxLength" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource"
 [:map
  ["Type"
   [:= "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["ReferenceDataSource"
     {:optional true}
     [:ref
      "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.ReferenceDataSource"]]]]],
 "AWS::Pinpoint::Campaign.AttributeDimension"
 [:map
  {:closed :true}
  ["AttributeType" {:optional true} [:ref "String"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration"
 [:map
  {:closed :true}
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["Processors"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::KinesisFirehose::DeliveryStream.Processor"]]
    "Fn::If"]]],
 "AWS::DMS::Endpoint.DynamoDbSettings"
 [:map
  {:closed :true}
  ["ServiceAccessRoleArn" {:optional true} [:ref "String"]]],
 "AWS::CodeStar::GitHubRepository"
 [:map
  ["Type" [:= "AWS::CodeStar::GitHubRepository"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EnableIssues" {:optional true} [:ref "Boolean"]]
    ["RepositoryName" {:optional true} [:ref "String"]]
    ["RepositoryAccessToken" {:optional true} [:ref "String"]]
    ["RepositoryOwner" {:optional true} [:ref "String"]]
    ["IsPrivate" {:optional true} [:ref "Boolean"]]
    ["Code"
     {:optional true}
     [:ref "AWS::CodeStar::GitHubRepository.Code"]]
    ["RepositoryDescription" {:optional true} [:ref "String"]]]]],
 "AWS::EMR::Cluster.EbsBlockDeviceConfig"
 [:map
  {:closed :true}
  ["VolumeSpecification"
   {:optional true}
   [:ref "AWS::EMR::Cluster.VolumeSpecification"]]
  ["VolumesPerInstance" {:optional true} [:ref "Integer"]]],
 "AWS::EMR::Cluster.SimpleScalingPolicyConfiguration"
 [:map
  {:closed :true}
  ["AdjustmentType" {:optional true} [:ref "String"]]
  ["CoolDown" {:optional true} [:ref "Integer"]]
  ["ScalingAdjustment" {:optional true} [:ref "Integer"]]],
 "AWS::GuardDuty::Member"
 [:map
  ["Type" [:= "AWS::GuardDuty::Member"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Status" {:optional true} [:ref "String"]]
    ["MemberId" {:optional true} [:ref "String"]]
    ["Email" {:optional true} [:ref "String"]]
    ["Message" {:optional true} [:ref "String"]]
    ["DisableEmailNotification" {:optional true} [:ref "Boolean"]]
    ["DetectorId" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisAnalyticsV2::Application"
 [:map
  ["Type" [:= "AWS::KinesisAnalyticsV2::Application"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["RuntimeEnvironment" {:optional true} [:ref "String"]]
    ["ApplicationConfiguration"
     {:optional true}
     [:ref
      "AWS::KinesisAnalyticsV2::Application.ApplicationConfiguration"]]
    ["ApplicationDescription" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ServiceExecutionRole" {:optional true} [:ref "String"]]]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.FixedResponseConfig"
 [:map
  {:closed :true}
  ["ContentType" {:optional true} [:ref "String"]]
  ["MessageBody" {:optional true} [:ref "String"]]
  ["StatusCode" {:optional true} [:ref "String"]]],
 "AWS::Neptune::DBCluster"
 [:map
  ["Type" [:= "AWS::Neptune::DBCluster"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Port" {:optional true} [:ref "Integer"]]
    ["DBClusterIdentifier" {:optional true} [:ref "String"]]
    ["PreferredBackupWindow" {:optional true} [:ref "String"]]
    ["DBClusterParameterGroupName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["RestoreType" {:optional true} [:ref "String"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["UseLatestRestorableTime" {:optional true} [:ref "Boolean"]]
    ["RestoreToTime" {:optional true} [:ref "String"]]
    ["AvailabilityZones" {:optional true} [:ref "StringList"]]
    ["DBSubnetGroupName" {:optional true} [:ref "String"]]
    ["DeletionProtection" {:optional true} [:ref "Boolean"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["EngineVersion" {:optional true} [:ref "String"]]
    ["IamAuthEnabled" {:optional true} [:ref "Boolean"]]
    ["SourceDBClusterIdentifier" {:optional true} [:ref "String"]]
    ["BackupRetentionPeriod" {:optional true} [:ref "Integer"]]
    ["VpcSecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["AssociatedRoles"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Neptune::DBCluster.DBClusterRole"]]
      "Fn::If"]]
    ["EnableCloudwatchLogsExports"
     {:optional true}
     [:ref "StringList"]]
    ["SnapshotIdentifier" {:optional true} [:ref "String"]]
    ["StorageEncrypted" {:optional true} [:ref "Boolean"]]]]],
 "AWS::RDS::DBSecurityGroupIngress"
 [:map
  ["Type" [:= "AWS::RDS::DBSecurityGroupIngress"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CIDRIP" {:optional true} [:ref "String"]]
    ["DBSecurityGroupName" {:optional true} [:ref "String"]]
    ["EC2SecurityGroupId" {:optional true} [:ref "String"]]
    ["EC2SecurityGroupName" {:optional true} [:ref "String"]]
    ["EC2SecurityGroupOwnerId" {:optional true} [:ref "String"]]]]],
 "AWS::Lambda::EventSourceMapping.OnFailure"
 [:map
  {:closed :true}
  ["Destination" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinitionVersion.ResourceDownloadOwnerSetting"
 [:map
  {:closed :true}
  ["GroupOwner" {:optional true} [:ref "String"]]
  ["GroupPermission" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.SqliMatchStatement"
 [:map
  {:closed :true}
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.FieldToMatch"]]
  ["TextTransformations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.TextTransformation"]]
    "Fn::If"]]],
 "AWS::ECS::Service"
 [:map
  ["Type" [:= "AWS::ECS::Service"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EnableECSManagedTags" {:optional true} [:ref "Boolean"]]
    ["PlacementConstraints"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ECS::Service.PlacementConstraint"]]
      "Fn::If"]]
    ["PlacementStrategies"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ECS::Service.PlacementStrategy"]]
      "Fn::If"]]
    ["HealthCheckGracePeriodSeconds" {:optional true} [:ref "Integer"]]
    ["DesiredCount" {:optional true} [:ref "Integer"]]
    ["PropagateTags" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["TaskDefinition" {:optional true} [:ref "String"]]
    ["ServiceRegistries"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ECS::Service.ServiceRegistry"]]
      "Fn::If"]]
    ["SchedulingStrategy" {:optional true} [:ref "String"]]
    ["DeploymentConfiguration"
     {:optional true}
     [:ref "AWS::ECS::Service.DeploymentConfiguration"]]
    ["DeploymentController"
     {:optional true}
     [:ref "AWS::ECS::Service.DeploymentController"]]
    ["PlatformVersion" {:optional true} [:ref "String"]]
    ["NetworkConfiguration"
     {:optional true}
     [:ref "AWS::ECS::Service.NetworkConfiguration"]]
    ["LoadBalancers"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ECS::Service.LoadBalancer"]]
      "Fn::If"]]
    ["Cluster" {:optional true} [:ref "String"]]
    ["LaunchType" {:optional true} [:ref "String"]]
    ["Role" {:optional true} [:ref "String"]]
    ["ServiceName" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::Instance.Volume"
 [:map
  {:closed :true}
  ["Device" {:optional true} [:ref "String"]]
  ["VolumeId" {:optional true} [:ref "String"]]],
 "AWS::AutoScalingPlans::ScalingPlan.ScalingInstruction"
 [:map
  {:closed :true}
  ["CustomizedLoadMetricSpecification"
   {:optional true}
   [:ref
    "AWS::AutoScalingPlans::ScalingPlan.CustomizedLoadMetricSpecification"]]
  ["ServiceNamespace" {:optional true} [:ref "String"]]
  ["MinCapacity" {:optional true} [:ref "Integer"]]
  ["ScalingPolicyUpdateBehavior" {:optional true} [:ref "String"]]
  ["TargetTrackingConfigurations"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::AutoScalingPlans::ScalingPlan.TargetTrackingConfiguration"]]
    "Fn::If"]]
  ["PredictiveScalingMaxCapacityBehavior"
   {:optional true}
   [:ref "String"]]
  ["PredictiveScalingMode" {:optional true} [:ref "String"]]
  ["MaxCapacity" {:optional true} [:ref "Integer"]]
  ["ResourceId" {:optional true} [:ref "String"]]
  ["PredictiveScalingMaxCapacityBuffer"
   {:optional true}
   [:ref "Integer"]]
  ["DisableDynamicScaling" {:optional true} [:ref "Boolean"]]
  ["ScheduledActionBufferTime" {:optional true} [:ref "Integer"]]
  ["PredefinedLoadMetricSpecification"
   {:optional true}
   [:ref
    "AWS::AutoScalingPlans::ScalingPlan.PredefinedLoadMetricSpecification"]]
  ["ScalableDimension" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinition.S3MachineLearningModelResourceData"
 [:map
  {:closed :true}
  ["OwnerSetting"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinition.ResourceDownloadOwnerSetting"]]
  ["DestinationPath" {:optional true} [:ref "String"]]
  ["S3Uri" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.AudioTrack"
 [:map {:closed :true} ["Track" {:optional true} [:ref "Integer"]]],
 "AWS::Detective::MemberInvitation"
 [:map
  ["Type" [:= "AWS::Detective::MemberInvitation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GraphArn" {:optional true} [:ref "String"]]
    ["MemberId" {:optional true} [:ref "String"]]
    ["MemberEmailAddress" {:optional true} [:ref "String"]]
    ["Message" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::DHCPOptions"
 [:map
  ["Type" [:= "AWS::EC2::DHCPOptions"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DomainName" {:optional true} [:ref "String"]]
    ["DomainNameServers" {:optional true} [:ref "StringList"]]
    ["NetbiosNameServers" {:optional true} [:ref "StringList"]]
    ["NetbiosNodeType" {:optional true} [:ref "Integer"]]
    ["NtpServers" {:optional true} [:ref "StringList"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::IoT::TopicRule.AssetPropertyValue"
 [:map
  {:closed :true}
  ["Quality" {:optional true} [:ref "String"]]
  ["Timestamp"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.AssetPropertyTimestamp"]]
  ["Value"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.AssetPropertyVariant"]]],
 "AWS::IoT::TopicRule.HttpAction"
 [:map
  {:closed :true}
  ["Auth"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.HttpAuthorization"]]
  ["ConfirmationUrl" {:optional true} [:ref "String"]]
  ["Headers"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoT::TopicRule.HttpActionHeader"]]
    "Fn::If"]]
  ["Url" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.Backend"
 [:map
  {:closed :true}
  ["VirtualService"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.VirtualServiceBackend"]]],
 "AWS::MediaLive::Channel.MultiplexOutputSettings"
 [:map
  {:closed :true}
  ["Destination"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.OutputLocationRef"]]],
 "AWS::EKS::FargateProfile.Selector"
 [:map
  {:closed :true}
  ["Namespace" {:optional true} [:ref "String"]]
  ["Labels"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EKS::FargateProfile.Label"]]
    "Fn::If"]]],
 "AWS::SageMaker::EndpointConfig.CaptureOption"
 [:map
  {:closed :true}
  ["CaptureMode" {:optional true} [:ref "String"]]],
 "AWS::WAF::ByteMatchSet.ByteMatchTuple"
 [:map
  {:closed :true}
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAF::ByteMatchSet.FieldToMatch"]]
  ["PositionalConstraint" {:optional true} [:ref "String"]]
  ["TargetString" {:optional true} [:ref "String"]]
  ["TargetStringBase64" {:optional true} [:ref "String"]]
  ["TextTransformation" {:optional true} [:ref "String"]]],
 "AWS::Macie::FindingsFilter.FindingsFilterListItem"
 [:map
  {:closed :true}
  ["Id" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ApplicationInsights::Application.LogPatternSet"
 [:map
  {:closed :true}
  ["PatternSetName" {:optional true} [:ref "String"]]
  ["LogPatterns"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::ApplicationInsights::Application.LogPattern"]]
    "Fn::If"]]],
 "AWS::Backup::BackupPlan.BackupRuleResourceType"
 [:map
  {:closed :true}
  ["CompletionWindowMinutes" {:optional true} [:ref "Double"]]
  ["ScheduleExpression" {:optional true} [:ref "String"]]
  ["RecoveryPointTags" {:optional true} [:ref "Json"]]
  ["CopyActions"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Backup::BackupPlan.CopyActionResourceType"]]
    "Fn::If"]]
  ["Lifecycle"
   {:optional true}
   [:ref "AWS::Backup::BackupPlan.LifecycleResourceType"]]
  ["TargetBackupVault" {:optional true} [:ref "String"]]
  ["StartWindowMinutes" {:optional true} [:ref "Double"]]
  ["RuleName" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.StaticKeySettings"
 [:map
  {:closed :true}
  ["KeyProviderServer"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.InputLocation"]]
  ["StaticKeyValue" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.SplunkDestinationConfiguration"
 [:map
  {:closed :true}
  ["HECAcknowledgmentTimeoutInSeconds"
   {:optional true}
   [:ref "Integer"]]
  ["CloudWatchLoggingOptions"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions"]]
  ["ProcessingConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration"]]
  ["RetryOptions"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.SplunkRetryOptions"]]
  ["HECToken" {:optional true} [:ref "String"]]
  ["S3Configuration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration"]]
  ["HECEndpoint" {:optional true} [:ref "String"]]
  ["HECEndpointType" {:optional true} [:ref "String"]]
  ["S3BackupMode" {:optional true} [:ref "String"]]],
 "AWS::CloudFormation::CustomResource"
 [:map
  ["Type" [:= "AWS::CloudFormation::CustomResource"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ServiceToken" {:optional true} [:ref "String"]]]]],
 "AWS::EMR::Cluster.Application"
 [:map
  {:closed :true}
  ["AdditionalInfo" {:optional true} [:ref "StringMap"]]
  ["Args" {:optional true} [:ref "StringList"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]],
 "AWS::ServiceDiscovery::Service"
 [:map
  ["Type" [:= "AWS::ServiceDiscovery::Service"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["HealthCheckCustomConfig"
     {:optional true}
     [:ref "AWS::ServiceDiscovery::Service.HealthCheckCustomConfig"]]
    ["DnsConfig"
     {:optional true}
     [:ref "AWS::ServiceDiscovery::Service.DnsConfig"]]
    ["NamespaceId" {:optional true} [:ref "String"]]
    ["HealthCheckConfig"
     {:optional true}
     [:ref "AWS::ServiceDiscovery::Service.HealthCheckConfig"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::GatewayRoute.GatewayRouteTarget"
 [:map
  {:closed :true}
  ["VirtualService"
   {:optional true}
   [:ref "AWS::AppMesh::GatewayRoute.GatewayRouteVirtualService"]]],
 "AWS::AppMesh::VirtualNode.DnsServiceDiscovery"
 [:map {:closed :true} ["Hostname" {:optional true} [:ref "String"]]],
 "AWS::AppStream::User"
 [:map
  ["Type" [:= "AWS::AppStream::User"]]
  ["Properties"
   [:map
    {:closed :true}
    ["UserName" {:optional true} [:ref "String"]]
    ["FirstName" {:optional true} [:ref "String"]]
    ["MessageAction" {:optional true} [:ref "String"]]
    ["LastName" {:optional true} [:ref "String"]]
    ["AuthenticationType" {:optional true} [:ref "String"]]]]],
 "AWS::PinpointEmail::ConfigurationSetEventDestination.CloudWatchDestination"
 [:map
  {:closed :true}
  ["DimensionConfigurations"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::PinpointEmail::ConfigurationSetEventDestination.DimensionConfiguration"]]
    "Fn::If"]]],
 "AWS::AppMesh::Route.TcpRoute"
 [:map
  {:closed :true}
  ["Action"
   {:optional true}
   [:ref "AWS::AppMesh::Route.TcpRouteAction"]]
  ["Timeout"
   {:optional true}
   [:ref "AWS::AppMesh::Route.TcpTimeout"]]],
 "AWS::Cognito::UserPool.SmsConfiguration"
 [:map
  {:closed :true}
  ["ExternalId" {:optional true} [:ref "String"]]
  ["SnsCallerArn" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.EmbeddedSourceSettings"
 [:map
  {:closed :true}
  ["Source608ChannelNumber" {:optional true} [:ref "Integer"]]
  ["Scte20Detection" {:optional true} [:ref "String"]]
  ["Source608TrackNumber" {:optional true} [:ref "Integer"]]
  ["Convert608To708" {:optional true} [:ref "String"]]],
 "AWS::GameLift::GameServerGroup"
 [:map
  ["Type" [:= "AWS::GameLift::GameServerGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MinSize" {:optional true} [:ref "Double"]]
    ["GameServerProtectionPolicy" {:optional true} [:ref "String"]]
    ["AutoScalingPolicy"
     {:optional true}
     [:ref "AWS::GameLift::GameServerGroup.AutoScalingPolicy"]]
    ["Tags"
     {:optional true}
     [:ref "AWS::GameLift::GameServerGroup.Tags"]]
    ["VpcSubnets"
     {:optional true}
     [:ref "AWS::GameLift::GameServerGroup.VpcSubnets"]]
    ["LaunchTemplate"
     {:optional true}
     [:ref "AWS::GameLift::GameServerGroup.LaunchTemplate"]]
    ["MaxSize" {:optional true} [:ref "Double"]]
    ["GameServerGroupName" {:optional true} [:ref "String"]]
    ["InstanceDefinitions"
     {:optional true}
     [:ref "AWS::GameLift::GameServerGroup.InstanceDefinitions"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["BalancingStrategy" {:optional true} [:ref "String"]]
    ["DeleteOption" {:optional true} [:ref "String"]]]]],
 "AWS::Kendra::DataSource.ColumnConfiguration"
 [:map
  {:closed :true}
  ["DocumentIdColumnName" {:optional true} [:ref "String"]]
  ["DocumentDataColumnName" {:optional true} [:ref "String"]]
  ["DocumentTitleColumnName" {:optional true} [:ref "String"]]
  ["FieldMappings"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"]]
  ["ChangeDetectingColumns"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.ChangeDetectingColumns"]]],
 "AWS::AppStream::Fleet.VpcConfig"
 [:map
  {:closed :true}
  ["SubnetIds" {:optional true} [:ref "StringList"]]
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]],
 "AWS::CodeCommit::Repository.RepositoryTrigger"
 [:map
  {:closed :true}
  ["Events" {:optional true} [:ref "StringList"]]
  ["Branches" {:optional true} [:ref "StringList"]]
  ["CustomData" {:optional true} [:ref "String"]]
  ["DestinationArn" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.SmpteTtDestinationSettings"
 [:map {:closed :true}],
 "Alexa::ASK::Skill.AuthenticationConfiguration"
 [:map
  {:closed :true}
  ["RefreshToken" {:optional true} [:ref "String"]]
  ["ClientSecret" {:optional true} [:ref "String"]]
  ["ClientId" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::DeviceDefinition.DeviceDefinitionVersion"
 [:map
  {:closed :true}
  ["Devices"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Greengrass::DeviceDefinition.Device"]]
    "Fn::If"]]],
 "AWS::MediaLive::Channel.H265ColorSpaceSettings"
 [:map
  {:closed :true}
  ["Rec601Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Rec601Settings"]]
  ["Rec709Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Rec709Settings"]]
  ["ColorSpacePassthroughSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.ColorSpacePassthroughSettings"]]
  ["Hdr10Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Hdr10Settings"]]],
 "AWS::ElasticLoadBalancing::LoadBalancer.Policies"
 [:map
  {:closed :true}
  ["Attributes" {:optional true} [:ref "JsonList"]]
  ["InstancePorts" {:optional true} [:ref "StringList"]]
  ["LoadBalancerPorts" {:optional true} [:ref "StringList"]]
  ["PolicyName" {:optional true} [:ref "String"]]
  ["PolicyType" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.AudioCodecSettings"
 [:map
  {:closed :true}
  ["Eac3Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Eac3Settings"]]
  ["Ac3Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Ac3Settings"]]
  ["Mp2Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Mp2Settings"]]
  ["PassThroughSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.PassThroughSettings"]]
  ["AacSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AacSettings"]]],
 "AWS::RDS::DBInstance.ProcessorFeature"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::LakeFormation::Permissions.DataLocationResource"
 [:map
  {:closed :true}
  ["S3Resource" {:optional true} [:ref "String"]]],
 "AWS::DirectoryService::SimpleAD"
 [:map
  ["Type" [:= "AWS::DirectoryService::SimpleAD"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CreateAlias" {:optional true} [:ref "Boolean"]]
    ["Description" {:optional true} [:ref "String"]]
    ["EnableSso" {:optional true} [:ref "Boolean"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Password" {:optional true} [:ref "String"]]
    ["ShortName" {:optional true} [:ref "String"]]
    ["Size" {:optional true} [:ref "String"]]
    ["VpcSettings"
     {:optional true}
     [:ref "AWS::DirectoryService::SimpleAD.VpcSettings"]]]]],
 "AWS::Glue::Partition.Column"
 [:map
  {:closed :true}
  ["Comment" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::IAM::Group"
 [:map
  ["Type" [:= "AWS::IAM::Group"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GroupName" {:optional true} [:ref "String"]]
    ["ManagedPolicyArns" {:optional true} [:ref "StringList"]]
    ["Path" {:optional true} [:ref "String"]]
    ["Policies"
     {:optional true}
     [:or [:sequential [:ref "AWS::IAM::Group.Policy"]] "Fn::If"]]]]],
 "AWS::EC2::EC2Fleet.TargetCapacitySpecificationRequest"
 [:map
  {:closed :true}
  ["DefaultTargetCapacityType" {:optional true} [:ref "String"]]
  ["TotalTargetCapacity" {:optional true} [:ref "Integer"]]
  ["OnDemandTargetCapacity" {:optional true} [:ref "Integer"]]
  ["SpotTargetCapacity" {:optional true} [:ref "Integer"]]],
 "AWS::CodeBuild::Project.VpcConfig"
 [:map
  {:closed :true}
  ["Subnets" {:optional true} [:ref "StringList"]]
  ["VpcId" {:optional true} [:ref "String"]]
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]],
 "AWS::AppMesh::VirtualNode.ListenerTlsAcmCertificate"
 [:map
  {:closed :true}
  ["CertificateArn" {:optional true} [:ref "String"]]],
 "AWS::Lambda::Alias.AliasRoutingConfiguration"
 [:map
  {:closed :true}
  ["AdditionalVersionWeights"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Lambda::Alias.VersionWeight"]]
    "Fn::If"]]],
 "AWS::EC2::NetworkAclEntry.Icmp"
 [:map
  {:closed :true}
  ["Code" {:optional true} [:ref "Integer"]]
  ["Type" {:optional true} [:ref "Integer"]]],
 "AWS::ManagedBlockchain::Member.VotingPolicy"
 [:map
  {:closed :true}
  ["ApprovalThresholdPolicy"
   {:optional true}
   [:ref "AWS::ManagedBlockchain::Member.ApprovalThresholdPolicy"]]],
 "AWS::ManagedBlockchain::Node.NodeConfiguration"
 [:map
  {:closed :true}
  ["AvailabilityZone" {:optional true} [:ref "String"]]
  ["InstanceType" {:optional true} [:ref "String"]]],
 "AWS::Glue::Partition.SerdeInfo"
 [:map
  {:closed :true}
  ["Parameters" {:optional true} [:ref "Json"]]
  ["SerializationLibrary" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::EC2::SpotFleet"
 [:map
  ["Type" [:= "AWS::EC2::SpotFleet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SpotFleetRequestConfigData"
     {:optional true}
     [:ref "AWS::EC2::SpotFleet.SpotFleetRequestConfigData"]]]]],
 "AWS::CloudFront::Distribution.ForwardedValues"
 [:map
  {:closed :true}
  ["Cookies"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.Cookies"]]
  ["Headers" {:optional true} [:ref "StringList"]]
  ["QueryString" {:optional true} [:ref "Boolean"]]
  ["QueryStringCacheKeys" {:optional true} [:ref "StringList"]]],
 "AWS::AppMesh::VirtualNode.AwsCloudMapServiceDiscovery"
 [:map
  {:closed :true}
  ["NamespaceName" {:optional true} [:ref "String"]]
  ["ServiceName" {:optional true} [:ref "String"]]
  ["Attributes"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::AppMesh::VirtualNode.AwsCloudMapInstanceAttribute"]]
    "Fn::If"]]],
 "AWS::WAFv2::WebACL.StatementOne"
 [:map
  {:closed :true}
  ["NotStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.NotStatementOne"]]
  ["SqliMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.SqliMatchStatement"]]
  ["OrStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.OrStatementOne"]]
  ["SizeConstraintStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.SizeConstraintStatement"]]
  ["XssMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.XssMatchStatement"]]
  ["IPSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.IPSetReferenceStatement"]]
  ["RuleGroupReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.RuleGroupReferenceStatement"]]
  ["RegexPatternSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.RegexPatternSetReferenceStatement"]]
  ["AndStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.AndStatementOne"]]
  ["ByteMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.ByteMatchStatement"]]
  ["RateBasedStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.RateBasedStatementOne"]]
  ["GeoMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.GeoMatchStatement"]]
  ["ManagedRuleGroupStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.ManagedRuleGroupStatement"]]],
 "AWS::CodeDeploy::DeploymentGroup.RevisionLocation"
 [:map
  {:closed :true}
  ["GitHubLocation"
   {:optional true}
   [:ref "AWS::CodeDeploy::DeploymentGroup.GitHubLocation"]]
  ["RevisionType" {:optional true} [:ref "String"]]
  ["S3Location"
   {:optional true}
   [:ref "AWS::CodeDeploy::DeploymentGroup.S3Location"]]],
 "AWS::CodeBuild::Project.S3LogsConfig"
 [:map
  {:closed :true}
  ["Status" {:optional true} [:ref "String"]]
  ["EncryptionDisabled" {:optional true} [:ref "Boolean"]]
  ["Location" {:optional true} [:ref "String"]]],
 "AWS::OpsWorks::App.DataSource"
 [:map
  {:closed :true}
  ["Arn" {:optional true} [:ref "String"]]
  ["DatabaseName" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::CloudWatch::InsightRule.Tags" [:map {:closed :true}],
 "AWS::Cognito::UserPoolIdentityProvider"
 [:map
  ["Type" [:= "AWS::Cognito::UserPoolIdentityProvider"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ProviderName" {:optional true} [:ref "String"]]
    ["UserPoolId" {:optional true} [:ref "String"]]
    ["AttributeMapping" {:optional true} [:ref "Json"]]
    ["ProviderDetails" {:optional true} [:ref "Json"]]
    ["ProviderType" {:optional true} [:ref "String"]]
    ["IdpIdentifiers" {:optional true} [:ref "StringList"]]]]],
 "AWS::Cognito::IdentityPool.CognitoIdentityProvider"
 [:map
  {:closed :true}
  ["ServerSideTokenCheck" {:optional true} [:ref "Boolean"]]
  ["ProviderName" {:optional true} [:ref "String"]]
  ["ClientId" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::Account"
 [:map
  ["Type" [:= "AWS::ApiGateway::Account"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CloudWatchRoleArn" {:optional true} [:ref "String"]]]]],
 "AWS::SageMaker::Endpoint"
 [:map
  ["Type" [:= "AWS::SageMaker::Endpoint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RetainAllVariantProperties" {:optional true} [:ref "Boolean"]]
    ["EndpointName" {:optional true} [:ref "String"]]
    ["ExcludeRetainedVariantProperties"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::SageMaker::Endpoint.VariantProperty"]]
      "Fn::If"]]
    ["EndpointConfigName" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::DataPipeline::Pipeline.PipelineObject"
 [:map
  {:closed :true}
  ["Fields"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::DataPipeline::Pipeline.Field"]]
    "Fn::If"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::LoggerDefinitionVersion"
 [:map
  ["Type" [:= "AWS::Greengrass::LoggerDefinitionVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LoggerDefinitionId" {:optional true} [:ref "String"]]
    ["Loggers"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Greengrass::LoggerDefinitionVersion.Logger"]]
      "Fn::If"]]]]],
 "AWS::Glue::Crawler.JdbcTarget"
 [:map
  {:closed :true}
  ["ConnectionName" {:optional true} [:ref "String"]]
  ["Path" {:optional true} [:ref "String"]]
  ["Exclusions" {:optional true} [:ref "StringList"]]],
 "AWS::KinesisFirehose::DeliveryStream.HttpEndpointConfiguration"
 [:map
  {:closed :true}
  ["Url" {:optional true} [:ref "String"]]
  ["AccessKey" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.TransitionEvent"
 [:map
  {:closed :true}
  ["Condition" {:optional true} [:ref "String"]]
  ["Actions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoTEvents::DetectorModel.Action"]]
    "Fn::If"]]
  ["NextState" {:optional true} [:ref "String"]]
  ["EventName" {:optional true} [:ref "String"]]],
 "AWS::RoboMaker::RobotApplication"
 [:map
  ["Type" [:= "AWS::RoboMaker::RobotApplication"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CurrentRevisionId" {:optional true} [:ref "String"]]
    ["RobotSoftwareSuite"
     {:optional true}
     [:ref "AWS::RoboMaker::RobotApplication.RobotSoftwareSuite"]]
    ["Sources"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::RoboMaker::RobotApplication.SourceConfig"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Kinesis::Stream.StreamEncryption"
 [:map
  {:closed :true}
  ["EncryptionType" {:optional true} [:ref "String"]]
  ["KeyId" {:optional true} [:ref "String"]]],
 "AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSetListObject"
 [:map
  {:closed :true}
  ["OnPremisesTagGroup"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CodeDeploy::DeploymentGroup.TagFilter"]]
    "Fn::If"]]],
 "AWS::Cognito::UserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationType"
 [:map
  {:closed :true}
  ["Actions"
   {:optional true}
   [:ref
    "AWS::Cognito::UserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsType"]]
  ["EventFilter" {:optional true} [:ref "StringList"]]],
 "AWS::AppSync::DataSource.AuthorizationConfig"
 [:map
  {:closed :true}
  ["AwsIamConfig"
   {:optional true}
   [:ref "AWS::AppSync::DataSource.AwsIamConfig"]]
  ["AuthorizationType" {:optional true} [:ref "String"]]],
 "AWS::EMR::InstanceFleetConfig.InstanceTypeConfig"
 [:map
  {:closed :true}
  ["BidPrice" {:optional true} [:ref "String"]]
  ["BidPriceAsPercentageOfOnDemandPrice"
   {:optional true}
   [:ref "Double"]]
  ["Configurations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::InstanceFleetConfig.Configuration"]]
    "Fn::If"]]
  ["EbsConfiguration"
   {:optional true}
   [:ref "AWS::EMR::InstanceFleetConfig.EbsConfiguration"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["WeightedCapacity" {:optional true} [:ref "Integer"]]],
 "AWS::SageMaker::MonitoringSchedule.MonitoringResources"
 [:map
  {:closed :true}
  ["ClusterConfig"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.ClusterConfig"]]],
 "AWS::ElasticLoadBalancingV2::ListenerCertificate.Certificate"
 [:map
  {:closed :true}
  ["CertificateArn" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPoolRiskConfigurationAttachment.CompromisedCredentialsActionsType"
 [:map
  {:closed :true}
  ["EventAction" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.OnExit"
 [:map
  {:closed :true}
  ["Events"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoTEvents::DetectorModel.Event"]]
    "Fn::If"]]],
 "AWS::Lambda::Permission"
 [:map
  ["Type" [:= "AWS::Lambda::Permission"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Action" {:optional true} [:ref "String"]]
    ["EventSourceToken" {:optional true} [:ref "String"]]
    ["FunctionName" {:optional true} [:ref "String"]]
    ["Principal" {:optional true} [:ref "String"]]
    ["SourceAccount" {:optional true} [:ref "String"]]
    ["SourceArn" {:optional true} [:ref "String"]]]]],
 "AWS::ImageBuilder::ImagePipeline.ImageTestsConfiguration"
 [:map
  {:closed :true}
  ["ImageTestsEnabled" {:optional true} [:ref "Boolean"]]
  ["TimeoutMinutes" {:optional true} [:ref "Integer"]]],
 "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::CloudFormationProvisionedProduct"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ProvisioningArtifactId" {:optional true} [:ref "String"]]
    ["ProvisionedProductName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["PathId" {:optional true} [:ref "String"]]
    ["PathName" {:optional true} [:ref "String"]]
    ["ProductId" {:optional true} [:ref "String"]]
    ["NotificationArns" {:optional true} [:ref "StringList"]]
    ["ProvisioningParameters"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ServiceCatalog::CloudFormationProvisionedProduct.ProvisioningParameter"]]
      "Fn::If"]]
    ["ProvisioningPreferences"
     {:optional true}
     [:ref
      "AWS::ServiceCatalog::CloudFormationProvisionedProduct.ProvisioningPreferences"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["ProvisioningArtifactName" {:optional true} [:ref "String"]]
    ["ProductName" {:optional true} [:ref "String"]]]]],
 "AWS::Pinpoint::Campaign.Limits"
 [:map
  {:closed :true}
  ["Daily" {:optional true} [:ref "Integer"]]
  ["MaximumDuration" {:optional true} [:ref "Integer"]]
  ["Total" {:optional true} [:ref "Integer"]]
  ["MessagesPerSecond" {:optional true} [:ref "Integer"]]],
 "AWS::Pinpoint::ApplicationSettings"
 [:map
  ["Type" [:= "AWS::Pinpoint::ApplicationSettings"]]
  ["Properties"
   [:map
    {:closed :true}
    ["QuietTime"
     {:optional true}
     [:ref "AWS::Pinpoint::ApplicationSettings.QuietTime"]]
    ["Limits"
     {:optional true}
     [:ref "AWS::Pinpoint::ApplicationSettings.Limits"]]
    ["ApplicationId" {:optional true} [:ref "String"]]
    ["CampaignHook"
     {:optional true}
     [:ref "AWS::Pinpoint::ApplicationSettings.CampaignHook"]]
    ["CloudWatchMetricsEnabled" {:optional true} [:ref "Boolean"]]]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayTlsValidationContextFileTrust"
 [:map
  {:closed :true}
  ["CertificateChain" {:optional true} [:ref "String"]]],
 "AWS::EC2::TrafficMirrorTarget"
 [:map
  ["Type" [:= "AWS::EC2::TrafficMirrorTarget"]]
  ["Properties"
   [:map
    {:closed :true}
    ["NetworkLoadBalancerArn" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["NetworkInterfaceId" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::AutoScaling::ScalingPolicy.TargetTrackingConfiguration"
 [:map
  {:closed :true}
  ["CustomizedMetricSpecification"
   {:optional true}
   [:ref
    "AWS::AutoScaling::ScalingPolicy.CustomizedMetricSpecification"]]
  ["DisableScaleIn" {:optional true} [:ref "Boolean"]]
  ["PredefinedMetricSpecification"
   {:optional true}
   [:ref
    "AWS::AutoScaling::ScalingPolicy.PredefinedMetricSpecification"]]
  ["TargetValue" {:optional true} [:ref "Double"]]],
 "AWS::AppMesh::Route"
 [:map
  ["Type" [:= "AWS::AppMesh::Route"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MeshName" {:optional true} [:ref "String"]]
    ["VirtualRouterName" {:optional true} [:ref "String"]]
    ["MeshOwner" {:optional true} [:ref "String"]]
    ["RouteName" {:optional true} [:ref "String"]]
    ["Spec" {:optional true} [:ref "AWS::AppMesh::Route.RouteSpec"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EC2::EC2Fleet.OnDemandOptionsRequest"
 [:map
  {:closed :true}
  ["SingleAvailabilityZone" {:optional true} [:ref "Boolean"]]
  ["AllocationStrategy" {:optional true} [:ref "String"]]
  ["SingleInstanceType" {:optional true} [:ref "Boolean"]]
  ["MinTargetCapacity" {:optional true} [:ref "Integer"]]
  ["MaxTotalPrice" {:optional true} [:ref "String"]]
  ["CapacityReservationOptions"
   {:optional true}
   [:ref "AWS::EC2::EC2Fleet.CapacityReservationOptionsRequest"]]],
 "AWS::MediaLive::Channel.OutputGroup"
 [:map
  {:closed :true}
  ["Outputs"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaLive::Channel.Output"]]
    "Fn::If"]]
  ["OutputGroupSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.OutputGroupSettings"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::EC2::Instance.LicenseSpecification"
 [:map
  {:closed :true}
  ["LicenseConfigurationArn" {:optional true} [:ref "String"]]],
 "AWS::CloudTrail::Trail.DataResource"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::EMR::Cluster.JobFlowInstancesConfig"
 [:map
  {:closed :true}
  ["Ec2SubnetId" {:optional true} [:ref "String"]]
  ["CoreInstanceFleet"
   {:optional true}
   [:ref "AWS::EMR::Cluster.InstanceFleetConfig"]]
  ["AdditionalMasterSecurityGroups"
   {:optional true}
   [:ref "StringList"]]
  ["Ec2SubnetIds" {:optional true} [:ref "StringList"]]
  ["TerminationProtected" {:optional true} [:ref "Boolean"]]
  ["AdditionalSlaveSecurityGroups"
   {:optional true}
   [:ref "StringList"]]
  ["Placement"
   {:optional true}
   [:ref "AWS::EMR::Cluster.PlacementType"]]
  ["CoreInstanceGroup"
   {:optional true}
   [:ref "AWS::EMR::Cluster.InstanceGroupConfig"]]
  ["Ec2KeyName" {:optional true} [:ref "String"]]
  ["HadoopVersion" {:optional true} [:ref "String"]]
  ["EmrManagedSlaveSecurityGroup" {:optional true} [:ref "String"]]
  ["EmrManagedMasterSecurityGroup" {:optional true} [:ref "String"]]
  ["MasterInstanceGroup"
   {:optional true}
   [:ref "AWS::EMR::Cluster.InstanceGroupConfig"]]
  ["MasterInstanceFleet"
   {:optional true}
   [:ref "AWS::EMR::Cluster.InstanceFleetConfig"]]
  ["KeepJobFlowAliveWhenNoSteps" {:optional true} [:ref "Boolean"]]
  ["ServiceAccessSecurityGroup" {:optional true} [:ref "String"]]],
 "AWS::EC2::LaunchTemplate.HibernationOptions"
 [:map
  {:closed :true}
  ["Configured" {:optional true} [:ref "Boolean"]]],
 "AWS::MediaLive::Channel.VideoDescription"
 [:map
  {:closed :true}
  ["ScalingBehavior" {:optional true} [:ref "String"]]
  ["RespondToAfd" {:optional true} [:ref "String"]]
  ["Height" {:optional true} [:ref "Integer"]]
  ["Sharpness" {:optional true} [:ref "Integer"]]
  ["Width" {:optional true} [:ref "Integer"]]
  ["CodecSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.VideoCodecSettings"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::EC2::VPCEndpointService"
 [:map
  ["Type" [:= "AWS::EC2::VPCEndpointService"]]
  ["Properties"
   [:map
    {:closed :true}
    ["NetworkLoadBalancerArns" {:optional true} [:ref "StringList"]]
    ["AcceptanceRequired" {:optional true} [:ref "Boolean"]]]]],
 "AWS::Kendra::Index"
 [:map
  ["Type" [:= "AWS::Kendra::Index"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["ServerSideEncryptionConfiguration"
     {:optional true}
     [:ref "AWS::Kendra::Index.ServerSideEncryptionConfiguration"]]
    ["Tags" {:optional true} [:ref "AWS::Kendra::Index.TagList"]]
    ["Name" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["Edition" {:optional true} [:ref "String"]]
    ["DocumentMetadataConfigurations"
     {:optional true}
     [:ref "AWS::Kendra::Index.DocumentMetadataConfigurationList"]]
    ["CapacityUnits"
     {:optional true}
     [:ref "AWS::Kendra::Index.CapacityUnitsConfiguration"]]]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.RuleCondition"
 [:map
  {:closed :true}
  ["Field" {:optional true} [:ref "String"]]
  ["HostHeaderConfig"
   {:optional true}
   [:ref "AWS::ElasticLoadBalancingV2::ListenerRule.HostHeaderConfig"]]
  ["HttpHeaderConfig"
   {:optional true}
   [:ref "AWS::ElasticLoadBalancingV2::ListenerRule.HttpHeaderConfig"]]
  ["HttpRequestMethodConfig"
   {:optional true}
   [:ref
    "AWS::ElasticLoadBalancingV2::ListenerRule.HttpRequestMethodConfig"]]
  ["PathPatternConfig"
   {:optional true}
   [:ref
    "AWS::ElasticLoadBalancingV2::ListenerRule.PathPatternConfig"]]
  ["QueryStringConfig"
   {:optional true}
   [:ref
    "AWS::ElasticLoadBalancingV2::ListenerRule.QueryStringConfig"]]
  ["SourceIpConfig"
   {:optional true}
   [:ref "AWS::ElasticLoadBalancingV2::ListenerRule.SourceIpConfig"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::ApiGatewayV2::Api.Cors"
 [:map
  {:closed :true}
  ["AllowOrigins" {:optional true} [:ref "StringList"]]
  ["AllowCredentials" {:optional true} [:ref "Boolean"]]
  ["ExposeHeaders" {:optional true} [:ref "StringList"]]
  ["AllowHeaders" {:optional true} [:ref "StringList"]]
  ["MaxAge" {:optional true} [:ref "Integer"]]
  ["AllowMethods" {:optional true} [:ref "StringList"]]],
 "AWS::Elasticsearch::Domain.DomainEndpointOptions"
 [:map
  {:closed :true}
  ["EnforceHTTPS" {:optional true} [:ref "Boolean"]]
  ["TLSSecurityPolicy" {:optional true} [:ref "String"]]],
 "AWS::DynamoDB::Table.LocalSecondaryIndex"
 [:map
  {:closed :true}
  ["IndexName" {:optional true} [:ref "String"]]
  ["KeySchema"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::DynamoDB::Table.KeySchema"]]
    "Fn::If"]]
  ["Projection"
   {:optional true}
   [:ref "AWS::DynamoDB::Table.Projection"]]],
 "AWS::ApiGatewayV2::ApiMapping"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::ApiMapping"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DomainName" {:optional true} [:ref "String"]]
    ["Stage" {:optional true} [:ref "String"]]
    ["ApiMappingKey" {:optional true} [:ref "String"]]
    ["ApiId" {:optional true} [:ref "String"]]]]],
 "AWS::Glue::Job.ConnectionsList"
 [:map
  {:closed :true}
  ["Connections" {:optional true} [:ref "StringList"]]],
 "AWS::IAM::InstanceProfile"
 [:map
  ["Type" [:= "AWS::IAM::InstanceProfile"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InstanceProfileName" {:optional true} [:ref "String"]]
    ["Path" {:optional true} [:ref "String"]]
    ["Roles" {:optional true} [:ref "StringList"]]]]],
 "AWS::Glue::Crawler.SchemaChangePolicy"
 [:map
  {:closed :true}
  ["UpdateBehavior" {:optional true} [:ref "String"]]
  ["DeleteBehavior" {:optional true} [:ref "String"]]],
 "AWS::CodeBuild::Project.RegistryCredential"
 [:map
  {:closed :true}
  ["Credential" {:optional true} [:ref "String"]]
  ["CredentialProvider" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.ListenerTlsFileCertificate"
 [:map
  {:closed :true}
  ["PrivateKey" {:optional true} [:ref "String"]]
  ["CertificateChain" {:optional true} [:ref "String"]]],
 "AWS::CodeBuild::Project.EnvironmentVariable"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::PinpointEmail::ConfigurationSet.ReputationOptions"
 [:map
  {:closed :true}
  ["ReputationMetricsEnabled" {:optional true} [:ref "Boolean"]]],
 "AWS::Cognito::UserPool.RecoveryOption"
 [:map
  {:closed :true}
  ["Priority" {:optional true} [:ref "Integer"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::GameLift::GameServerGroup.AutoScalingPolicy"
 [:map
  {:closed :true}
  ["EstimatedInstanceWarmup" {:optional true} [:ref "Double"]]
  ["TargetTrackingConfiguration"
   {:optional true}
   [:ref
    "AWS::GameLift::GameServerGroup.TargetTrackingConfiguration"]]],
 "AWS::SQS::QueuePolicy"
 [:map
  ["Type" [:= "AWS::SQS::QueuePolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PolicyDocument" {:optional true} [:ref "Json"]]
    ["Queues" {:optional true} [:ref "StringList"]]]]],
 "AWS::WAFv2::RuleGroup.ByteMatchStatement"
 [:map
  {:closed :true}
  ["SearchString" {:optional true} [:ref "String"]]
  ["SearchStringBase64" {:optional true} [:ref "String"]]
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.FieldToMatch"]]
  ["TextTransformations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::RuleGroup.TextTransformation"]]
    "Fn::If"]]
  ["PositionalConstraint" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.DocumentsMetadataConfiguration"
 [:map {:closed :true} ["S3Prefix" {:optional true} [:ref "String"]]],
 "AWS::ImageBuilder::ImageRecipe.EbsInstanceBlockDeviceSpecification"
 [:map
  {:closed :true}
  ["Encrypted" {:optional true} [:ref "Boolean"]]
  ["DeleteOnTermination" {:optional true} [:ref "Boolean"]]
  ["Iops" {:optional true} [:ref "Integer"]]
  ["KmsKeyId" {:optional true} [:ref "String"]]
  ["SnapshotId" {:optional true} [:ref "String"]]
  ["VolumeSize" {:optional true} [:ref "Integer"]]
  ["VolumeType" {:optional true} [:ref "String"]]],
 "AWS::ApplicationAutoScaling::ScalingPolicy.StepAdjustment"
 [:map
  {:closed :true}
  ["MetricIntervalLowerBound" {:optional true} [:ref "Double"]]
  ["MetricIntervalUpperBound" {:optional true} [:ref "Double"]]
  ["ScalingAdjustment" {:optional true} [:ref "Integer"]]],
 "AWS::SSM::Association"
 [:map
  ["Type" [:= "AWS::SSM::Association"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AssociationName" {:optional true} [:ref "String"]]
    ["MaxErrors" {:optional true} [:ref "String"]]
    ["MaxConcurrency" {:optional true} [:ref "String"]]
    ["InstanceId" {:optional true} [:ref "String"]]
    ["Parameters"
     {:optional true}
     [:map-of [:ref "String"] [:ref "ParameterValues"]]]
    ["Targets"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::SSM::Association.Target"]]
      "Fn::If"]]
    ["ApplyOnlyAtCronInterval" {:optional true} [:ref "Boolean"]]
    ["OutputLocation"
     {:optional true}
     [:ref "AWS::SSM::Association.InstanceAssociationOutputLocation"]]
    ["WaitForSuccessTimeoutSeconds" {:optional true} [:ref "Integer"]]
    ["ComplianceSeverity" {:optional true} [:ref "String"]]
    ["DocumentVersion" {:optional true} [:ref "String"]]
    ["SyncCompliance" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["ScheduleExpression" {:optional true} [:ref "String"]]
    ["AutomationTargetParameterName"
     {:optional true}
     [:ref "String"]]]]],
 "AWS::AppStream::DirectoryConfig.ServiceAccountCredentials"
 [:map
  {:closed :true}
  ["AccountName" {:optional true} [:ref "String"]]
  ["AccountPassword" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::Endpoint.VariantProperty"
 [:map
  {:closed :true}
  ["VariantPropertyType" {:optional true} [:ref "String"]]],
 "AWS::AmazonMQ::Configuration"
 [:map
  ["Type" [:= "AWS::AmazonMQ::Configuration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EngineVersion" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["EngineType" {:optional true} [:ref "String"]]
    ["Data" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::AmazonMQ::Configuration.TagsEntry"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::IoTAnalytics::Pipeline.DeviceShadowEnrich"
 [:map
  {:closed :true}
  ["Attribute" {:optional true} [:ref "String"]]
  ["Next" {:optional true} [:ref "String"]]
  ["ThingName" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Glue::Trigger.Predicate"
 [:map
  {:closed :true}
  ["Logical" {:optional true} [:ref "String"]]
  ["Conditions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Glue::Trigger.Condition"]]
    "Fn::If"]]],
 "AWS::ApiGateway::DomainName.EndpointConfiguration"
 [:map {:closed :true} ["Types" {:optional true} [:ref "StringList"]]],
 "AWS::GlobalAccelerator::Listener.PortRange"
 [:map
  {:closed :true}
  ["FromPort" {:optional true} [:ref "Integer"]]
  ["ToPort" {:optional true} [:ref "Integer"]]],
 "AWS::Pinpoint::Segment.SegmentDimensions"
 [:map
  {:closed :true}
  ["Demographic"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.Demographic"]]
  ["Metrics" {:optional true} [:ref "Json"]]
  ["Attributes" {:optional true} [:ref "Json"]]
  ["Behavior"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.Behavior"]]
  ["UserAttributes" {:optional true} [:ref "Json"]]
  ["Location"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.Location"]]],
 "AWS::Cognito::UserPoolDomain"
 [:map
  ["Type" [:= "AWS::Cognito::UserPoolDomain"]]
  ["Properties"
   [:map
    {:closed :true}
    ["UserPoolId" {:optional true} [:ref "String"]]
    ["CustomDomainConfig"
     {:optional true}
     [:ref "AWS::Cognito::UserPoolDomain.CustomDomainConfigType"]]
    ["Domain" {:optional true} [:ref "String"]]]]],
 "AWS::Greengrass::ResourceDefinition.SecretsManagerSecretResourceData"
 [:map
  {:closed :true}
  ["ARN" {:optional true} [:ref "String"]]
  ["AdditionalStagingLabelsToDownload"
   {:optional true}
   [:ref "StringList"]]],
 "AWS::AppMesh::Route.MatchRange"
 [:map
  {:closed :true}
  ["Start" {:optional true} [:ref "Integer"]]
  ["End" {:optional true} [:ref "Integer"]]],
 "AWS::Pinpoint::APNSVoipSandboxChannel"
 [:map
  ["Type" [:= "AWS::Pinpoint::APNSVoipSandboxChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TeamId" {:optional true} [:ref "String"]]
    ["Certificate" {:optional true} [:ref "String"]]
    ["BundleId" {:optional true} [:ref "String"]]
    ["PrivateKey" {:optional true} [:ref "String"]]
    ["TokenKeyId" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ApplicationId" {:optional true} [:ref "String"]]
    ["DefaultAuthenticationMethod" {:optional true} [:ref "String"]]
    ["TokenKey" {:optional true} [:ref "String"]]]]],
 "AWS::IoTAnalytics::Channel.CustomerManagedS3"
 [:map
  {:closed :true}
  ["Bucket" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["KeyPrefix" {:optional true} [:ref "String"]]],
 "AWS::EC2::NetworkAclEntry"
 [:map
  ["Type" [:= "AWS::EC2::NetworkAclEntry"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Egress" {:optional true} [:ref "Boolean"]]
    ["RuleNumber" {:optional true} [:ref "Integer"]]
    ["RuleAction" {:optional true} [:ref "String"]]
    ["CidrBlock" {:optional true} [:ref "String"]]
    ["Ipv6CidrBlock" {:optional true} [:ref "String"]]
    ["Icmp" {:optional true} [:ref "AWS::EC2::NetworkAclEntry.Icmp"]]
    ["Protocol" {:optional true} [:ref "Integer"]]
    ["PortRange"
     {:optional true}
     [:ref "AWS::EC2::NetworkAclEntry.PortRange"]]
    ["NetworkAclId" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.CaptionLanguageMapping"
 [:map
  {:closed :true}
  ["LanguageCode" {:optional true} [:ref "String"]]
  ["LanguageDescription" {:optional true} [:ref "String"]]
  ["CaptionChannel" {:optional true} [:ref "Integer"]]],
 "AWS::Pinpoint::Segment.GPSPoint"
 [:map
  {:closed :true}
  ["RangeInKilometers" {:optional true} [:ref "Double"]]
  ["Coordinates"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.Coordinates"]]],
 "AWS::SSM::ResourceDataSync"
 [:map
  ["Type" [:= "AWS::SSM::ResourceDataSync"]]
  ["Properties"
   [:map
    {:closed :true}
    ["BucketPrefix" {:optional true} [:ref "String"]]
    ["KMSKeyArn" {:optional true} [:ref "String"]]
    ["SyncFormat" {:optional true} [:ref "String"]]
    ["SyncName" {:optional true} [:ref "String"]]
    ["BucketRegion" {:optional true} [:ref "String"]]
    ["SyncSource"
     {:optional true}
     [:ref "AWS::SSM::ResourceDataSync.SyncSource"]]
    ["SyncType" {:optional true} [:ref "String"]]
    ["BucketName" {:optional true} [:ref "String"]]
    ["S3Destination"
     {:optional true}
     [:ref "AWS::SSM::ResourceDataSync.S3Destination"]]]]],
 "AWS::Cognito::UserPool.UserPoolAddOns"
 [:map
  {:closed :true}
  ["AdvancedSecurityMode" {:optional true} [:ref "String"]]],
 "AWS::GameLift::Fleet.ResourceCreationLimitPolicy"
 [:map
  {:closed :true}
  ["NewGameSessionsPerCreator" {:optional true} [:ref "Integer"]]
  ["PolicyPeriodInMinutes" {:optional true} [:ref "Integer"]]],
 "AWS::ApplicationAutoScaling::ScalableTarget.ScheduledAction"
 [:map
  {:closed :true}
  ["EndTime" {:optional true} [:ref "Timestamp"]]
  ["ScalableTargetAction"
   {:optional true}
   [:ref
    "AWS::ApplicationAutoScaling::ScalableTarget.ScalableTargetAction"]]
  ["Schedule" {:optional true} [:ref "String"]]
  ["ScheduledActionName" {:optional true} [:ref "String"]]
  ["StartTime" {:optional true} [:ref "Timestamp"]]],
 "AWS::Kendra::DataSource.SharePointConfiguration"
 [:map
  {:closed :true}
  ["ExclusionPatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["VpcConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.DataSourceVpcConfiguration"]]
  ["CrawlAttachments" {:optional true} [:ref "Boolean"]]
  ["SharePointVersion" {:optional true} [:ref "String"]]
  ["FieldMappings"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"]]
  ["UseChangeLog" {:optional true} [:ref "Boolean"]]
  ["DocumentTitleFieldName" {:optional true} [:ref "String"]]
  ["InclusionPatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["SecretArn" {:optional true} [:ref "String"]]
  ["Urls" {:optional true} [:ref "StringList"]]],
 "AWS::ApiGateway::UsagePlan.ThrottleSettings"
 [:map
  {:closed :true}
  ["BurstLimit" {:optional true} [:ref "Integer"]]
  ["RateLimit" {:optional true} [:ref "Double"]]],
 "AWS::EC2::SpotFleet.LaunchTemplateOverrides"
 [:map
  {:closed :true}
  ["AvailabilityZone" {:optional true} [:ref "String"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["SpotPrice" {:optional true} [:ref "String"]]
  ["SubnetId" {:optional true} [:ref "String"]]
  ["WeightedCapacity" {:optional true} [:ref "Double"]]],
 "AWS::PinpointEmail::ConfigurationSetEventDestination"
 [:map
  ["Type" [:= "AWS::PinpointEmail::ConfigurationSetEventDestination"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EventDestinationName" {:optional true} [:ref "String"]]
    ["ConfigurationSetName" {:optional true} [:ref "String"]]
    ["EventDestination"
     {:optional true}
     [:ref
      "AWS::PinpointEmail::ConfigurationSetEventDestination.EventDestination"]]]]],
 "AWS::Glue::Database.DatabaseInput"
 [:map
  {:closed :true}
  ["LocationUri" {:optional true} [:ref "String"]]
  ["Description" {:optional true} [:ref "String"]]
  ["Parameters" {:optional true} [:ref "Json"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancing::LoadBalancer.ConnectionSettings"
 [:map
  {:closed :true}
  ["IdleTimeout" {:optional true} [:ref "Integer"]]],
 "AWS::WAFv2::WebACL.NotStatementTwo"
 [:map
  {:closed :true}
  ["Statement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.StatementThree"]]],
 "AWS::Greengrass::GroupVersion"
 [:map
  ["Type" [:= "AWS::Greengrass::GroupVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LoggerDefinitionVersionArn" {:optional true} [:ref "String"]]
    ["DeviceDefinitionVersionArn" {:optional true} [:ref "String"]]
    ["FunctionDefinitionVersionArn" {:optional true} [:ref "String"]]
    ["CoreDefinitionVersionArn" {:optional true} [:ref "String"]]
    ["ResourceDefinitionVersionArn" {:optional true} [:ref "String"]]
    ["ConnectorDefinitionVersionArn" {:optional true} [:ref "String"]]
    ["SubscriptionDefinitionVersionArn"
     {:optional true}
     [:ref "String"]]
    ["GroupId" {:optional true} [:ref "String"]]]]],
 "AWS::S3::Bucket.EncryptionConfiguration"
 [:map
  {:closed :true}
  ["ReplicaKmsKeyID" {:optional true} [:ref "String"]]],
 "AWS::AmazonMQ::Broker.ConfigurationId"
 [:map
  {:closed :true}
  ["Revision" {:optional true} [:ref "Integer"]]
  ["Id" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.NotStatementTwo"
 [:map
  {:closed :true}
  ["Statement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.StatementThree"]]],
 "AWS::AutoScaling::ScheduledAction"
 [:map
  ["Type" [:= "AWS::AutoScaling::ScheduledAction"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AutoScalingGroupName" {:optional true} [:ref "String"]]
    ["DesiredCapacity" {:optional true} [:ref "Integer"]]
    ["EndTime" {:optional true} [:ref "String"]]
    ["MaxSize" {:optional true} [:ref "Integer"]]
    ["MinSize" {:optional true} [:ref "Integer"]]
    ["Recurrence" {:optional true} [:ref "String"]]
    ["StartTime" {:optional true} [:ref "String"]]]]],
 "AWS::Greengrass::LoggerDefinition.LoggerDefinitionVersion"
 [:map
  {:closed :true}
  ["Loggers"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Greengrass::LoggerDefinition.Logger"]]
    "Fn::If"]]],
 "AWS::IoT::TopicRule.HttpAuthorization"
 [:map
  {:closed :true}
  ["Sigv4"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.SigV4Authorization"]]],
 "AWS::IoTAnalytics::Dataset.QueryAction"
 [:map
  {:closed :true}
  ["Filters"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoTAnalytics::Dataset.Filter"]]
    "Fn::If"]]
  ["SqlQuery" {:optional true} [:ref "String"]]],
 "AWS::EC2::SpotFleet.SpotFleetMonitoring"
 [:map {:closed :true} ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::WAFv2::RuleGroup.FieldToMatch"
 [:map
  {:closed :true}
  ["SingleHeader" {:optional true} [:ref "Json"]]
  ["SingleQueryArgument" {:optional true} [:ref "Json"]]
  ["AllQueryArguments" {:optional true} [:ref "Json"]]
  ["UriPath" {:optional true} [:ref "Json"]]
  ["QueryString" {:optional true} [:ref "Json"]]
  ["Body" {:optional true} [:ref "Json"]]
  ["Method" {:optional true} [:ref "Json"]]],
 "AWS::MediaLive::Channel.UdpOutputSettings"
 [:map
  {:closed :true}
  ["Destination"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.OutputLocationRef"]]
  ["FecOutputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.FecOutputSettings"]]
  ["ContainerSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.UdpContainerSettings"]]
  ["BufferMsec" {:optional true} [:ref "Integer"]]],
 "AWS::ECS::PrimaryTaskSet"
 [:map
  ["Type" [:= "AWS::ECS::PrimaryTaskSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Cluster" {:optional true} [:ref "String"]]
    ["TaskSetId" {:optional true} [:ref "String"]]
    ["Service" {:optional true} [:ref "String"]]]]],
 "AWS::ServiceCatalog::CloudFormationProduct.ProvisioningArtifactProperties"
 [:map
  {:closed :true}
  ["Description" {:optional true} [:ref "String"]]
  ["DisableTemplateValidation" {:optional true} [:ref "Boolean"]]
  ["Info" {:optional true} [:ref "Json"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Batch::ComputeEnvironment"
 [:map
  ["Type" [:= "AWS::Batch::ComputeEnvironment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Type" {:optional true} [:ref "String"]]
    ["ServiceRole" {:optional true} [:ref "String"]]
    ["ComputeEnvironmentName" {:optional true} [:ref "String"]]
    ["ComputeResources"
     {:optional true}
     [:ref "AWS::Batch::ComputeEnvironment.ComputeResources"]]
    ["State" {:optional true} [:ref "String"]]]]],
 "AWS::IoTEvents::DetectorModel.IotEvents"
 [:map
  {:closed :true}
  ["InputName" {:optional true} [:ref "String"]]
  ["Payload"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.Payload"]]],
 "AWS::Elasticsearch::Domain.NodeToNodeEncryptionOptions"
 [:map {:closed :true} ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::DataPipeline::Pipeline.ParameterAttribute"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["StringValue" {:optional true} [:ref "String"]]],
 "AWS::AppSync::GraphQLApi.OpenIDConnectConfig"
 [:map
  {:closed :true}
  ["Issuer" {:optional true} [:ref "String"]]
  ["ClientId" {:optional true} [:ref "String"]]
  ["AuthTTL" {:optional true} [:ref "Double"]]
  ["IatTTL" {:optional true} [:ref "Double"]]],
 "AWS::EC2::ClientVpnEndpoint.DirectoryServiceAuthenticationRequest"
 [:map
  {:closed :true}
  ["DirectoryId" {:optional true} [:ref "String"]]],
 "AWS::Glue::DataCatalogEncryptionSettings.EncryptionAtRest"
 [:map
  {:closed :true}
  ["CatalogEncryptionMode" {:optional true} [:ref "String"]]
  ["SseAwsKmsKeyId" {:optional true} [:ref "String"]]],
 "AWS::EC2::Instance.AssociationParameter"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "StringList"]]],
 "AWS::KinesisAnalytics::ApplicationOutput.LambdaOutput"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]],
 "AWS::ManagedBlockchain::Member.NetworkFabricConfiguration"
 [:map {:closed :true} ["Edition" {:optional true} [:ref "String"]]],
 "AWS::Route53::RecordSet.AliasTarget"
 [:map
  {:closed :true}
  ["DNSName" {:optional true} [:ref "String"]]
  ["EvaluateTargetHealth" {:optional true} [:ref "Boolean"]]
  ["HostedZoneId" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.Rec601Settings" [:map {:closed :true}],
 "AWS::FMS::Policy.IEMap"
 [:map
  {:closed :true}
  ["ACCOUNT" {:optional true} [:ref "StringList"]]
  ["ORGUNIT" {:optional true} [:ref "StringList"]]],
 "AWS::WAF::WebACL"
 [:map
  ["Type" [:= "AWS::WAF::WebACL"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DefaultAction"
     {:optional true}
     [:ref "AWS::WAF::WebACL.WafAction"]]
    ["MetricName" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Rules"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::WAF::WebACL.ActivatedRule"]]
      "Fn::If"]]]]],
 "AWS::KinesisAnalyticsV2::Application.InputLambdaProcessor"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]],
 "AWS::Athena::WorkGroup.EncryptionConfiguration"
 [:map
  {:closed :true}
  ["EncryptionOption" {:optional true} [:ref "String"]]
  ["KmsKey" {:optional true} [:ref "String"]]],
 "AWS::IoT::TopicRule.PutItemInput"
 [:map {:closed :true} ["TableName" {:optional true} [:ref "String"]]],
 "AWS::Glue::DataCatalogEncryptionSettings.DataCatalogEncryptionSettings"
 [:map
  {:closed :true}
  ["ConnectionPasswordEncryption"
   {:optional true}
   [:ref
    "AWS::Glue::DataCatalogEncryptionSettings.ConnectionPasswordEncryption"]]
  ["EncryptionAtRest"
   {:optional true}
   [:ref
    "AWS::Glue::DataCatalogEncryptionSettings.EncryptionAtRest"]]],
 "AWS::AppSync::Resolver.PipelineConfig"
 [:map
  {:closed :true}
  ["Functions" {:optional true} [:ref "StringList"]]],
 "AWS::GameLift::GameServerGroup.InstanceDefinitions"
 [:map
  {:closed :true}
  ["InstanceDefinitions"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::GameLift::GameServerGroup.InstanceDefinition"]]
    "Fn::If"]]],
 "AWS::ECS::TaskSet.ServiceRegistry"
 [:map
  {:closed :true}
  ["ContainerName" {:optional true} [:ref "String"]]
  ["ContainerPort" {:optional true} [:ref "Integer"]]
  ["Port" {:optional true} [:ref "Integer"]]
  ["RegistryArn" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.Scte27DestinationSettings"
 [:map {:closed :true}],
 "AWS::EC2::SubnetRouteTableAssociation"
 [:map
  ["Type" [:= "AWS::EC2::SubnetRouteTableAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RouteTableId" {:optional true} [:ref "String"]]
    ["SubnetId" {:optional true} [:ref "String"]]]]],
 "AWS::ElasticLoadBalancingV2::TargetGroup.Matcher"
 [:map {:closed :true} ["HttpCode" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.DvbSubDestinationSettings"
 [:map
  {:closed :true}
  ["ShadowYOffset" {:optional true} [:ref "Integer"]]
  ["BackgroundOpacity" {:optional true} [:ref "Integer"]]
  ["Font"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.InputLocation"]]
  ["OutlineColor" {:optional true} [:ref "String"]]
  ["ShadowXOffset" {:optional true} [:ref "Integer"]]
  ["FontSize" {:optional true} [:ref "String"]]
  ["FontOpacity" {:optional true} [:ref "Integer"]]
  ["Alignment" {:optional true} [:ref "String"]]
  ["FontColor" {:optional true} [:ref "String"]]
  ["YPosition" {:optional true} [:ref "Integer"]]
  ["ShadowColor" {:optional true} [:ref "String"]]
  ["FontResolution" {:optional true} [:ref "Integer"]]
  ["BackgroundColor" {:optional true} [:ref "String"]]
  ["TeletextGridControl" {:optional true} [:ref "String"]]
  ["ShadowOpacity" {:optional true} [:ref "Integer"]]
  ["XPosition" {:optional true} [:ref "Integer"]]
  ["OutlineSize" {:optional true} [:ref "Integer"]]],
 "AWS::EC2::VPCEndpoint"
 [:map
  ["Type" [:= "AWS::EC2::VPCEndpoint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PolicyDocument" {:optional true} [:ref "Json"]]
    ["PrivateDnsEnabled" {:optional true} [:ref "Boolean"]]
    ["RouteTableIds" {:optional true} [:ref "StringList"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["ServiceName" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]
    ["VpcEndpointType" {:optional true} [:ref "String"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::MSK::Cluster.CloudWatchLogs"
 [:map
  {:closed :true}
  ["LogGroup" {:optional true} [:ref "String"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::MediaLive::Channel.Scte27SourceSettings"
 [:map {:closed :true} ["Pid" {:optional true} [:ref "Integer"]]],
 "AWS::KinesisAnalytics::ApplicationReferenceDataSource.ReferenceSchema"
 [:map
  {:closed :true}
  ["RecordEncoding" {:optional true} [:ref "String"]]
  ["RecordColumns"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::KinesisAnalytics::ApplicationReferenceDataSource.RecordColumn"]]
    "Fn::If"]]
  ["RecordFormat"
   {:optional true}
   [:ref
    "AWS::KinesisAnalytics::ApplicationReferenceDataSource.RecordFormat"]]],
 "AWS::ServiceDiscovery::Service.HealthCheckConfig"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["ResourcePath" {:optional true} [:ref "String"]]
  ["FailureThreshold" {:optional true} [:ref "Double"]]],
 "AWS::SSM::Association.ParameterValues"
 [:map
  {:closed :true}
  ["ParameterValues" {:optional true} [:ref "StringList"]]],
 "AWS::AppStream::Stack.ApplicationSettings"
 [:map
  {:closed :true}
  ["SettingsGroup" {:optional true} [:ref "String"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::EC2::RouteTable"
 [:map
  ["Type" [:= "AWS::EC2::RouteTable"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::GuardDuty::ThreatIntelSet"
 [:map
  ["Type" [:= "AWS::GuardDuty::ThreatIntelSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Format" {:optional true} [:ref "String"]]
    ["Activate" {:optional true} [:ref "Boolean"]]
    ["DetectorId" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Location" {:optional true} [:ref "String"]]]]],
 "AWS::WAFv2::RuleGroup"
 [:map
  ["Type" [:= "AWS::WAFv2::RuleGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Capacity" {:optional true} [:ref "Integer"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Scope" {:optional true} [:ref "String"]]
    ["Rules"
     {:optional true}
     [:or [:sequential [:ref "AWS::WAFv2::RuleGroup.Rule"]] "Fn::If"]]
    ["VisibilityConfig"
     {:optional true}
     [:ref "AWS::WAFv2::RuleGroup.VisibilityConfig"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EC2::SpotFleet.FleetLaunchTemplateSpecification"
 [:map
  {:closed :true}
  ["LaunchTemplateId" {:optional true} [:ref "String"]]
  ["LaunchTemplateName" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions"
 [:map
  {:closed :true}
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["LogGroupName" {:optional true} [:ref "String"]]
  ["LogStreamName" {:optional true} [:ref "String"]]],
 "AWS::ElasticBeanstalk::Application.ApplicationResourceLifecycleConfig"
 [:map
  {:closed :true}
  ["ServiceRole" {:optional true} [:ref "String"]]
  ["VersionLifecycleConfig"
   {:optional true}
   [:ref
    "AWS::ElasticBeanstalk::Application.ApplicationVersionLifecycleConfig"]]],
 "AWS::MediaLive::Channel.RtmpOutputSettings"
 [:map
  {:closed :true}
  ["Destination"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.OutputLocationRef"]]
  ["CertificateMode" {:optional true} [:ref "String"]]
  ["NumRetries" {:optional true} [:ref "Integer"]]
  ["ConnectionRetryInterval" {:optional true} [:ref "Integer"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule"
 [:map
  ["Type" [:= "AWS::ElasticLoadBalancingV2::ListenerRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Actions"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ElasticLoadBalancingV2::ListenerRule.Action"]]
      "Fn::If"]]
    ["Conditions"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ElasticLoadBalancingV2::ListenerRule.RuleCondition"]]
      "Fn::If"]]
    ["ListenerArn" {:optional true} [:ref "String"]]
    ["Priority" {:optional true} [:ref "Integer"]]]]],
 "AWS::EMR::InstanceFleetConfig"
 [:map
  ["Type" [:= "AWS::EMR::InstanceFleetConfig"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ClusterId" {:optional true} [:ref "String"]]
    ["InstanceFleetType" {:optional true} [:ref "String"]]
    ["InstanceTypeConfigs"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::EMR::InstanceFleetConfig.InstanceTypeConfig"]]
      "Fn::If"]]
    ["LaunchSpecifications"
     {:optional true}
     [:ref
      "AWS::EMR::InstanceFleetConfig.InstanceFleetProvisioningSpecifications"]]
    ["Name" {:optional true} [:ref "String"]]
    ["TargetOnDemandCapacity" {:optional true} [:ref "Integer"]]
    ["TargetSpotCapacity" {:optional true} [:ref "Integer"]]]]],
 "AWS::CodeDeploy::DeploymentGroup.EC2TagSet"
 [:map
  {:closed :true}
  ["Ec2TagSetList"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::CodeDeploy::DeploymentGroup.EC2TagSetListObject"]]
    "Fn::If"]]],
 "AWS::RDS::DBSecurityGroup"
 [:map
  ["Type" [:= "AWS::RDS::DBSecurityGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DBSecurityGroupIngress"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::RDS::DBSecurityGroup.Ingress"]]
      "Fn::If"]]
    ["EC2VpcId" {:optional true} [:ref "String"]]
    ["GroupDescription" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::S3::Bucket.S3KeyFilter"
 [:map
  {:closed :true}
  ["Rules"
   {:optional true}
   [:or [:sequential [:ref "AWS::S3::Bucket.FilterRule"]] "Fn::If"]]],
 "AWS::ApplicationInsights::Application"
 [:map
  ["Type" [:= "AWS::ApplicationInsights::Application"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AutoConfigurationEnabled" {:optional true} [:ref "Boolean"]]
    ["CustomComponents"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ApplicationInsights::Application.CustomComponent"]]
      "Fn::If"]]
    ["LogPatternSets"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ApplicationInsights::Application.LogPatternSet"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["OpsItemSNSTopicArn" {:optional true} [:ref "String"]]
    ["CWEMonitorEnabled" {:optional true} [:ref "Boolean"]]
    ["ComponentMonitoringSettings"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ApplicationInsights::Application.ComponentMonitoringSetting"]]
      "Fn::If"]]
    ["ResourceGroupName" {:optional true} [:ref "String"]]
    ["OpsCenterEnabled" {:optional true} [:ref "Boolean"]]]]],
 "AWS::Backup::BackupSelection.ConditionResourceType"
 [:map
  {:closed :true}
  ["ConditionValue" {:optional true} [:ref "String"]]
  ["ConditionKey" {:optional true} [:ref "String"]]
  ["ConditionType" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::CloudFrontOriginAccessIdentity"
 [:map
  ["Type" [:= "AWS::CloudFront::CloudFrontOriginAccessIdentity"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CloudFrontOriginAccessIdentityConfig"
     {:optional true}
     [:ref
      "AWS::CloudFront::CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig"]]]]],
 "AWS::WAFRegional::WebACL.Action"
 [:map {:closed :true} ["Type" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.Secret"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["ValueFrom" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.SetVariable"
 [:map
  {:closed :true}
  ["VariableName" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::IoT1Click::Project"
 [:map
  ["Type" [:= "AWS::IoT1Click::Project"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["PlacementTemplate"
     {:optional true}
     [:ref "AWS::IoT1Click::Project.PlacementTemplate"]]
    ["ProjectName" {:optional true} [:ref "String"]]]]],
 "AWS::ECR::Repository"
 [:map
  ["Type" [:= "AWS::ECR::Repository"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LifecyclePolicy"
     {:optional true}
     [:ref "AWS::ECR::Repository.LifecyclePolicy"]]
    ["RepositoryName" {:optional true} [:ref "String"]]
    ["RepositoryPolicyText" {:optional true} [:ref "Unknown"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ImageTagMutability" {:optional true} [:ref "String"]]
    ["ImageScanningConfiguration" {:optional true} [:ref "Json"]]]]],
 "AWS::Greengrass::LoggerDefinition"
 [:map
  ["Type" [:= "AWS::Greengrass::LoggerDefinition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InitialVersion"
     {:optional true}
     [:ref
      "AWS::Greengrass::LoggerDefinition.LoggerDefinitionVersion"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::IoT::TopicRule.AssetPropertyTimestamp"
 [:map
  {:closed :true}
  ["OffsetInNanos" {:optional true} [:ref "String"]]
  ["TimeInSeconds" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.Scte35TimeSignalApos"
 [:map
  {:closed :true}
  ["AdAvailOffset" {:optional true} [:ref "Integer"]]
  ["WebDeliveryAllowedFlag" {:optional true} [:ref "String"]]
  ["NoRegionalBlackoutFlag" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.InstanceFleetProvisioningSpecifications"
 [:map
  {:closed :true}
  ["SpotSpecification"
   {:optional true}
   [:ref "AWS::EMR::Cluster.SpotProvisioningSpecification"]]],
 "AWS::SES::ReceiptFilter.IpFilter"
 [:map
  {:closed :true}
  ["Policy" {:optional true} [:ref "String"]]
  ["Cidr" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.RegexPatternSetReferenceStatement"
 [:map
  {:closed :true}
  ["Arn" {:optional true} [:ref "String"]]
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.FieldToMatch"]]
  ["TextTransformations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::RuleGroup.TextTransformation"]]
    "Fn::If"]]],
 "AWS::Glue::Crawler.DynamoDBTarget"
 [:map {:closed :true} ["Path" {:optional true} [:ref "String"]]],
 "AWS::OpsWorks::Instance.TimeBasedAutoScaling"
 [:map
  {:closed :true}
  ["Friday" {:optional true} [:ref "StringMap"]]
  ["Monday" {:optional true} [:ref "StringMap"]]
  ["Saturday" {:optional true} [:ref "StringMap"]]
  ["Sunday" {:optional true} [:ref "StringMap"]]
  ["Thursday" {:optional true} [:ref "StringMap"]]
  ["Tuesday" {:optional true} [:ref "StringMap"]]
  ["Wednesday" {:optional true} [:ref "StringMap"]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayListenerTlsAcmCertificate"
 [:map
  {:closed :true}
  ["CertificateArn" {:optional true} [:ref "String"]]],
 "AWS::EFS::AccessPoint.PosixUser"
 [:map
  {:closed :true}
  ["Uid" {:optional true} [:ref "String"]]
  ["Gid" {:optional true} [:ref "String"]]
  ["SecondaryGids" {:optional true} [:ref "StringList"]]],
 "AWS::Config::OrganizationConfigRule.OrganizationCustomRuleMetadata"
 [:map
  {:closed :true}
  ["MaximumExecutionFrequency" {:optional true} [:ref "String"]]
  ["TagKeyScope" {:optional true} [:ref "String"]]
  ["ResourceIdScope" {:optional true} [:ref "String"]]
  ["LambdaFunctionArn" {:optional true} [:ref "String"]]
  ["ResourceTypesScope" {:optional true} [:ref "StringList"]]
  ["OrganizationConfigRuleTriggerTypes"
   {:optional true}
   [:ref "StringList"]]
  ["Description" {:optional true} [:ref "String"]]
  ["TagValueScope" {:optional true} [:ref "String"]]
  ["InputParameters" {:optional true} [:ref "String"]]],
 "AWS::OpsWorks::Layer.ShutdownEventConfiguration"
 [:map
  {:closed :true}
  ["DelayUntilElbConnectionsDrained" {:optional true} [:ref "Boolean"]]
  ["ExecutionTimeout" {:optional true} [:ref "Integer"]]],
 "AWS::WAFRegional::WebACL.Rule"
 [:map
  {:closed :true}
  ["Action" {:optional true} [:ref "AWS::WAFRegional::WebACL.Action"]]
  ["Priority" {:optional true} [:ref "Integer"]]
  ["RuleId" {:optional true} [:ref "String"]]],
 "AWS::SES::ReceiptFilter.Filter"
 [:map
  {:closed :true}
  ["IpFilter"
   {:optional true}
   [:ref "AWS::SES::ReceiptFilter.IpFilter"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::IAM::Role.Policy"
 [:map
  {:closed :true}
  ["PolicyDocument" {:optional true} [:ref "Json"]]
  ["PolicyName" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.HadoopJarStepConfig"
 [:map
  {:closed :true}
  ["Args" {:optional true} [:ref "StringList"]]
  ["Jar" {:optional true} [:ref "String"]]
  ["MainClass" {:optional true} [:ref "String"]]
  ["StepProperties"
   {:optional true}
   [:or [:sequential [:ref "AWS::EMR::Cluster.KeyValue"]] "Fn::If"]]],
 "AWS::AppMesh::VirtualNode"
 [:map
  ["Type" [:= "AWS::AppMesh::VirtualNode"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MeshName" {:optional true} [:ref "String"]]
    ["MeshOwner" {:optional true} [:ref "String"]]
    ["Spec"
     {:optional true}
     [:ref "AWS::AppMesh::VirtualNode.VirtualNodeSpec"]]
    ["VirtualNodeName" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EC2::NetworkAclEntry.PortRange"
 [:map
  {:closed :true}
  ["From" {:optional true} [:ref "Integer"]]
  ["To" {:optional true} [:ref "Integer"]]],
 "AWS::Events::Rule.InputTransformer"
 [:map
  {:closed :true}
  ["InputPathsMap" {:optional true} [:ref "StringMap"]]
  ["InputTemplate" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.VisibilityConfig"
 [:map
  {:closed :true}
  ["SampledRequestsEnabled" {:optional true} [:ref "Boolean"]]
  ["CloudWatchMetricsEnabled" {:optional true} [:ref "Boolean"]]
  ["MetricName" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::Distribution.DistributionConfig"
 [:map
  {:closed :true}
  ["ViewerCertificate"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.ViewerCertificate"]]
  ["Restrictions"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.Restrictions"]]
  ["DefaultCacheBehavior"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.DefaultCacheBehavior"]]
  ["Comment" {:optional true} [:ref "String"]]
  ["Aliases" {:optional true} [:ref "StringList"]]
  ["CacheBehaviors"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CloudFront::Distribution.CacheBehavior"]]
    "Fn::If"]]
  ["Origins"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CloudFront::Distribution.Origin"]]
    "Fn::If"]]
  ["WebACLId" {:optional true} [:ref "String"]]
  ["IPV6Enabled" {:optional true} [:ref "Boolean"]]
  ["PriceClass" {:optional true} [:ref "String"]]
  ["HttpVersion" {:optional true} [:ref "String"]]
  ["CustomErrorResponses"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::CloudFront::Distribution.CustomErrorResponse"]]
    "Fn::If"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["OriginGroups"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.OriginGroups"]]
  ["Logging"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.Logging"]]
  ["DefaultRootObject" {:optional true} [:ref "String"]]],
 "AWS::CodeBuild::Project.Source"
 [:map
  {:closed :true}
  ["BuildSpec" {:optional true} [:ref "String"]]
  ["GitCloneDepth" {:optional true} [:ref "Integer"]]
  ["GitSubmodulesConfig"
   {:optional true}
   [:ref "AWS::CodeBuild::Project.GitSubmodulesConfig"]]
  ["InsecureSsl" {:optional true} [:ref "Boolean"]]
  ["Auth" {:optional true} [:ref "AWS::CodeBuild::Project.SourceAuth"]]
  ["SourceIdentifier" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Location" {:optional true} [:ref "String"]]
  ["ReportBuildStatus" {:optional true} [:ref "Boolean"]]
  ["BuildStatusConfig"
   {:optional true}
   [:ref "AWS::CodeBuild::Project.BuildStatusConfig"]]],
 "AWS::ImageBuilder::DistributionConfiguration.Distribution"
 [:map
  {:closed :true}
  ["Region" {:optional true} [:ref "String"]]
  ["AmiDistributionConfiguration" {:optional true} [:ref "Json"]]
  ["LicenseConfigurationArns" {:optional true} [:ref "StringList"]]],
 "AWS::AmazonMQ::Broker"
 [:map
  ["Type" [:= "AWS::AmazonMQ::Broker"]]
  ["Properties"
   [:map
    {:closed :true}
    ["HostInstanceType" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]
    ["EngineType" {:optional true} [:ref "String"]]
    ["PubliclyAccessible" {:optional true} [:ref "Boolean"]]
    ["AutoMinorVersionUpgrade" {:optional true} [:ref "Boolean"]]
    ["Tags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::AmazonMQ::Broker.TagsEntry"]]
      "Fn::If"]]
    ["DeploymentMode" {:optional true} [:ref "String"]]
    ["Logs" {:optional true} [:ref "AWS::AmazonMQ::Broker.LogList"]]
    ["BrokerName" {:optional true} [:ref "String"]]
    ["LdapMetadata"
     {:optional true}
     [:ref "AWS::AmazonMQ::Broker.LdapMetadata"]]
    ["Users"
     {:optional true}
     [:or [:sequential [:ref "AWS::AmazonMQ::Broker.User"]] "Fn::If"]]
    ["EngineVersion" {:optional true} [:ref "String"]]
    ["SecurityGroups" {:optional true} [:ref "StringList"]]
    ["EncryptionOptions"
     {:optional true}
     [:ref "AWS::AmazonMQ::Broker.EncryptionOptions"]]
    ["MaintenanceWindowStartTime"
     {:optional true}
     [:ref "AWS::AmazonMQ::Broker.MaintenanceWindow"]]
    ["LdapServerMetadata"
     {:optional true}
     [:ref "AWS::AmazonMQ::Broker.LdapServerMetadata"]]
    ["AuthenticationStrategy" {:optional true} [:ref "String"]]
    ["Configuration"
     {:optional true}
     [:ref "AWS::AmazonMQ::Broker.ConfigurationId"]]
    ["StorageType" {:optional true} [:ref "String"]]]]],
 "AWS::IoTAnalytics::Channel"
 [:map
  ["Type" [:= "AWS::IoTAnalytics::Channel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ChannelName" {:optional true} [:ref "String"]]
    ["ChannelStorage"
     {:optional true}
     [:ref "AWS::IoTAnalytics::Channel.ChannelStorage"]]
    ["RetentionPeriod"
     {:optional true}
     [:ref "AWS::IoTAnalytics::Channel.RetentionPeriod"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::KinesisAnalytics::ApplicationReferenceDataSource.RecordColumn"
 [:map
  {:closed :true}
  ["Mapping" {:optional true} [:ref "String"]]
  ["SqlType" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Input.InputDeviceSettings"
 [:map {:closed :true} ["Id" {:optional true} [:ref "String"]]],
 "AWS::ApplicationInsights::Application.CustomComponent"
 [:map
  {:closed :true}
  ["ComponentName" {:optional true} [:ref "String"]]
  ["ResourceList" {:optional true} [:ref "StringList"]]],
 "AWS::AppStream::Stack.StorageConnector"
 [:map
  {:closed :true}
  ["Domains" {:optional true} [:ref "StringList"]]
  ["ResourceIdentifier" {:optional true} [:ref "String"]]
  ["ConnectorType" {:optional true} [:ref "String"]]],
 "AWS::NetworkManager::Link.Bandwidth"
 [:map
  {:closed :true}
  ["DownloadSpeed" {:optional true} [:ref "Integer"]]
  ["UploadSpeed" {:optional true} [:ref "Integer"]]],
 "AWS::AmazonMQ::Broker.User"
 [:map
  {:closed :true}
  ["Username" {:optional true} [:ref "String"]]
  ["Groups" {:optional true} [:ref "StringList"]]
  ["ConsoleAccess" {:optional true} [:ref "Boolean"]]
  ["Password" {:optional true} [:ref "String"]]],
 "AWS::Config::ConfigRule.SourceDetail"
 [:map
  {:closed :true}
  ["EventSource" {:optional true} [:ref "String"]]
  ["MaximumExecutionFrequency" {:optional true} [:ref "String"]]
  ["MessageType" {:optional true} [:ref "String"]]],
 "AWS::FSx::FileSystem"
 [:map
  ["Type" [:= "AWS::FSx::FileSystem"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LustreConfiguration"
     {:optional true}
     [:ref "AWS::FSx::FileSystem.LustreConfiguration"]]
    ["BackupId" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]
    ["StorageCapacity" {:optional true} [:ref "Integer"]]
    ["WindowsConfiguration"
     {:optional true}
     [:ref "AWS::FSx::FileSystem.WindowsConfiguration"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["FileSystemType" {:optional true} [:ref "String"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["StorageType" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayTlsValidationContext"
 [:map
  {:closed :true}
  ["Trust"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualGateway.VirtualGatewayTlsValidationContextTrust"]]],
 "AWS::IoT::TopicRule.SigV4Authorization"
 [:map
  {:closed :true}
  ["RoleArn" {:optional true} [:ref "String"]]
  ["ServiceName" {:optional true} [:ref "String"]]
  ["SigningRegion" {:optional true} [:ref "String"]]],
 "AWS::EMR::InstanceGroupConfig.VolumeSpecification"
 [:map
  {:closed :true}
  ["Iops" {:optional true} [:ref "Integer"]]
  ["SizeInGB" {:optional true} [:ref "Integer"]]
  ["VolumeType" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.OneDriveUserList"
 [:map
  {:closed :true}
  ["OneDriveUserList" {:optional true} [:ref "StringList"]]],
 "AWS::EMR::Cluster.CloudWatchAlarmDefinition"
 [:map
  {:closed :true}
  ["Unit" {:optional true} [:ref "String"]]
  ["EvaluationPeriods" {:optional true} [:ref "Integer"]]
  ["Statistic" {:optional true} [:ref "String"]]
  ["Dimensions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::Cluster.MetricDimension"]]
    "Fn::If"]]
  ["ComparisonOperator" {:optional true} [:ref "String"]]
  ["Threshold" {:optional true} [:ref "Double"]]
  ["Namespace" {:optional true} [:ref "String"]]
  ["Period" {:optional true} [:ref "Integer"]]
  ["MetricName" {:optional true} [:ref "String"]]],
 "AWS::DataPipeline::Pipeline.PipelineTag"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.RateBasedStatementOne"
 [:map
  {:closed :true}
  ["Limit" {:optional true} [:ref "Integer"]]
  ["AggregateKeyType" {:optional true} [:ref "String"]]
  ["ScopeDownStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.StatementTwo"]]
  ["ForwardedIPConfig"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.ForwardedIPConfiguration"]]],
 "AWS::MediaLive::Channel.Mp2Settings"
 [:map
  {:closed :true}
  ["CodingMode" {:optional true} [:ref "String"]]
  ["SampleRate" {:optional true} [:ref "Double"]]
  ["Bitrate" {:optional true} [:ref "Double"]]],
 "AWS::SageMaker::EndpointConfig.ProductionVariant"
 [:map
  {:closed :true}
  ["ModelName" {:optional true} [:ref "String"]]
  ["VariantName" {:optional true} [:ref "String"]]
  ["InitialInstanceCount" {:optional true} [:ref "Integer"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["AcceleratorType" {:optional true} [:ref "String"]]
  ["InitialVariantWeight" {:optional true} [:ref "Double"]]],
 "AWS::WAFRegional::IPSet"
 [:map
  ["Type" [:= "AWS::WAFRegional::IPSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["IPSetDescriptors"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::WAFRegional::IPSet.IPSetDescriptor"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Config::ConfigRule.Source"
 [:map
  {:closed :true}
  ["Owner" {:optional true} [:ref "String"]]
  ["SourceDetails"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Config::ConfigRule.SourceDetail"]]
    "Fn::If"]]
  ["SourceIdentifier" {:optional true} [:ref "String"]]],
 "AWS::IoT::TopicRule.PutAssetPropertyValueEntry"
 [:map
  {:closed :true}
  ["AssetId" {:optional true} [:ref "String"]]
  ["EntryId" {:optional true} [:ref "String"]]
  ["PropertyAlias" {:optional true} [:ref "String"]]
  ["PropertyId" {:optional true} [:ref "String"]]
  ["PropertyValues"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoT::TopicRule.AssetPropertyValue"]]
    "Fn::If"]]],
 "AWS::ApiGateway::Method.MethodResponse"
 [:map
  {:closed :true}
  ["ResponseModels" {:optional true} [:ref "StringMap"]]
  ["ResponseParameters" {:optional true} [:ref "BooleanMap"]]
  ["StatusCode" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.WebvttDestinationSettings"
 [:map {:closed :true}],
 "AWS::GameLift::MatchmakingConfiguration.GameProperty"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::ServiceDiscovery::PrivateDnsNamespace"
 [:map
  ["Type" [:= "AWS::ServiceDiscovery::PrivateDnsNamespace"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Vpc" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisFirehose::DeliveryStream.OutputFormatConfiguration"
 [:map
  {:closed :true}
  ["Serializer"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.Serializer"]]],
 "AWS::Transfer::Server"
 [:map
  ["Type" [:= "AWS::Transfer::Server"]]
  ["Properties"
   [:map
    {:closed :true}
    ["IdentityProviderType" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["EndpointDetails"
     {:optional true}
     [:ref "AWS::Transfer::Server.EndpointDetails"]]
    ["IdentityProviderDetails"
     {:optional true}
     [:ref "AWS::Transfer::Server.IdentityProviderDetails"]]
    ["LoggingRole" {:optional true} [:ref "String"]]
    ["Protocols"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Transfer::Server.Protocol"]]
      "Fn::If"]]
    ["EndpointType" {:optional true} [:ref "String"]]
    ["Certificate" {:optional true} [:ref "String"]]
    ["SecurityPolicyName" {:optional true} [:ref "String"]]]]],
 "AWS::AmazonMQ::Broker.LdapMetadata"
 [:map
  {:closed :true}
  ["InterBrokerCreds"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::AmazonMQ::Broker.InterBrokerCred"]]
    "Fn::If"]]
  ["ServerMetadata"
   {:optional true}
   [:ref "AWS::AmazonMQ::Broker.ServerMetadata"]]],
 "AWS::AutoScaling::AutoScalingGroup.MetricsCollection"
 [:map
  {:closed :true}
  ["Granularity" {:optional true} [:ref "String"]]
  ["Metrics" {:optional true} [:ref "StringList"]]],
 "AWS::MSK::Cluster.BrokerNodeGroupInfo"
 [:map
  {:closed :true}
  ["SecurityGroups" {:optional true} [:ref "StringList"]]
  ["ClientSubnets" {:optional true} [:ref "StringList"]]
  ["StorageInfo"
   {:optional true}
   [:ref "AWS::MSK::Cluster.StorageInfo"]]
  ["BrokerAZDistribution" {:optional true} [:ref "String"]]
  ["InstanceType" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Pipeline.Datastore"
 [:map
  {:closed :true}
  ["DatastoreName" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::IoT::TopicRule.Action"
 [:map
  {:closed :true}
  ["StepFunctions"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.StepFunctionsAction"]]
  ["Lambda" {:optional true} [:ref "AWS::IoT::TopicRule.LambdaAction"]]
  ["Elasticsearch"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.ElasticsearchAction"]]
  ["DynamoDB"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.DynamoDBAction"]]
  ["IotEvents"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.IotEventsAction"]]
  ["CloudwatchMetric"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.CloudwatchMetricAction"]]
  ["Http" {:optional true} [:ref "AWS::IoT::TopicRule.HttpAction"]]
  ["Kinesis"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.KinesisAction"]]
  ["CloudwatchAlarm"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.CloudwatchAlarmAction"]]
  ["Republish"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.RepublishAction"]]
  ["IotSiteWise"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.IotSiteWiseAction"]]
  ["Sqs" {:optional true} [:ref "AWS::IoT::TopicRule.SqsAction"]]
  ["Firehose"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.FirehoseAction"]]
  ["Sns" {:optional true} [:ref "AWS::IoT::TopicRule.SnsAction"]]
  ["S3" {:optional true} [:ref "AWS::IoT::TopicRule.S3Action"]]
  ["IotAnalytics"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.IotAnalyticsAction"]]
  ["DynamoDBv2"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.DynamoDBv2Action"]]],
 "AWS::SageMaker::MonitoringSchedule.NetworkConfig"
 [:map
  {:closed :true}
  ["EnableInterContainerTrafficEncryption"
   {:optional true}
   [:ref "Boolean"]]
  ["EnableNetworkIsolation" {:optional true} [:ref "Boolean"]]
  ["VpcConfig"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.VpcConfig"]]],
 "AWS::IoT::TopicRule.RepublishAction"
 [:map
  {:closed :true}
  ["Qos" {:optional true} [:ref "Integer"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["Topic" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::FunctionDefinition.ResourceAccessPolicy"
 [:map
  {:closed :true}
  ["ResourceId" {:optional true} [:ref "String"]]
  ["Permission" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.KeyValuePair"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.SalesforceCustomKnowledgeArticleTypeConfigurationList"
 [:map
  {:closed :true}
  ["SalesforceCustomKnowledgeArticleTypeConfigurationList"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::Kendra::DataSource.SalesforceCustomKnowledgeArticleTypeConfiguration"]]
    "Fn::If"]]],
 "AWS::ApplicationAutoScaling::ScalableTarget"
 [:map
  ["Type" [:= "AWS::ApplicationAutoScaling::ScalableTarget"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MaxCapacity" {:optional true} [:ref "Integer"]]
    ["MinCapacity" {:optional true} [:ref "Integer"]]
    ["ResourceId" {:optional true} [:ref "String"]]
    ["RoleARN" {:optional true} [:ref "String"]]
    ["ScalableDimension" {:optional true} [:ref "String"]]
    ["ScheduledActions"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ApplicationAutoScaling::ScalableTarget.ScheduledAction"]]
      "Fn::If"]]
    ["ServiceNamespace" {:optional true} [:ref "String"]]
    ["SuspendedState"
     {:optional true}
     [:ref
      "AWS::ApplicationAutoScaling::ScalableTarget.SuspendedState"]]]]],
 "AWS::FMS::Policy"
 [:map
  ["Type" [:= "AWS::FMS::Policy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResourceType" {:optional true} [:ref "String"]]
    ["ResourceTypeList" {:optional true} [:ref "StringList"]]
    ["ExcludeResourceTags" {:optional true} [:ref "Boolean"]]
    ["SecurityServicePolicyData" {:optional true} [:ref "Json"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "AWS::FMS::Policy.PolicyTag"]] "Fn::If"]]
    ["IncludeMap" {:optional true} [:ref "AWS::FMS::Policy.IEMap"]]
    ["PolicyName" {:optional true} [:ref "String"]]
    ["RemediationEnabled" {:optional true} [:ref "Boolean"]]
    ["ExcludeMap" {:optional true} [:ref "AWS::FMS::Policy.IEMap"]]
    ["ResourceTags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::FMS::Policy.ResourceTag"]]
      "Fn::If"]]
    ["DeleteAllPolicyResources" {:optional true} [:ref "Boolean"]]]]],
 "AWS::AmazonMQ::Configuration.TagsEntry"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::Application.KinesisStreamsInput"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]],
 "AWS::ApplicationAutoScaling::ScalingPolicy.PredefinedMetricSpecification"
 [:map
  {:closed :true}
  ["PredefinedMetricType" {:optional true} [:ref "String"]]
  ["ResourceLabel" {:optional true} [:ref "String"]]],
 "AWS::ApiGatewayV2::Route"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::Route"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Target" {:optional true} [:ref "String"]]
    ["RouteResponseSelectionExpression"
     {:optional true}
     [:ref "String"]]
    ["ApiKeyRequired" {:optional true} [:ref "Boolean"]]
    ["ApiId" {:optional true} [:ref "String"]]
    ["AuthorizationScopes" {:optional true} [:ref "StringList"]]
    ["RequestModels" {:optional true} [:ref "Json"]]
    ["RequestParameters" {:optional true} [:ref "Json"]]
    ["ModelSelectionExpression" {:optional true} [:ref "String"]]
    ["AuthorizationType" {:optional true} [:ref "String"]]
    ["RouteKey" {:optional true} [:ref "String"]]
    ["AuthorizerId" {:optional true} [:ref "String"]]
    ["OperationName" {:optional true} [:ref "String"]]]]],
 "AWS::ServiceCatalog::StackSetConstraint"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::StackSetConstraint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["StackInstanceControl" {:optional true} [:ref "String"]]
    ["ExecutionRole" {:optional true} [:ref "String"]]
    ["RegionList" {:optional true} [:ref "StringList"]]
    ["AdminRole" {:optional true} [:ref "String"]]
    ["AccountList" {:optional true} [:ref "StringList"]]
    ["ProductId" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["PortfolioId" {:optional true} [:ref "String"]]]]],
 "AWS::IoT::TopicRule.FirehoseAction"
 [:map
  {:closed :true}
  ["DeliveryStreamName" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["Separator" {:optional true} [:ref "String"]]],
 "AWS::IoT::Authorizer"
 [:map
  ["Type" [:= "AWS::IoT::Authorizer"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AuthorizerFunctionArn" {:optional true} [:ref "String"]]
    ["AuthorizerName" {:optional true} [:ref "String"]]
    ["SigningDisabled" {:optional true} [:ref "Boolean"]]
    ["Status" {:optional true} [:ref "String"]]
    ["TokenKeyName" {:optional true} [:ref "String"]]
    ["TokenSigningPublicKeys"
     {:optional true}
     [:ref "AWS::IoT::Authorizer.TokenSigningPublicKeys"]]
    ["Tags" {:optional true} [:ref "AWS::IoT::Authorizer.Tags"]]]]],
 "AWS::MediaLive::Channel.Fmp4HlsSettings"
 [:map
  {:closed :true}
  ["AudioRenditionSets" {:optional true} [:ref "String"]]
  ["NielsenId3Behavior" {:optional true} [:ref "String"]]
  ["TimedMetadataBehavior" {:optional true} [:ref "String"]]],
 "AWS::SSM::PatchBaseline.PatchSource"
 [:map
  {:closed :true}
  ["Products" {:optional true} [:ref "StringList"]]
  ["Configuration" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::SubscriptionDefinition.SubscriptionDefinitionVersion"
 [:map
  {:closed :true}
  ["Subscriptions"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Greengrass::SubscriptionDefinition.Subscription"]]
    "Fn::If"]]],
 "AWS::Route53::HostedZone.HostedZoneTag"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::CodeBuild::Project.ProjectBuildBatchConfig"
 [:map
  {:closed :true}
  ["CombineArtifacts" {:optional true} [:ref "Boolean"]]
  ["ServiceRole" {:optional true} [:ref "String"]]
  ["TimeoutInMins" {:optional true} [:ref "Integer"]]
  ["Restrictions"
   {:optional true}
   [:ref "AWS::CodeBuild::Project.BatchRestrictions"]]],
 "AWS::EMR::Cluster.BootstrapActionConfig"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["ScriptBootstrapAction"
   {:optional true}
   [:ref "AWS::EMR::Cluster.ScriptBootstrapActionConfig"]]],
 "AWS::S3::Bucket.RoutingRule"
 [:map
  {:closed :true}
  ["RedirectRule"
   {:optional true}
   [:ref "AWS::S3::Bucket.RedirectRule"]]
  ["RoutingRuleCondition"
   {:optional true}
   [:ref "AWS::S3::Bucket.RoutingRuleCondition"]]],
 "AWS::ECS::TaskDefinition.SystemControl"
 [:map
  {:closed :true}
  ["Namespace" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::ImageBuilder::ImageRecipe.ComponentConfiguration"
 [:map
  {:closed :true}
  ["ComponentArn" {:optional true} [:ref "String"]]],
 "AWS::WAF::Rule.Predicate"
 [:map
  {:closed :true}
  ["DataId" {:optional true} [:ref "String"]]
  ["Negated" {:optional true} [:ref "Boolean"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::EmailTemplate"
 [:map
  ["Type" [:= "AWS::Pinpoint::EmailTemplate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["HtmlPart" {:optional true} [:ref "String"]]
    ["TextPart" {:optional true} [:ref "String"]]
    ["TemplateName" {:optional true} [:ref "String"]]
    ["TemplateDescription" {:optional true} [:ref "String"]]
    ["DefaultSubstitutions" {:optional true} [:ref "String"]]
    ["Subject" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]]]],
 "AWS::CodeDeploy::DeploymentGroup.TriggerConfig"
 [:map
  {:closed :true}
  ["TriggerEvents" {:optional true} [:ref "StringList"]]
  ["TriggerName" {:optional true} [:ref "String"]]
  ["TriggerTargetArn" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.MappingParameters"
 [:map
  {:closed :true}
  ["JSONMappingParameters"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.JSONMappingParameters"]]
  ["CSVMappingParameters"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.CSVMappingParameters"]]],
 "AWS::S3::Bucket.SseKmsEncryptedObjects"
 [:map {:closed :true} ["Status" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::Application.ApplicationConfiguration"
 [:map
  {:closed :true}
  ["ApplicationCodeConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::Application.ApplicationCodeConfiguration"]]
  ["EnvironmentProperties"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::Application.EnvironmentProperties"]]
  ["FlinkApplicationConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::Application.FlinkApplicationConfiguration"]]
  ["SqlApplicationConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::Application.SqlApplicationConfiguration"]]
  ["ApplicationSnapshotConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::Application.ApplicationSnapshotConfiguration"]]],
 "AWS::ECS::Service.DeploymentConfiguration"
 [:map
  {:closed :true}
  ["MaximumPercent" {:optional true} [:ref "Integer"]]
  ["MinimumHealthyPercent" {:optional true} [:ref "Integer"]]],
 "AWS::ApiGatewayV2::Stage.AccessLogSettings"
 [:map
  {:closed :true}
  ["Format" {:optional true} [:ref "String"]]
  ["DestinationArn" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.ManagedRuleGroupStatement"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["VendorName" {:optional true} [:ref "String"]]
  ["ExcludedRules"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.ExcludedRule"]]
    "Fn::If"]]],
 "AWS::CloudFront::OriginRequestPolicy.CookiesConfig"
 [:map
  {:closed :true}
  ["CookieBehavior" {:optional true} [:ref "String"]]
  ["Cookies" {:optional true} [:ref "StringList"]]],
 "AWS::CodeStarConnections::Connection"
 [:map
  ["Type" [:= "AWS::CodeStarConnections::Connection"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ConnectionName" {:optional true} [:ref "String"]]
    ["ProviderType" {:optional true} [:ref "String"]]
    ["HostArn" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::RoboMaker::SimulationApplication.RobotSoftwareSuite"
 [:map
  {:closed :true}
  ["Version" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.S3ReferenceDataSource"
 [:map
  {:closed :true}
  ["BucketARN" {:optional true} [:ref "String"]]
  ["FileKey" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.ListenerTimeout"
 [:map
  {:closed :true}
  ["TCP"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.TcpTimeout"]]
  ["HTTP2"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.HttpTimeout"]]
  ["HTTP"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.HttpTimeout"]]
  ["GRPC"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.GrpcTimeout"]]],
 "AWS::S3::Bucket.ServerSideEncryptionByDefault"
 [:map
  {:closed :true}
  ["KMSMasterKeyID" {:optional true} [:ref "String"]]
  ["SSEAlgorithm" {:optional true} [:ref "String"]]],
 "AWS::MediaConvert::JobTemplate.HopDestination"
 [:map
  {:closed :true}
  ["WaitMinutes" {:optional true} [:ref "Integer"]]
  ["Priority" {:optional true} [:ref "Integer"]]
  ["Queue" {:optional true} [:ref "String"]]],
 "AWS::EC2::EC2Fleet.TagSpecification"
 [:map
  {:closed :true}
  ["ResourceType" {:optional true} [:ref "String"]]
  ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::Glue::Classifier.GrokClassifier"
 [:map
  {:closed :true}
  ["CustomPatterns" {:optional true} [:ref "String"]]
  ["GrokPattern" {:optional true} [:ref "String"]]
  ["Classification" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::CodePipeline::Pipeline.OutputArtifact"
 [:map {:closed :true} ["Name" {:optional true} [:ref "String"]]],
 "AWS::CodePipeline::Webhook.WebhookAuthConfiguration"
 [:map
  {:closed :true}
  ["AllowedIPRange" {:optional true} [:ref "String"]]
  ["SecretToken" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayBackendDefaults"
 [:map
  {:closed :true}
  ["ClientPolicy"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualGateway.VirtualGatewayClientPolicy"]]],
 "AWS::CodeCommit::Repository"
 [:map
  ["Type" [:= "AWS::CodeCommit::Repository"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RepositoryName" {:optional true} [:ref "String"]]
    ["Triggers"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodeCommit::Repository.RepositoryTrigger"]]
      "Fn::If"]]
    ["Code" {:optional true} [:ref "AWS::CodeCommit::Repository.Code"]]
    ["RepositoryDescription" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EC2::SpotFleet.SpotFleetLaunchSpecification"
 [:map
  {:closed :true}
  ["ImageId" {:optional true} [:ref "String"]]
  ["UserData" {:optional true} [:ref "String"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["RamdiskId" {:optional true} [:ref "String"]]
  ["WeightedCapacity" {:optional true} [:ref "Double"]]
  ["EbsOptimized" {:optional true} [:ref "Boolean"]]
  ["Placement"
   {:optional true}
   [:ref "AWS::EC2::SpotFleet.SpotPlacement"]]
  ["KernelId" {:optional true} [:ref "String"]]
  ["SubnetId" {:optional true} [:ref "String"]]
  ["KeyName" {:optional true} [:ref "String"]]
  ["SecurityGroups"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::SpotFleet.GroupIdentifier"]]
    "Fn::If"]]
  ["TagSpecifications"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::EC2::SpotFleet.SpotFleetTagSpecification"]]
    "Fn::If"]]
  ["IamInstanceProfile"
   {:optional true}
   [:ref "AWS::EC2::SpotFleet.IamInstanceProfileSpecification"]]
  ["BlockDeviceMappings"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::SpotFleet.BlockDeviceMapping"]]
    "Fn::If"]]
  ["SpotPrice" {:optional true} [:ref "String"]]
  ["Monitoring"
   {:optional true}
   [:ref "AWS::EC2::SpotFleet.SpotFleetMonitoring"]]
  ["NetworkInterfaces"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::EC2::SpotFleet.InstanceNetworkInterfaceSpecification"]]
    "Fn::If"]]],
 "AWS::ImageBuilder::InfrastructureConfiguration"
 [:map
  ["Type" [:= "AWS::ImageBuilder::InfrastructureConfiguration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SnsTopicArn" {:optional true} [:ref "String"]]
    ["InstanceTypes" {:optional true} [:ref "StringList"]]
    ["Tags" {:optional true} [:ref "StringMap"]]
    ["KeyPair" {:optional true} [:ref "String"]]
    ["SubnetId" {:optional true} [:ref "String"]]
    ["TerminateInstanceOnFailure" {:optional true} [:ref "Boolean"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["InstanceProfileName" {:optional true} [:ref "String"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["Logging" {:optional true} [:ref "Json"]]
    ["ResourceTags" {:optional true} [:ref "StringMap"]]]]],
 "AWS::Pinpoint::VoiceChannel"
 [:map
  ["Type" [:= "AWS::Pinpoint::VoiceChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ApplicationId" {:optional true} [:ref "String"]]]]],
 "AWS::Route53::HostedZone.HostedZoneConfig"
 [:map {:closed :true} ["Comment" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Datastore"
 [:map
  ["Type" [:= "AWS::IoTAnalytics::Datastore"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DatastoreStorage"
     {:optional true}
     [:ref "AWS::IoTAnalytics::Datastore.DatastoreStorage"]]
    ["DatastoreName" {:optional true} [:ref "String"]]
    ["RetentionPeriod"
     {:optional true}
     [:ref "AWS::IoTAnalytics::Datastore.RetentionPeriod"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::ApplicationInsights::Application.WindowsEvent"
 [:map
  {:closed :true}
  ["LogGroupName" {:optional true} [:ref "String"]]
  ["EventName" {:optional true} [:ref "String"]]
  ["EventLevels" {:optional true} [:ref "StringList"]]
  ["PatternSet" {:optional true} [:ref "String"]]],
 "AWS::Batch::ComputeEnvironment.ComputeResources"
 [:map
  {:closed :true}
  ["Subnets" {:optional true} [:ref "StringList"]]
  ["InstanceTypes" {:optional true} [:ref "StringList"]]
  ["ImageId" {:optional true} [:ref "String"]]
  ["InstanceRole" {:optional true} [:ref "String"]]
  ["Tags" {:optional true} [:ref "Json"]]
  ["LaunchTemplate"
   {:optional true}
   [:ref "AWS::Batch::ComputeEnvironment.LaunchTemplateSpecification"]]
  ["BidPercentage" {:optional true} [:ref "Integer"]]
  ["DesiredvCpus" {:optional true} [:ref "Integer"]]
  ["SpotIamFleetRole" {:optional true} [:ref "String"]]
  ["MaxvCpus" {:optional true} [:ref "Integer"]]
  ["Type" {:optional true} [:ref "String"]]
  ["AllocationStrategy" {:optional true} [:ref "String"]]
  ["Ec2KeyPair" {:optional true} [:ref "String"]]
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
  ["MinvCpus" {:optional true} [:ref "Integer"]]
  ["PlacementGroup" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::DocumentationPart"
 [:map
  ["Type" [:= "AWS::ApiGateway::DocumentationPart"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Location"
     {:optional true}
     [:ref "AWS::ApiGateway::DocumentationPart.Location"]]
    ["Properties" {:optional true} [:ref "String"]]
    ["RestApiId" {:optional true} [:ref "String"]]]]],
 "AWS::Glue::Crawler.CatalogTarget"
 [:map
  {:closed :true}
  ["DatabaseName" {:optional true} [:ref "String"]]
  ["Tables" {:optional true} [:ref "StringList"]]],
 "AWS::IoTEvents::DetectorModel.Event"
 [:map
  {:closed :true}
  ["Condition" {:optional true} [:ref "String"]]
  ["Actions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoTEvents::DetectorModel.Action"]]
    "Fn::If"]]
  ["EventName" {:optional true} [:ref "String"]]],
 "AWS::QLDB::Stream"
 [:map
  ["Type" [:= "AWS::QLDB::Stream"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LedgerName" {:optional true} [:ref "String"]]
    ["StreamName" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["InclusiveStartTime" {:optional true} [:ref "String"]]
    ["ExclusiveEndTime" {:optional true} [:ref "String"]]
    ["KinesisConfiguration"
     {:optional true}
     [:ref "AWS::QLDB::Stream.KinesisConfiguration"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EC2::SubnetNetworkAclAssociation"
 [:map
  ["Type" [:= "AWS::EC2::SubnetNetworkAclAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["NetworkAclId" {:optional true} [:ref "String"]]
    ["SubnetId" {:optional true} [:ref "String"]]]]],
 "AWS::GlobalAccelerator::Listener"
 [:map
  ["Type" [:= "AWS::GlobalAccelerator::Listener"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AcceleratorArn" {:optional true} [:ref "String"]]
    ["PortRanges"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::GlobalAccelerator::Listener.PortRange"]]
      "Fn::If"]]
    ["Protocol" {:optional true} [:ref "String"]]
    ["ClientAffinity" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::GatewayRoute.HttpGatewayRoute"
 [:map
  {:closed :true}
  ["Action"
   {:optional true}
   [:ref "AWS::AppMesh::GatewayRoute.HttpGatewayRouteAction"]]
  ["Match"
   {:optional true}
   [:ref "AWS::AppMesh::GatewayRoute.HttpGatewayRouteMatch"]]],
 "AWS::Config::AggregationAuthorization"
 [:map
  ["Type" [:= "AWS::Config::AggregationAuthorization"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AuthorizedAccountId" {:optional true} [:ref "String"]]
    ["AuthorizedAwsRegion" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::MediaLive::Channel.InputLocation"
 [:map
  {:closed :true}
  ["Username" {:optional true} [:ref "String"]]
  ["PasswordParam" {:optional true} [:ref "String"]]
  ["Uri" {:optional true} [:ref "String"]]],
 "AWS::AmazonMQ::Broker.EncryptionOptions"
 [:map
  {:closed :true}
  ["KmsKeyId" {:optional true} [:ref "String"]]
  ["UseAwsOwnedKey" {:optional true} [:ref "Boolean"]]],
 "AWS::IoTAnalytics::Dataset.TriggeringDataset"
 [:map
  {:closed :true}
  ["DatasetName" {:optional true} [:ref "String"]]],
 "AWS::EC2::Instance.HibernationOptions"
 [:map
  {:closed :true}
  ["Configured" {:optional true} [:ref "Boolean"]]],
 "AWS::ECS::Service.NetworkConfiguration"
 [:map
  {:closed :true}
  ["AwsvpcConfiguration"
   {:optional true}
   [:ref "AWS::ECS::Service.AwsVpcConfiguration"]]],
 "AWS::IoTEvents::DetectorModel.Action"
 [:map
  {:closed :true}
  ["ResetTimer"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.ResetTimer"]]
  ["ClearTimer"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.ClearTimer"]]
  ["Lambda"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.Lambda"]]
  ["DynamoDB"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.DynamoDB"]]
  ["IotEvents"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.IotEvents"]]
  ["IotSiteWise"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.IotSiteWise"]]
  ["Sqs" {:optional true} [:ref "AWS::IoTEvents::DetectorModel.Sqs"]]
  ["Firehose"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.Firehose"]]
  ["Sns" {:optional true} [:ref "AWS::IoTEvents::DetectorModel.Sns"]]
  ["IotTopicPublish"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.IotTopicPublish"]]
  ["SetTimer"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.SetTimer"]]
  ["SetVariable"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.SetVariable"]]
  ["DynamoDBv2"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.DynamoDBv2"]]],
 "AWS::CloudFormation::WaitConditionHandle"
 [:map
  ["Type" [:= "AWS::CloudFormation::WaitConditionHandle"]]
  ["Properties" [:map {:closed :true}]]],
 "AWS::SSM::Association.Target"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::MediaLive::Channel.AvailBlanking"
 [:map
  {:closed :true}
  ["State" {:optional true} [:ref "String"]]
  ["AvailBlankingImage"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.InputLocation"]]],
 "AWS::WAFv2::RuleGroup.NotStatementOne"
 [:map
  {:closed :true}
  ["Statement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.StatementTwo"]]],
 "AWS::EC2::NetworkAcl"
 [:map
  ["Type" [:= "AWS::EC2::NetworkAcl"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::Batch::JobDefinition.Ulimit"
 [:map
  {:closed :true}
  ["SoftLimit" {:optional true} [:ref "Integer"]]
  ["HardLimit" {:optional true} [:ref "Integer"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::IAM::Policy"
 [:map
  ["Type" [:= "AWS::IAM::Policy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Groups" {:optional true} [:ref "StringList"]]
    ["PolicyDocument" {:optional true} [:ref "Json"]]
    ["PolicyName" {:optional true} [:ref "String"]]
    ["Roles" {:optional true} [:ref "StringList"]]
    ["Users" {:optional true} [:ref "StringList"]]]]],
 "AWS::Kendra::DataSource.SalesforceChatterFeedConfiguration"
 [:map
  {:closed :true}
  ["DocumentDataFieldName" {:optional true} [:ref "String"]]
  ["DocumentTitleFieldName" {:optional true} [:ref "String"]]
  ["FieldMappings"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"]]
  ["IncludeFilterTypes"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.SalesforceChatterFeedIncludeFilterTypes"]]],
 "AWS::S3::Bucket.NotificationFilter"
 [:map
  {:closed :true}
  ["S3Key" {:optional true} [:ref "AWS::S3::Bucket.S3KeyFilter"]]],
 "AWS::AppSync::DataSource.AwsIamConfig"
 [:map
  {:closed :true}
  ["SigningRegion" {:optional true} [:ref "String"]]
  ["SigningServiceName" {:optional true} [:ref "String"]]],
 "AWS::EC2::EC2Fleet.Placement"
 [:map
  {:closed :true}
  ["GroupName" {:optional true} [:ref "String"]]
  ["Tenancy" {:optional true} [:ref "String"]]
  ["SpreadDomain" {:optional true} [:ref "String"]]
  ["PartitionNumber" {:optional true} [:ref "Integer"]]
  ["AvailabilityZone" {:optional true} [:ref "String"]]
  ["Affinity" {:optional true} [:ref "String"]]
  ["HostId" {:optional true} [:ref "String"]]
  ["HostResourceGroupArn" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.VirtualServiceBackend"
 [:map
  {:closed :true}
  ["ClientPolicy"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.ClientPolicy"]]
  ["VirtualServiceName" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::Method"
 [:map
  ["Type" [:= "AWS::ApiGateway::Method"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApiKeyRequired" {:optional true} [:ref "Boolean"]]
    ["MethodResponses"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ApiGateway::Method.MethodResponse"]]
      "Fn::If"]]
    ["RequestValidatorId" {:optional true} [:ref "String"]]
    ["AuthorizationScopes" {:optional true} [:ref "StringList"]]
    ["RestApiId" {:optional true} [:ref "String"]]
    ["HttpMethod" {:optional true} [:ref "String"]]
    ["ResourceId" {:optional true} [:ref "String"]]
    ["Integration"
     {:optional true}
     [:ref "AWS::ApiGateway::Method.Integration"]]
    ["RequestModels" {:optional true} [:ref "StringMap"]]
    ["RequestParameters" {:optional true} [:ref "BooleanMap"]]
    ["AuthorizationType" {:optional true} [:ref "String"]]
    ["AuthorizerId" {:optional true} [:ref "String"]]
    ["OperationName" {:optional true} [:ref "String"]]]]],
 "AWS::Glue::Table"
 [:map
  ["Type" [:= "AWS::Glue::Table"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TableInput"
     {:optional true}
     [:ref "AWS::Glue::Table.TableInput"]]
    ["DatabaseName" {:optional true} [:ref "String"]]
    ["CatalogId" {:optional true} [:ref "String"]]]]],
 "AWS::Lambda::EventInvokeConfig.DestinationConfig"
 [:map
  {:closed :true}
  ["OnSuccess"
   {:optional true}
   [:ref "AWS::Lambda::EventInvokeConfig.OnSuccess"]]
  ["OnFailure"
   {:optional true}
   [:ref "AWS::Lambda::EventInvokeConfig.OnFailure"]]],
 "AWS::Glue::Classifier.XMLClassifier"
 [:map
  {:closed :true}
  ["RowTag" {:optional true} [:ref "String"]]
  ["Classification" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::Workteam"
 [:map
  ["Type" [:= "AWS::SageMaker::Workteam"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["NotificationConfiguration"
     {:optional true}
     [:ref "AWS::SageMaker::Workteam.NotificationConfiguration"]]
    ["WorkteamName" {:optional true} [:ref "String"]]
    ["MemberDefinitions"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::SageMaker::Workteam.MemberDefinition"]]
      "Fn::If"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::AppStream::Fleet.ComputeCapacity"
 [:map
  {:closed :true}
  ["DesiredInstances" {:optional true} [:ref "Integer"]]],
 "AWS::Lambda::Function.DeadLetterConfig"
 [:map {:closed :true} ["TargetArn" {:optional true} [:ref "String"]]],
 "AWS::EMR::InstanceGroupConfig.AutoScalingPolicy"
 [:map
  {:closed :true}
  ["Constraints"
   {:optional true}
   [:ref "AWS::EMR::InstanceGroupConfig.ScalingConstraints"]]
  ["Rules"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::InstanceGroupConfig.ScalingRule"]]
    "Fn::If"]]],
 "AWS::MediaStore::Container.MetricPolicyRule"
 [:map
  {:closed :true}
  ["ObjectGroup" {:optional true} [:ref "String"]]
  ["ObjectGroupName" {:optional true} [:ref "String"]]],
 "AWS::DocDB::DBClusterParameterGroup"
 [:map
  ["Type" [:= "AWS::DocDB::DBClusterParameterGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Parameters" {:optional true} [:ref "Json"]]
    ["Family" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::CodePipeline::CustomActionType.Settings"
 [:map
  {:closed :true}
  ["EntityUrlTemplate" {:optional true} [:ref "String"]]
  ["ExecutionUrlTemplate" {:optional true} [:ref "String"]]
  ["RevisionUrlTemplate" {:optional true} [:ref "String"]]
  ["ThirdPartyConfigurationUrl" {:optional true} [:ref "String"]]],
 "AWS::ECS::Cluster"
 [:map
  ["Type" [:= "AWS::ECS::Cluster"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ClusterName" {:optional true} [:ref "String"]]
    ["ClusterSettings"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ECS::Cluster.ClusterSettings"]]
      "Fn::If"]]
    ["CapacityProviders" {:optional true} [:ref "StringList"]]
    ["DefaultCapacityProviderStrategy"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ECS::Cluster.CapacityProviderStrategyItem"]]
      "Fn::If"]]]]],
 "AWS::Glue::SecurityConfiguration"
 [:map
  ["Type" [:= "AWS::Glue::SecurityConfiguration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EncryptionConfiguration"
     {:optional true}
     [:ref "AWS::Glue::SecurityConfiguration.EncryptionConfiguration"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::S3::Bucket.ReplicationTime"
 [:map
  {:closed :true}
  ["Status" {:optional true} [:ref "String"]]
  ["Time"
   {:optional true}
   [:ref "AWS::S3::Bucket.ReplicationTimeValue"]]],
 "AWS::Greengrass::CoreDefinition"
 [:map
  ["Type" [:= "AWS::Greengrass::CoreDefinition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InitialVersion"
     {:optional true}
     [:ref "AWS::Greengrass::CoreDefinition.CoreDefinitionVersion"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::CloudFront::StreamingDistribution"
 [:map
  ["Type" [:= "AWS::CloudFront::StreamingDistribution"]]
  ["Properties"
   [:map
    {:closed :true}
    ["StreamingDistributionConfig"
     {:optional true}
     [:ref
      "AWS::CloudFront::StreamingDistribution.StreamingDistributionConfig"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Glue::Trigger.NotificationProperty"
 [:map
  {:closed :true}
  ["NotifyDelayAfter" {:optional true} [:ref "Integer"]]],
 "AWS::IoT::TopicRule.StepFunctionsAction"
 [:map
  {:closed :true}
  ["ExecutionNamePrefix" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["StateMachineName" {:optional true} [:ref "String"]]],
 "AWS::GuardDuty::Filter.Condition"
 [:map
  {:closed :true}
  ["Lt" {:optional true} [:ref "Integer"]]
  ["Gte" {:optional true} [:ref "Integer"]]
  ["Neq" {:optional true} [:ref "StringList"]]
  ["Eq" {:optional true} [:ref "StringList"]]
  ["Lte" {:optional true} [:ref "Integer"]]],
 "AWS::Kendra::DataSource.ConnectionConfiguration"
 [:map
  {:closed :true}
  ["DatabaseHost" {:optional true} [:ref "String"]]
  ["DatabasePort" {:optional true} [:ref "Integer"]]
  ["DatabaseName" {:optional true} [:ref "String"]]
  ["TableName" {:optional true} [:ref "String"]]
  ["SecretArn" {:optional true} [:ref "String"]]],
 "AWS::EKS::Cluster.Provider"
 [:map {:closed :true} ["KeyArn" {:optional true} [:ref "String"]]],
 "AWS::Macie::FindingsFilter.Criterion" [:map {:closed :true}],
 "AWS::MSK::Cluster.JmxExporter"
 [:map
  {:closed :true}
  ["EnabledInBroker" {:optional true} [:ref "Boolean"]]],
 "AWS::RDS::OptionGroup.OptionConfiguration"
 [:map
  {:closed :true}
  ["DBSecurityGroupMemberships" {:optional true} [:ref "StringList"]]
  ["OptionName" {:optional true} [:ref "String"]]
  ["OptionSettings"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::RDS::OptionGroup.OptionSetting"]]
    "Fn::If"]]
  ["OptionVersion" {:optional true} [:ref "String"]]
  ["Port" {:optional true} [:ref "Integer"]]
  ["VpcSecurityGroupMemberships"
   {:optional true}
   [:ref "StringList"]]],
 "AWS::PinpointEmail::ConfigurationSetEventDestination.EventDestination"
 [:map
  {:closed :true}
  ["SnsDestination"
   {:optional true}
   [:ref
    "AWS::PinpointEmail::ConfigurationSetEventDestination.SnsDestination"]]
  ["CloudWatchDestination"
   {:optional true}
   [:ref
    "AWS::PinpointEmail::ConfigurationSetEventDestination.CloudWatchDestination"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["MatchingEventTypes" {:optional true} [:ref "StringList"]]
  ["PinpointDestination"
   {:optional true}
   [:ref
    "AWS::PinpointEmail::ConfigurationSetEventDestination.PinpointDestination"]]
  ["KinesisFirehoseDestination"
   {:optional true}
   [:ref
    "AWS::PinpointEmail::ConfigurationSetEventDestination.KinesisFirehoseDestination"]]],
 "AWS::ACMPCA::Certificate"
 [:map
  ["Type" [:= "AWS::ACMPCA::Certificate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CertificateAuthorityArn" {:optional true} [:ref "String"]]
    ["CertificateSigningRequest" {:optional true} [:ref "String"]]
    ["SigningAlgorithm" {:optional true} [:ref "String"]]
    ["TemplateArn" {:optional true} [:ref "String"]]
    ["Validity"
     {:optional true}
     [:ref "AWS::ACMPCA::Certificate.Validity"]]]]],
 "AWS::MediaLive::Channel.TimecodeConfig"
 [:map
  {:closed :true}
  ["SyncThreshold" {:optional true} [:ref "Integer"]]
  ["Source" {:optional true} [:ref "String"]]],
 "AWS::SecretsManager::Secret"
 [:map
  ["Type" [:= "AWS::SecretsManager::Secret"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["SecretString" {:optional true} [:ref "String"]]
    ["GenerateSecretString"
     {:optional true}
     [:ref "AWS::SecretsManager::Secret.GenerateSecretString"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::IoT::Thing"
 [:map
  ["Type" [:= "AWS::IoT::Thing"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AttributePayload"
     {:optional true}
     [:ref "AWS::IoT::Thing.AttributePayload"]]
    ["ThingName" {:optional true} [:ref "String"]]]]],
 "AWS::MSK::Cluster.S3"
 [:map
  {:closed :true}
  ["Bucket" {:optional true} [:ref "String"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["Prefix" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::OriginRequestPolicy.HeadersConfig"
 [:map
  {:closed :true}
  ["HeaderBehavior" {:optional true} [:ref "String"]]
  ["Headers" {:optional true} [:ref "StringList"]]],
 "AWS::MediaLive::Channel.AudioOnlyHlsSettings"
 [:map
  {:closed :true}
  ["SegmentType" {:optional true} [:ref "String"]]
  ["AudioTrackType" {:optional true} [:ref "String"]]
  ["AudioOnlyImage"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.InputLocation"]]
  ["AudioGroupId" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::Listener.TargetGroupTuple"
 [:map
  {:closed :true}
  ["TargetGroupArn" {:optional true} [:ref "String"]]
  ["Weight" {:optional true} [:ref "Integer"]]],
 "AWS::AutoScaling::LaunchConfiguration"
 [:map
  ["Type" [:= "AWS::AutoScaling::LaunchConfiguration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PlacementTenancy" {:optional true} [:ref "String"]]
    ["ImageId" {:optional true} [:ref "String"]]
    ["UserData" {:optional true} [:ref "String"]]
    ["InstanceId" {:optional true} [:ref "String"]]
    ["InstanceType" {:optional true} [:ref "String"]]
    ["ClassicLinkVPCSecurityGroups"
     {:optional true}
     [:ref "StringList"]]
    ["EbsOptimized" {:optional true} [:ref "Boolean"]]
    ["KernelId" {:optional true} [:ref "String"]]
    ["InstanceMonitoring" {:optional true} [:ref "Boolean"]]
    ["KeyName" {:optional true} [:ref "String"]]
    ["AssociatePublicIpAddress" {:optional true} [:ref "Boolean"]]
    ["SecurityGroups" {:optional true} [:ref "StringList"]]
    ["ClassicLinkVPCId" {:optional true} [:ref "String"]]
    ["IamInstanceProfile" {:optional true} [:ref "String"]]
    ["BlockDeviceMappings"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::AutoScaling::LaunchConfiguration.BlockDeviceMapping"]]
      "Fn::If"]]
    ["RamDiskId" {:optional true} [:ref "String"]]
    ["SpotPrice" {:optional true} [:ref "String"]]
    ["LaunchConfigurationName" {:optional true} [:ref "String"]]]]],
 "AWS::Greengrass::SubscriptionDefinitionVersion"
 [:map
  ["Type" [:= "AWS::Greengrass::SubscriptionDefinitionVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SubscriptionDefinitionId" {:optional true} [:ref "String"]]
    ["Subscriptions"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::Greengrass::SubscriptionDefinitionVersion.Subscription"]]
      "Fn::If"]]]]],
 "AWS::MSK::Cluster.BrokerLogs"
 [:map
  {:closed :true}
  ["S3" {:optional true} [:ref "AWS::MSK::Cluster.S3"]]
  ["Firehose" {:optional true} [:ref "AWS::MSK::Cluster.Firehose"]]
  ["CloudWatchLogs"
   {:optional true}
   [:ref "AWS::MSK::Cluster.CloudWatchLogs"]]],
 "AWS::QLDB::Ledger"
 [:map
  ["Type" [:= "AWS::QLDB::Ledger"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PermissionsMode" {:optional true} [:ref "String"]]
    ["DeletionProtection" {:optional true} [:ref "Boolean"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.MsSmoothOutputSettings"
 [:map
  {:closed :true}
  ["NameModifier" {:optional true} [:ref "String"]]
  ["H265PackagingType" {:optional true} [:ref "String"]]],
 "AWS::Events::Rule.SqsParameters"
 [:map
  {:closed :true}
  ["MessageGroupId" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::PushTemplate.AndroidPushNotificationTemplate"
 [:map
  {:closed :true}
  ["Action" {:optional true} [:ref "String"]]
  ["ImageUrl" {:optional true} [:ref "String"]]
  ["SmallImageIconUrl" {:optional true} [:ref "String"]]
  ["Title" {:optional true} [:ref "String"]]
  ["ImageIconUrl" {:optional true} [:ref "String"]]
  ["Sound" {:optional true} [:ref "String"]]
  ["Body" {:optional true} [:ref "String"]]
  ["Url" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.OneDriveUsers"
 [:map
  {:closed :true}
  ["OneDriveUserList"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.OneDriveUserList"]]
  ["OneDriveUserS3Path"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.S3Path"]]],
 "AWS::Config::OrganizationConfigRule.OrganizationManagedRuleMetadata"
 [:map
  {:closed :true}
  ["TagKeyScope" {:optional true} [:ref "String"]]
  ["TagValueScope" {:optional true} [:ref "String"]]
  ["Description" {:optional true} [:ref "String"]]
  ["ResourceIdScope" {:optional true} [:ref "String"]]
  ["RuleIdentifier" {:optional true} [:ref "String"]]
  ["ResourceTypesScope" {:optional true} [:ref "StringList"]]
  ["MaximumExecutionFrequency" {:optional true} [:ref "String"]]
  ["InputParameters" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::Route.GrpcRoute"
 [:map
  {:closed :true}
  ["Action"
   {:optional true}
   [:ref "AWS::AppMesh::Route.GrpcRouteAction"]]
  ["Timeout" {:optional true} [:ref "AWS::AppMesh::Route.GrpcTimeout"]]
  ["RetryPolicy"
   {:optional true}
   [:ref "AWS::AppMesh::Route.GrpcRetryPolicy"]]
  ["Match"
   {:optional true}
   [:ref "AWS::AppMesh::Route.GrpcRouteMatch"]]],
 "AWS::KinesisFirehose::DeliveryStream.HttpEndpointCommonAttribute"
 [:map
  {:closed :true}
  ["AttributeName" {:optional true} [:ref "String"]]
  ["AttributeValue" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.ScalingAction"
 [:map
  {:closed :true}
  ["Market" {:optional true} [:ref "String"]]
  ["SimpleScalingPolicyConfiguration"
   {:optional true}
   [:ref "AWS::EMR::Cluster.SimpleScalingPolicyConfiguration"]]],
 "AWS::ElasticBeanstalk::ConfigurationTemplate"
 [:map
  ["Type" [:= "AWS::ElasticBeanstalk::ConfigurationTemplate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["EnvironmentId" {:optional true} [:ref "String"]]
    ["OptionSettings"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ElasticBeanstalk::ConfigurationTemplate.ConfigurationOptionSetting"]]
      "Fn::If"]]
    ["PlatformArn" {:optional true} [:ref "String"]]
    ["SolutionStackName" {:optional true} [:ref "String"]]
    ["SourceConfiguration"
     {:optional true}
     [:ref
      "AWS::ElasticBeanstalk::ConfigurationTemplate.SourceConfiguration"]]]]],
 "AWS::IoT::TopicRule.DynamoDBv2Action"
 [:map
  {:closed :true}
  ["PutItem"
   {:optional true}
   [:ref "AWS::IoT::TopicRule.PutItemInput"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPool.NumberAttributeConstraints"
 [:map
  {:closed :true}
  ["MinValue" {:optional true} [:ref "String"]]
  ["MaxValue" {:optional true} [:ref "String"]]],
 "AWS::CodeDeploy::Application"
 [:map
  ["Type" [:= "AWS::CodeDeploy::Application"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["ComputePlatform" {:optional true} [:ref "String"]]]]],
 "AWS::Backup::BackupPlan.BackupPlanResourceType"
 [:map
  {:closed :true}
  ["BackupPlanName" {:optional true} [:ref "String"]]
  ["BackupPlanRule"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Backup::BackupPlan.BackupRuleResourceType"]]
    "Fn::If"]]],
 "AWS::EC2::Instance.CreditSpecification"
 [:map
  {:closed :true}
  ["CPUCredits" {:optional true} [:ref "String"]]],
 "AWS::EC2::SecurityGroup.Egress"
 [:map
  {:closed :true}
  ["CidrIp" {:optional true} [:ref "String"]]
  ["CidrIpv6" {:optional true} [:ref "String"]]
  ["Description" {:optional true} [:ref "String"]]
  ["DestinationPrefixListId" {:optional true} [:ref "String"]]
  ["DestinationSecurityGroupId" {:optional true} [:ref "String"]]
  ["FromPort" {:optional true} [:ref "Integer"]]
  ["IpProtocol" {:optional true} [:ref "String"]]
  ["ToPort" {:optional true} [:ref "Integer"]]],
 "AWS::EMR::InstanceGroupConfig.EbsBlockDeviceConfig"
 [:map
  {:closed :true}
  ["VolumeSpecification"
   {:optional true}
   [:ref "AWS::EMR::InstanceGroupConfig.VolumeSpecification"]]
  ["VolumesPerInstance" {:optional true} [:ref "Integer"]]],
 "AWS::AppStream::Stack"
 [:map
  ["Type" [:= "AWS::AppStream::Stack"]]
  ["Properties"
   [:map
    {:closed :true}
    ["StorageConnectors"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::AppStream::Stack.StorageConnector"]]
      "Fn::If"]]
    ["ApplicationSettings"
     {:optional true}
     [:ref "AWS::AppStream::Stack.ApplicationSettings"]]
    ["EmbedHostDomains" {:optional true} [:ref "StringList"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["FeedbackURL" {:optional true} [:ref "String"]]
    ["UserSettings"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::AppStream::Stack.UserSetting"]]
      "Fn::If"]]
    ["DisplayName" {:optional true} [:ref "String"]]
    ["RedirectURL" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["DeleteStorageConnectors" {:optional true} [:ref "Boolean"]]
    ["Description" {:optional true} [:ref "String"]]
    ["AccessEndpoints"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::AppStream::Stack.AccessEndpoint"]]
      "Fn::If"]]
    ["AttributesToDelete" {:optional true} [:ref "StringList"]]]]],
 "AWS::Route53::RecordSetGroup.AliasTarget"
 [:map
  {:closed :true}
  ["DNSName" {:optional true} [:ref "String"]]
  ["EvaluateTargetHealth" {:optional true} [:ref "Boolean"]]
  ["HostedZoneId" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.ScalingConstraints"
 [:map
  {:closed :true}
  ["MaxCapacity" {:optional true} [:ref "Integer"]]
  ["MinCapacity" {:optional true} [:ref "Integer"]]],
 "AWS::SSM::MaintenanceWindowTask.LoggingInfo"
 [:map
  {:closed :true}
  ["S3Bucket" {:optional true} [:ref "String"]]
  ["Region" {:optional true} [:ref "String"]]
  ["S3Prefix" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Dataset.GlueConfiguration"
 [:map
  {:closed :true}
  ["TableName" {:optional true} [:ref "String"]]
  ["DatabaseName" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.OutputLocationRef"
 [:map
  {:closed :true}
  ["DestinationRefId" {:optional true} [:ref "String"]]],
 "AWS::FMS::Policy.ResourceTag"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.InstanceGroupConfig"
 [:map
  {:closed :true}
  ["AutoScalingPolicy"
   {:optional true}
   [:ref "AWS::EMR::Cluster.AutoScalingPolicy"]]
  ["BidPrice" {:optional true} [:ref "String"]]
  ["Configurations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::Cluster.Configuration"]]
    "Fn::If"]]
  ["EbsConfiguration"
   {:optional true}
   [:ref "AWS::EMR::Cluster.EbsConfiguration"]]
  ["InstanceCount" {:optional true} [:ref "Integer"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["Market" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.TagList"
 [:map
  {:closed :true}
  ["TagList"
   {:optional true}
   [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::RoboMaker::Robot"
 [:map
  ["Type" [:= "AWS::RoboMaker::Robot"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Fleet" {:optional true} [:ref "String"]]
    ["Architecture" {:optional true} [:ref "String"]]
    ["GreengrassGroupId" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::VPCPeeringConnection"
 [:map
  ["Type" [:= "AWS::EC2::VPCPeeringConnection"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PeerOwnerId" {:optional true} [:ref "String"]]
    ["PeerRegion" {:optional true} [:ref "String"]]
    ["PeerRoleArn" {:optional true} [:ref "String"]]
    ["PeerVpcId" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::CodeBuild::Project.WebhookFilter"
 [:map
  {:closed :true}
  ["Pattern" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["ExcludeMatchedPattern" {:optional true} [:ref "Boolean"]]],
 "AWS::ServiceDiscovery::PublicDnsNamespace"
 [:map
  ["Type" [:= "AWS::ServiceDiscovery::PublicDnsNamespace"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::IoTThingsGraph::FlowTemplate"
 [:map
  ["Type" [:= "AWS::IoTThingsGraph::FlowTemplate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CompatibleNamespaceVersion" {:optional true} [:ref "Double"]]
    ["Definition"
     {:optional true}
     [:ref "AWS::IoTThingsGraph::FlowTemplate.DefinitionDocument"]]]]],
 "AWS::IoTAnalytics::Dataset.Variable"
 [:map
  {:closed :true}
  ["DatasetContentVersionValue"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Dataset.DatasetContentVersionValue"]]
  ["DoubleValue" {:optional true} [:ref "Double"]]
  ["OutputFileUriValue"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Dataset.OutputFileUriValue"]]
  ["VariableName" {:optional true} [:ref "String"]]
  ["StringValue" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::Application"
 [:map
  ["Type" [:= "AWS::KinesisAnalytics::Application"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["Inputs"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::KinesisAnalytics::Application.Input"]]
      "Fn::If"]]
    ["ApplicationDescription" {:optional true} [:ref "String"]]
    ["ApplicationCode" {:optional true} [:ref "String"]]]]],
 "AWS::Lambda::LayerVersion.Content"
 [:map
  {:closed :true}
  ["S3ObjectVersion" {:optional true} [:ref "String"]]
  ["S3Bucket" {:optional true} [:ref "String"]]
  ["S3Key" {:optional true} [:ref "String"]]],
 "AWS::StepFunctions::Activity.TagsEntry"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPool.UsernameConfiguration"
 [:map
  {:closed :true}
  ["CaseSensitive" {:optional true} [:ref "Boolean"]]],
 "AWS::EC2::NetworkInterfacePermission"
 [:map
  ["Type" [:= "AWS::EC2::NetworkInterfacePermission"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AwsAccountId" {:optional true} [:ref "String"]]
    ["NetworkInterfaceId" {:optional true} [:ref "String"]]
    ["Permission" {:optional true} [:ref "String"]]]]],
 "AWS::Route53Resolver::ResolverQueryLoggingConfig"
 [:map
  ["Type" [:= "AWS::Route53Resolver::ResolverQueryLoggingConfig"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["DestinationArn" {:optional true} [:ref "String"]]]]],
 "AWS::WAFRegional::ByteMatchSet"
 [:map
  ["Type" [:= "AWS::WAFRegional::ByteMatchSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ByteMatchTuples"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::WAFRegional::ByteMatchSet.ByteMatchTuple"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::LaunchTemplate.Monitoring"
 [:map {:closed :true} ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::S3::Bucket.SourceSelectionCriteria"
 [:map
  {:closed :true}
  ["SseKmsEncryptedObjects"
   {:optional true}
   [:ref "AWS::S3::Bucket.SseKmsEncryptedObjects"]]],
 "AWS::IoTAnalytics::Dataset.S3DestinationConfiguration"
 [:map
  {:closed :true}
  ["GlueConfiguration"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Dataset.GlueConfiguration"]]
  ["Bucket" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.HostEntry"
 [:map
  {:closed :true}
  ["Hostname" {:optional true} [:ref "String"]]
  ["IpAddress" {:optional true} [:ref "String"]]],
 "AWS::GroundStation::MissionProfile"
 [:map
  ["Type" [:= "AWS::GroundStation::MissionProfile"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["ContactPrePassDurationSeconds" {:optional true} [:ref "Integer"]]
    ["ContactPostPassDurationSeconds"
     {:optional true}
     [:ref "Integer"]]
    ["MinimumViableContactDurationSeconds"
     {:optional true}
     [:ref "Integer"]]
    ["DataflowEdges"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::GroundStation::MissionProfile.DataflowEdge"]]
      "Fn::If"]]
    ["TrackingConfigArn" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::AppMesh::Route.GrpcRetryPolicy"
 [:map
  {:closed :true}
  ["MaxRetries" {:optional true} [:ref "Integer"]]
  ["PerRetryTimeout"
   {:optional true}
   [:ref "AWS::AppMesh::Route.Duration"]]
  ["GrpcRetryEvents" {:optional true} [:ref "StringList"]]
  ["HttpRetryEvents" {:optional true} [:ref "StringList"]]
  ["TcpRetryEvents" {:optional true} [:ref "StringList"]]],
 "AWS::S3::Bucket.ReplicationRule"
 [:map
  {:closed :true}
  ["DeleteMarkerReplication"
   {:optional true}
   [:ref "AWS::S3::Bucket.DeleteMarkerReplication"]]
  ["Destination"
   {:optional true}
   [:ref "AWS::S3::Bucket.ReplicationDestination"]]
  ["Filter"
   {:optional true}
   [:ref "AWS::S3::Bucket.ReplicationRuleFilter"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Prefix" {:optional true} [:ref "String"]]
  ["Priority" {:optional true} [:ref "Integer"]]
  ["SourceSelectionCriteria"
   {:optional true}
   [:ref "AWS::S3::Bucket.SourceSelectionCriteria"]]
  ["Status" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.RuleGroupReferenceStatement"
 [:map
  {:closed :true}
  ["Arn" {:optional true} [:ref "String"]]
  ["ExcludedRules"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.ExcludedRule"]]
    "Fn::If"]]],
 "AWS::Amplify::App.AutoBranchCreationConfig"
 [:map
  {:closed :true}
  ["PullRequestEnvironmentName" {:optional true} [:ref "String"]]
  ["BuildSpec" {:optional true} [:ref "String"]]
  ["Stage" {:optional true} [:ref "String"]]
  ["AutoBranchCreationPatterns" {:optional true} [:ref "StringList"]]
  ["EnableAutoBuild" {:optional true} [:ref "Boolean"]]
  ["BasicAuthConfig"
   {:optional true}
   [:ref "AWS::Amplify::App.BasicAuthConfig"]]
  ["EnvironmentVariables"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Amplify::App.EnvironmentVariable"]]
    "Fn::If"]]
  ["EnableAutoBranchCreation" {:optional true} [:ref "Boolean"]]
  ["EnablePullRequestPreview" {:optional true} [:ref "Boolean"]]],
 "AWS::IoT::TopicRule.HttpActionHeader"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::ClientCertificate"
 [:map
  ["Type" [:= "AWS::ApiGateway::ClientCertificate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::CodePipeline::Pipeline.StageTransition"
 [:map
  {:closed :true}
  ["Reason" {:optional true} [:ref "String"]]
  ["StageName" {:optional true} [:ref "String"]]],
 "AWS::GuardDuty::Detector.CFNDataSourceConfigurations"
 [:map
  {:closed :true}
  ["S3Logs"
   {:optional true}
   [:ref "AWS::GuardDuty::Detector.CFNS3LogsConfiguration"]]],
 "AWS::ApiGateway::Deployment.CanarySetting"
 [:map
  {:closed :true}
  ["PercentTraffic" {:optional true} [:ref "Double"]]
  ["StageVariableOverrides" {:optional true} [:ref "StringMap"]]
  ["UseStageCache" {:optional true} [:ref "Boolean"]]],
 "AWS::Kendra::DataSource.DatabaseConfiguration"
 [:map
  {:closed :true}
  ["DatabaseEngineType" {:optional true} [:ref "String"]]
  ["ConnectionConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.ConnectionConfiguration"]]
  ["VpcConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.DataSourceVpcConfiguration"]]
  ["ColumnConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.ColumnConfiguration"]]
  ["AclConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.AclConfiguration"]]
  ["SqlConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.SqlConfiguration"]]],
 "AWS::PinpointEmail::Identity.Tags"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::EC2::SpotFleet.PrivateIpAddressSpecification"
 [:map
  {:closed :true}
  ["Primary" {:optional true} [:ref "Boolean"]]
  ["PrivateIpAddress" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::Deployment"
 [:map
  ["Type" [:= "AWS::ApiGateway::Deployment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DeploymentCanarySettings"
     {:optional true}
     [:ref "AWS::ApiGateway::Deployment.DeploymentCanarySettings"]]
    ["Description" {:optional true} [:ref "String"]]
    ["RestApiId" {:optional true} [:ref "String"]]
    ["StageDescription"
     {:optional true}
     [:ref "AWS::ApiGateway::Deployment.StageDescription"]]
    ["StageName" {:optional true} [:ref "String"]]]]],
 "AWS::Glue::Partition.PartitionInput"
 [:map
  {:closed :true}
  ["Parameters" {:optional true} [:ref "Json"]]
  ["StorageDescriptor"
   {:optional true}
   [:ref "AWS::Glue::Partition.StorageDescriptor"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::Batch::JobDefinition.Device"
 [:map
  {:closed :true}
  ["HostPath" {:optional true} [:ref "String"]]
  ["Permissions" {:optional true} [:ref "StringList"]]
  ["ContainerPath" {:optional true} [:ref "String"]]],
 "AWS::EC2::TransitGatewayRoute"
 [:map
  ["Type" [:= "AWS::EC2::TransitGatewayRoute"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TransitGatewayRouteTableId" {:optional true} [:ref "String"]]
    ["DestinationCidrBlock" {:optional true} [:ref "String"]]
    ["Blackhole" {:optional true} [:ref "Boolean"]]
    ["TransitGatewayAttachmentId" {:optional true} [:ref "String"]]]]],
 "AWS::DMS::Endpoint.MongoDbSettings"
 [:map
  {:closed :true}
  ["Port" {:optional true} [:ref "Integer"]]
  ["ServerName" {:optional true} [:ref "String"]]
  ["ExtractDocId" {:optional true} [:ref "String"]]
  ["AuthMechanism" {:optional true} [:ref "String"]]
  ["NestingLevel" {:optional true} [:ref "String"]]
  ["AuthType" {:optional true} [:ref "String"]]
  ["DocsToInvestigate" {:optional true} [:ref "String"]]
  ["Password" {:optional true} [:ref "String"]]
  ["Username" {:optional true} [:ref "String"]]
  ["DatabaseName" {:optional true} [:ref "String"]]
  ["AuthSource" {:optional true} [:ref "String"]]],
 "AWS::EC2::Instance.SsmAssociation"
 [:map
  {:closed :true}
  ["AssociationParameters"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::Instance.AssociationParameter"]]
    "Fn::If"]]
  ["DocumentName" {:optional true} [:ref "String"]]],
 "AWS::EC2::TrafficMirrorFilter"
 [:map
  ["Type" [:= "AWS::EC2::TrafficMirrorFilter"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["NetworkServices" {:optional true} [:ref "StringList"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::MediaLive::Channel.StandardHlsSettings"
 [:map
  {:closed :true}
  ["AudioRenditionSets" {:optional true} [:ref "String"]]
  ["M3u8Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.M3u8Settings"]]],
 "AWS::ElastiCache::CacheCluster"
 [:map
  ["Type" [:= "AWS::ElastiCache::CacheCluster"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CacheNodeType" {:optional true} [:ref "String"]]
    ["Port" {:optional true} [:ref "Integer"]]
    ["CacheSubnetGroupName" {:optional true} [:ref "String"]]
    ["AutoMinorVersionUpgrade" {:optional true} [:ref "Boolean"]]
    ["CacheSecurityGroupNames" {:optional true} [:ref "StringList"]]
    ["ClusterName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["PreferredAvailabilityZone" {:optional true} [:ref "String"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["NumCacheNodes" {:optional true} [:ref "Integer"]]
    ["SnapshotArns" {:optional true} [:ref "StringList"]]
    ["CacheParameterGroupName" {:optional true} [:ref "String"]]
    ["PreferredAvailabilityZones" {:optional true} [:ref "StringList"]]
    ["SnapshotName" {:optional true} [:ref "String"]]
    ["SnapshotRetentionLimit" {:optional true} [:ref "Integer"]]
    ["EngineVersion" {:optional true} [:ref "String"]]
    ["VpcSecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["NotificationTopicArn" {:optional true} [:ref "String"]]
    ["SnapshotWindow" {:optional true} [:ref "String"]]
    ["AZMode" {:optional true} [:ref "String"]]
    ["Engine" {:optional true} [:ref "String"]]]]],
 "AWS::PinpointEmail::Identity"
 [:map
  ["Type" [:= "AWS::PinpointEmail::Identity"]]
  ["Properties"
   [:map
    {:closed :true}
    ["FeedbackForwardingEnabled" {:optional true} [:ref "Boolean"]]
    ["DkimSigningEnabled" {:optional true} [:ref "Boolean"]]
    ["Tags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::PinpointEmail::Identity.Tags"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]
    ["MailFromAttributes"
     {:optional true}
     [:ref "AWS::PinpointEmail::Identity.MailFromAttributes"]]]]],
 "AWS::Pinpoint::Segment.Location"
 [:map
  {:closed :true}
  ["GPSPoint"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.GPSPoint"]]
  ["Country"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.SetDimension"]]],
 "AWS::SES::ConfigurationSetEventDestination.CloudWatchDestination"
 [:map
  {:closed :true}
  ["DimensionConfigurations"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::SES::ConfigurationSetEventDestination.DimensionConfiguration"]]
    "Fn::If"]]],
 "AWS::AutoScaling::AutoScalingGroup.MixedInstancesPolicy"
 [:map
  {:closed :true}
  ["InstancesDistribution"
   {:optional true}
   [:ref "AWS::AutoScaling::AutoScalingGroup.InstancesDistribution"]]
  ["LaunchTemplate"
   {:optional true}
   [:ref "AWS::AutoScaling::AutoScalingGroup.LaunchTemplate"]]],
 "AWS::Elasticsearch::Domain.EBSOptions"
 [:map
  {:closed :true}
  ["EBSEnabled" {:optional true} [:ref "Boolean"]]
  ["Iops" {:optional true} [:ref "Integer"]]
  ["VolumeSize" {:optional true} [:ref "Integer"]]
  ["VolumeType" {:optional true} [:ref "String"]]],
 "AWS::Neptune::DBInstance"
 [:map
  ["Type" [:= "AWS::Neptune::DBInstance"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["DBClusterIdentifier" {:optional true} [:ref "String"]]
    ["AutoMinorVersionUpgrade" {:optional true} [:ref "Boolean"]]
    ["DBInstanceClass" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["DBParameterGroupName" {:optional true} [:ref "String"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["AllowMajorVersionUpgrade" {:optional true} [:ref "Boolean"]]
    ["DBSubnetGroupName" {:optional true} [:ref "String"]]
    ["DBInstanceIdentifier" {:optional true} [:ref "String"]]
    ["DBSnapshotIdentifier" {:optional true} [:ref "String"]]]]],
 "AWS::ECS::TaskSet.NetworkConfiguration"
 [:map
  {:closed :true}
  ["AwsVpcConfiguration"
   {:optional true}
   [:ref "AWS::ECS::TaskSet.AwsVpcConfiguration"]]],
 "AWS::CodeBuild::SourceCredential"
 [:map
  ["Type" [:= "AWS::CodeBuild::SourceCredential"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ServerType" {:optional true} [:ref "String"]]
    ["Username" {:optional true} [:ref "String"]]
    ["Token" {:optional true} [:ref "String"]]
    ["AuthType" {:optional true} [:ref "String"]]]]],
 "AWS::WAFv2::RuleGroup.XssMatchStatement"
 [:map
  {:closed :true}
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.FieldToMatch"]]
  ["TextTransformations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::RuleGroup.TextTransformation"]]
    "Fn::If"]]],
 "AWS::Lambda::Function.FileSystemConfig"
 [:map
  {:closed :true}
  ["Arn" {:optional true} [:ref "String"]]
  ["LocalMountPath" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.Rec709Settings" [:map {:closed :true}],
 "AWS::EC2::SpotFleet.LaunchTemplateConfig"
 [:map
  {:closed :true}
  ["LaunchTemplateSpecification"
   {:optional true}
   [:ref "AWS::EC2::SpotFleet.FleetLaunchTemplateSpecification"]]
  ["Overrides"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::SpotFleet.LaunchTemplateOverrides"]]
    "Fn::If"]]],
 "AWS::CodeBuild::Project.ProjectCache"
 [:map
  {:closed :true}
  ["Modes" {:optional true} [:ref "StringList"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Location" {:optional true} [:ref "String"]]],
 "AWS::EC2::Instance.LaunchTemplateSpecification"
 [:map
  {:closed :true}
  ["LaunchTemplateId" {:optional true} [:ref "String"]]
  ["LaunchTemplateName" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]],
 "AWS::KMS::Key"
 [:map
  ["Type" [:= "AWS::KMS::Key"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["EnableKeyRotation" {:optional true} [:ref "Boolean"]]
    ["KeyPolicy" {:optional true} [:ref "Unknown"]]
    ["KeyUsage" {:optional true} [:ref "String"]]
    ["PendingWindowInDays" {:optional true} [:ref "Integer"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::ElasticLoadBalancingV2::LoadBalancer"
 [:map
  ["Type" [:= "AWS::ElasticLoadBalancingV2::LoadBalancer"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Subnets" {:optional true} [:ref "StringList"]]
    ["SubnetMappings"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ElasticLoadBalancingV2::LoadBalancer.SubnetMapping"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["IpAddressType" {:optional true} [:ref "String"]]
    ["SecurityGroups" {:optional true} [:ref "StringList"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]
    ["Scheme" {:optional true} [:ref "String"]]
    ["LoadBalancerAttributes"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ElasticLoadBalancingV2::LoadBalancer.LoadBalancerAttribute"]]
      "Fn::If"]]]]],
 "AWS::MediaConvert::Preset"
 [:map
  ["Type" [:= "AWS::MediaConvert::Preset"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Category" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["SettingsJson" {:optional true} [:ref "Json"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::OpsWorks::Volume"
 [:map
  ["Type" [:= "AWS::OpsWorks::Volume"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Ec2VolumeId" {:optional true} [:ref "String"]]
    ["MountPoint" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["StackId" {:optional true} [:ref "String"]]]]],
 "AWS::SageMaker::MonitoringSchedule.S3Output"
 [:map
  {:closed :true}
  ["LocalPath" {:optional true} [:ref "String"]]
  ["S3UploadMode" {:optional true} [:ref "String"]]
  ["S3Uri" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Pipeline.Lambda"
 [:map
  {:closed :true}
  ["BatchSize" {:optional true} [:ref "Integer"]]
  ["Next" {:optional true} [:ref "String"]]
  ["LambdaName" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.OrcSerDe"
 [:map
  {:closed :true}
  ["StripeSizeBytes" {:optional true} [:ref "Integer"]]
  ["Compression" {:optional true} [:ref "String"]]
  ["BloomFilterFalsePositiveProbability"
   {:optional true}
   [:ref "Double"]]
  ["DictionaryKeyThreshold" {:optional true} [:ref "Double"]]
  ["RowIndexStride" {:optional true} [:ref "Integer"]]
  ["PaddingTolerance" {:optional true} [:ref "Double"]]
  ["BlockSizeBytes" {:optional true} [:ref "Integer"]]
  ["EnablePadding" {:optional true} [:ref "Boolean"]]
  ["BloomFilterColumns" {:optional true} [:ref "StringList"]]
  ["FormatVersion" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.FrameCaptureSettings"
 [:map
  {:closed :true}
  ["CaptureInterval" {:optional true} [:ref "Integer"]]
  ["CaptureIntervalUnits" {:optional true} [:ref "String"]]],
 "AWS::Transfer::User.HomeDirectoryMapEntry"
 [:map
  {:closed :true}
  ["Entry" {:optional true} [:ref "String"]]
  ["Target" {:optional true} [:ref "String"]]],
 "AWS::Redshift::ClusterSecurityGroupIngress"
 [:map
  ["Type" [:= "AWS::Redshift::ClusterSecurityGroupIngress"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CIDRIP" {:optional true} [:ref "String"]]
    ["ClusterSecurityGroupName" {:optional true} [:ref "String"]]
    ["EC2SecurityGroupName" {:optional true} [:ref "String"]]
    ["EC2SecurityGroupOwnerId" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::VPNGateway"
 [:map
  ["Type" [:= "AWS::EC2::VPNGateway"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AmazonSideAsn" {:optional true} [:ref "Long"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Type" {:optional true} [:ref "String"]]]]],
 "AWS::Synthetics::Canary.RunConfig"
 [:map
  {:closed :true}
  ["TimeoutInSeconds" {:optional true} [:ref "Integer"]]
  ["MemoryInMB" {:optional true} [:ref "Integer"]]],
 "AWS::EC2::ClientVpnEndpoint.ConnectionLogOptions"
 [:map
  {:closed :true}
  ["CloudwatchLogStream" {:optional true} [:ref "String"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["CloudwatchLogGroup" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.HealthCheck"
 [:map
  {:closed :true}
  ["Command" {:optional true} [:ref "StringList"]]
  ["Interval" {:optional true} [:ref "Integer"]]
  ["Timeout" {:optional true} [:ref "Integer"]]
  ["Retries" {:optional true} [:ref "Integer"]]
  ["StartPeriod" {:optional true} [:ref "Integer"]]],
 "AWS::PinpointEmail::Identity.MailFromAttributes"
 [:map
  {:closed :true}
  ["MailFromDomain" {:optional true} [:ref "String"]]
  ["BehaviorOnMxFailure" {:optional true} [:ref "String"]]],
 "AWS::Kendra::Index.DocumentMetadataConfigurationList"
 [:map
  {:closed :true}
  ["DocumentMetadataConfigurationList"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Kendra::Index.DocumentMetadataConfiguration"]]
    "Fn::If"]]],
 "AWS::StepFunctions::StateMachine"
 [:map
  ["Type" [:= "AWS::StepFunctions::StateMachine"]]
  ["Properties"
   [:map
    {:closed :true}
    ["StateMachineName" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::StepFunctions::StateMachine.TagsEntry"]]
      "Fn::If"]]
    ["TracingConfiguration"
     {:optional true}
     [:ref "AWS::StepFunctions::StateMachine.TracingConfiguration"]]
    ["DefinitionSubstitutions"
     {:optional true}
     [:ref "AWS::StepFunctions::StateMachine.DefinitionSubstitutions"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["DefinitionS3Location"
     {:optional true}
     [:ref "AWS::StepFunctions::StateMachine.S3Location"]]
    ["DefinitionString" {:optional true} [:ref "String"]]
    ["LoggingConfiguration"
     {:optional true}
     [:ref "AWS::StepFunctions::StateMachine.LoggingConfiguration"]]
    ["StateMachineType" {:optional true} [:ref "String"]]]]],
 "AWS::LakeFormation::DataLakeSettings.DataLakePrincipal"
 [:map
  {:closed :true}
  ["DataLakePrincipalIdentifier" {:optional true} [:ref "String"]]],
 "AWS::StepFunctions::StateMachine.CloudWatchLogsLogGroup"
 [:map
  {:closed :true}
  ["LogGroupArn" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::MonitoringSchedule.MonitoringOutputConfig"
 [:map
  {:closed :true}
  ["KmsKeyId" {:optional true} [:ref "String"]]
  ["MonitoringOutputs"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::SageMaker::MonitoringSchedule.MonitoringOutput"]]
    "Fn::If"]]],
 "AWS::WAF::ByteMatchSet.FieldToMatch"
 [:map
  {:closed :true}
  ["Data" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::DLM::LifecyclePolicy.CrossRegionCopyRule"
 [:map
  {:closed :true}
  ["TargetRegion" {:optional true} [:ref "String"]]
  ["Encrypted" {:optional true} [:ref "Boolean"]]
  ["CmkArn" {:optional true} [:ref "String"]]
  ["RetainRule"
   {:optional true}
   [:ref "AWS::DLM::LifecyclePolicy.CrossRegionCopyRetainRule"]]
  ["CopyTags" {:optional true} [:ref "Boolean"]]],
 "AWS::KinesisAnalyticsV2::Application.MappingParameters"
 [:map
  {:closed :true}
  ["JSONMappingParameters"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::Application.JSONMappingParameters"]]
  ["CSVMappingParameters"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::Application.CSVMappingParameters"]]],
 "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.RecordFormat"
 [:map
  {:closed :true}
  ["MappingParameters"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.MappingParameters"]]
  ["RecordFormatType" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.StatementTwo"
 [:map
  {:closed :true}
  ["NotStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.NotStatementTwo"]]
  ["SqliMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.SqliMatchStatement"]]
  ["OrStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.OrStatementTwo"]]
  ["SizeConstraintStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.SizeConstraintStatement"]]
  ["XssMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.XssMatchStatement"]]
  ["IPSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.IPSetReferenceStatement"]]
  ["RegexPatternSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.RegexPatternSetReferenceStatement"]]
  ["AndStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.AndStatementTwo"]]
  ["ByteMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.ByteMatchStatement"]]
  ["RateBasedStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.RateBasedStatementTwo"]]
  ["GeoMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.GeoMatchStatement"]]],
 "AWS::ECS::TaskDefinition.Device"
 [:map
  {:closed :true}
  ["ContainerPath" {:optional true} [:ref "String"]]
  ["HostPath" {:optional true} [:ref "String"]]
  ["Permissions" {:optional true} [:ref "StringList"]]],
 "AWS::DAX::ParameterGroup"
 [:map
  ["Type" [:= "AWS::DAX::ParameterGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ParameterNameValues" {:optional true} [:ref "Json"]]
    ["Description" {:optional true} [:ref "String"]]
    ["ParameterGroupName" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.Ac3Settings"
 [:map
  {:closed :true}
  ["CodingMode" {:optional true} [:ref "String"]]
  ["DrcProfile" {:optional true} [:ref "String"]]
  ["MetadataControl" {:optional true} [:ref "String"]]
  ["Dialnorm" {:optional true} [:ref "Integer"]]
  ["LfeFilter" {:optional true} [:ref "String"]]
  ["BitstreamMode" {:optional true} [:ref "String"]]
  ["Bitrate" {:optional true} [:ref "Double"]]],
 "AWS::IoTAnalytics::Dataset"
 [:map
  ["Type" [:= "AWS::IoTAnalytics::Dataset"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Actions"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::IoTAnalytics::Dataset.Action"]]
      "Fn::If"]]
    ["DatasetName" {:optional true} [:ref "String"]]
    ["ContentDeliveryRules"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::IoTAnalytics::Dataset.DatasetContentDeliveryRule"]]
      "Fn::If"]]
    ["Triggers"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::IoTAnalytics::Dataset.Trigger"]]
      "Fn::If"]]
    ["VersioningConfiguration"
     {:optional true}
     [:ref "AWS::IoTAnalytics::Dataset.VersioningConfiguration"]]
    ["RetentionPeriod"
     {:optional true}
     [:ref "AWS::IoTAnalytics::Dataset.RetentionPeriod"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::WAFv2::RuleGroup.RateBasedStatementTwo"
 [:map
  {:closed :true}
  ["Limit" {:optional true} [:ref "Integer"]]
  ["AggregateKeyType" {:optional true} [:ref "String"]]
  ["ScopeDownStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.StatementThree"]]
  ["ForwardedIPConfig"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.ForwardedIPConfiguration"]]],
 "AWS::Glue::Classifier.CsvClassifier"
 [:map
  {:closed :true}
  ["QuoteSymbol" {:optional true} [:ref "String"]]
  ["ContainsHeader" {:optional true} [:ref "String"]]
  ["Delimiter" {:optional true} [:ref "String"]]
  ["Header" {:optional true} [:ref "StringList"]]
  ["AllowSingleColumn" {:optional true} [:ref "Boolean"]]
  ["DisableValueTrimming" {:optional true} [:ref "Boolean"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::DAX::Cluster"
 [:map
  ["Type" [:= "AWS::DAX::Cluster"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SubnetGroupName" {:optional true} [:ref "String"]]
    ["SSESpecification"
     {:optional true}
     [:ref "AWS::DAX::Cluster.SSESpecification"]]
    ["NotificationTopicARN" {:optional true} [:ref "String"]]
    ["ParameterGroupName" {:optional true} [:ref "String"]]
    ["NodeType" {:optional true} [:ref "String"]]
    ["ClusterName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["IAMRoleARN" {:optional true} [:ref "String"]]
    ["AvailabilityZones" {:optional true} [:ref "StringList"]]
    ["Description" {:optional true} [:ref "String"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["ReplicationFactor" {:optional true} [:ref "Integer"]]]]],
 "AWS::EMR::InstanceGroupConfig.ScalingTrigger"
 [:map
  {:closed :true}
  ["CloudWatchAlarmDefinition"
   {:optional true}
   [:ref "AWS::EMR::InstanceGroupConfig.CloudWatchAlarmDefinition"]]],
 "AWS::Inspector::AssessmentTarget"
 [:map
  ["Type" [:= "AWS::Inspector::AssessmentTarget"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AssessmentTargetName" {:optional true} [:ref "String"]]
    ["ResourceGroupArn" {:optional true} [:ref "String"]]]]],
 "AWS::EMR::Cluster.AutoScalingPolicy"
 [:map
  {:closed :true}
  ["Constraints"
   {:optional true}
   [:ref "AWS::EMR::Cluster.ScalingConstraints"]]
  ["Rules"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::Cluster.ScalingRule"]]
    "Fn::If"]]],
 "AWS::SSM::MaintenanceWindowTask.MaintenanceWindowLambdaParameters"
 [:map
  {:closed :true}
  ["ClientContext" {:optional true} [:ref "String"]]
  ["Qualifier" {:optional true} [:ref "String"]]
  ["Payload" {:optional true} [:ref "String"]]],
 "AWS::Route53::RecordSetGroup.GeoLocation"
 [:map
  {:closed :true}
  ["ContinentCode" {:optional true} [:ref "String"]]
  ["CountryCode" {:optional true} [:ref "String"]]
  ["SubdivisionCode" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.HttpEndpointRequestConfiguration"
 [:map
  {:closed :true}
  ["ContentEncoding" {:optional true} [:ref "String"]]
  ["CommonAttributes"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::KinesisFirehose::DeliveryStream.HttpEndpointCommonAttribute"]]
    "Fn::If"]]],
 "AWS::Glue::DataCatalogEncryptionSettings.ConnectionPasswordEncryption"
 [:map
  {:closed :true}
  ["ReturnConnectionPasswordEncrypted"
   {:optional true}
   [:ref "Boolean"]]
  ["KmsKeyId" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::ListenerCertificate"
 [:map
  ["Type" [:= "AWS::ElasticLoadBalancingV2::ListenerCertificate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Certificates"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ElasticLoadBalancingV2::ListenerCertificate.Certificate"]]
      "Fn::If"]]
    ["ListenerArn" {:optional true} [:ref "String"]]]]],
 "AWS::Kendra::Index.ServerSideEncryptionConfiguration"
 [:map {:closed :true} ["KmsKeyId" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::Distribution.S3OriginConfig"
 [:map
  {:closed :true}
  ["OriginAccessIdentity" {:optional true} [:ref "String"]]],
 "AWS::AppSync::DataSource.ElasticsearchConfig"
 [:map
  {:closed :true}
  ["AwsRegion" {:optional true} [:ref "String"]]
  ["Endpoint" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.DynamoDB"
 [:map
  {:closed :true}
  ["HashKeyField" {:optional true} [:ref "String"]]
  ["RangeKeyType" {:optional true} [:ref "String"]]
  ["Operation" {:optional true} [:ref "String"]]
  ["PayloadField" {:optional true} [:ref "String"]]
  ["Payload"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.Payload"]]
  ["HashKeyValue" {:optional true} [:ref "String"]]
  ["HashKeyType" {:optional true} [:ref "String"]]
  ["TableName" {:optional true} [:ref "String"]]
  ["RangeKeyField" {:optional true} [:ref "String"]]
  ["RangeKeyValue" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Segment.SourceSegments"
 [:map
  {:closed :true}
  ["Version" {:optional true} [:ref "Integer"]]
  ["Id" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.FieldToMatch"
 [:map
  {:closed :true}
  ["SingleHeader" {:optional true} [:ref "Json"]]
  ["SingleQueryArgument" {:optional true} [:ref "Json"]]
  ["AllQueryArguments" {:optional true} [:ref "Json"]]
  ["UriPath" {:optional true} [:ref "Json"]]
  ["QueryString" {:optional true} [:ref "Json"]]
  ["Body" {:optional true} [:ref "Json"]]
  ["Method" {:optional true} [:ref "Json"]]],
 "AWS::EC2::Instance.BlockDeviceMapping"
 [:map
  {:closed :true}
  ["DeviceName" {:optional true} [:ref "String"]]
  ["Ebs" {:optional true} [:ref "AWS::EC2::Instance.Ebs"]]
  ["NoDevice" {:optional true} [:ref "AWS::EC2::Instance.NoDevice"]]
  ["VirtualName" {:optional true} [:ref "String"]]],
 "AWS::IoT::TopicRule.IotSiteWiseAction"
 [:map
  {:closed :true}
  ["PutAssetPropertyValueEntries"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::IoT::TopicRule.PutAssetPropertyValueEntry"]]
    "Fn::If"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::OpsWorks::Stack"
 [:map
  ["Type" [:= "AWS::OpsWorks::Stack"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RdsDbInstances"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::OpsWorks::Stack.RdsDbInstance"]]
      "Fn::If"]]
    ["AgentVersion" {:optional true} [:ref "String"]]
    ["ClonePermissions" {:optional true} [:ref "Boolean"]]
    ["CustomJson" {:optional true} [:ref "Json"]]
    ["ChefConfiguration"
     {:optional true}
     [:ref "AWS::OpsWorks::Stack.ChefConfiguration"]]
    ["DefaultRootDeviceType" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["UseCustomCookbooks" {:optional true} [:ref "Boolean"]]
    ["CloneAppIds" {:optional true} [:ref "StringList"]]
    ["SourceStackId" {:optional true} [:ref "String"]]
    ["CustomCookbooksSource"
     {:optional true}
     [:ref "AWS::OpsWorks::Stack.Source"]]
    ["UseOpsworksSecurityGroups" {:optional true} [:ref "Boolean"]]
    ["EcsClusterArn" {:optional true} [:ref "String"]]
    ["DefaultSshKeyName" {:optional true} [:ref "String"]]
    ["ElasticIps"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::OpsWorks::Stack.ElasticIp"]]
      "Fn::If"]]
    ["HostnameTheme" {:optional true} [:ref "String"]]
    ["DefaultAvailabilityZone" {:optional true} [:ref "String"]]
    ["ServiceRoleArn" {:optional true} [:ref "String"]]
    ["DefaultOs" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["DefaultInstanceProfileArn" {:optional true} [:ref "String"]]
    ["Attributes" {:optional true} [:ref "StringMap"]]
    ["DefaultSubnetId" {:optional true} [:ref "String"]]
    ["ConfigurationManager"
     {:optional true}
     [:ref "AWS::OpsWorks::Stack.StackConfigurationManager"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::Elasticsearch::Domain.MasterUserOptions"
 [:map
  {:closed :true}
  ["MasterUserARN" {:optional true} [:ref "String"]]
  ["MasterUserName" {:optional true} [:ref "String"]]
  ["MasterUserPassword" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::DeviceDefinition"
 [:map
  ["Type" [:= "AWS::Greengrass::DeviceDefinition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InitialVersion"
     {:optional true}
     [:ref
      "AWS::Greengrass::DeviceDefinition.DeviceDefinitionVersion"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::RDS::DBSubnetGroup"
 [:map
  ["Type" [:= "AWS::RDS::DBSubnetGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DBSubnetGroupDescription" {:optional true} [:ref "String"]]
    ["DBSubnetGroupName" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Transfer::User.SshPublicKey" [:map {:closed :true}],
 "AWS::CodeBuild::Project.ProjectFileSystemLocation"
 [:map
  {:closed :true}
  ["MountPoint" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Identifier" {:optional true} [:ref "String"]]
  ["MountOptions" {:optional true} [:ref "String"]]
  ["Location" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.Deserializer"
 [:map
  {:closed :true}
  ["HiveJsonSerDe"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.HiveJsonSerDe"]]
  ["OpenXJsonSerDe"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.OpenXJsonSerDe"]]],
 "AWS::CloudFront::Distribution.GeoRestriction"
 [:map
  {:closed :true}
  ["Locations" {:optional true} [:ref "StringList"]]
  ["RestrictionType" {:optional true} [:ref "String"]]],
 "AWS::Config::RemediationConfiguration.StaticValue"
 [:map
  {:closed :true}
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::SSM::Association.S3OutputLocation"
 [:map
  {:closed :true}
  ["OutputS3Region" {:optional true} [:ref "String"]]
  ["OutputS3BucketName" {:optional true} [:ref "String"]]
  ["OutputS3KeyPrefix" {:optional true} [:ref "String"]]],
 "AWS::AppStream::StackUserAssociation"
 [:map
  ["Type" [:= "AWS::AppStream::StackUserAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SendEmailNotification" {:optional true} [:ref "Boolean"]]
    ["UserName" {:optional true} [:ref "String"]]
    ["StackName" {:optional true} [:ref "String"]]
    ["AuthenticationType" {:optional true} [:ref "String"]]]]],
 "AWS::CodeBuild::Project.FilterGroup" [:map {:closed :true}],
 "AWS::AppSync::GraphQLSchema"
 [:map
  ["Type" [:= "AWS::AppSync::GraphQLSchema"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Definition" {:optional true} [:ref "String"]]
    ["DefinitionS3Location" {:optional true} [:ref "String"]]
    ["ApiId" {:optional true} [:ref "String"]]]]],
 "AWS::Kendra::DataSource.AccessControlListConfiguration"
 [:map {:closed :true} ["KeyPath" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::Application.CSVMappingParameters"
 [:map
  {:closed :true}
  ["RecordRowDelimiter" {:optional true} [:ref "String"]]
  ["RecordColumnDelimiter" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.AssetPropertyVariant"
 [:map
  {:closed :true}
  ["DoubleValue" {:optional true} [:ref "String"]]
  ["IntegerValue" {:optional true} [:ref "String"]]
  ["BooleanValue" {:optional true} [:ref "String"]]
  ["StringValue" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.RuleAction"
 [:map
  {:closed :true}
  ["Allow" {:optional true} [:ref "Json"]]
  ["Block" {:optional true} [:ref "Json"]]
  ["Count" {:optional true} [:ref "Json"]]],
 "AWS::WAFv2::RuleGroup.ForwardedIPConfiguration"
 [:map
  {:closed :true}
  ["HeaderName" {:optional true} [:ref "String"]]
  ["FallbackBehavior" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayLogging"
 [:map
  {:closed :true}
  ["AccessLog"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualGateway.VirtualGatewayAccessLog"]]],
 "AWS::DMS::ReplicationSubnetGroup"
 [:map
  ["Type" [:= "AWS::DMS::ReplicationSubnetGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ReplicationSubnetGroupDescription"
     {:optional true}
     [:ref "String"]]
    ["ReplicationSubnetGroupIdentifier"
     {:optional true}
     [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::IoTEvents::DetectorModel.IotTopicPublish"
 [:map
  {:closed :true}
  ["MqttTopic" {:optional true} [:ref "String"]]
  ["Payload"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.Payload"]]],
 "AWS::MediaLive::Channel.DvbTdtSettings"
 [:map
  {:closed :true}
  ["RepInterval" {:optional true} [:ref "Integer"]]],
 "AWS::EMR::InstanceGroupConfig.SimpleScalingPolicyConfiguration"
 [:map
  {:closed :true}
  ["AdjustmentType" {:optional true} [:ref "String"]]
  ["CoolDown" {:optional true} [:ref "Integer"]]
  ["ScalingAdjustment" {:optional true} [:ref "Integer"]]],
 "AWS::ApiGateway::UsagePlan.QuotaSettings"
 [:map
  {:closed :true}
  ["Limit" {:optional true} [:ref "Integer"]]
  ["Offset" {:optional true} [:ref "Integer"]]
  ["Period" {:optional true} [:ref "String"]]],
 "AWS::SSM::Association.InstanceAssociationOutputLocation"
 [:map
  {:closed :true}
  ["S3Location"
   {:optional true}
   [:ref "AWS::SSM::Association.S3OutputLocation"]]],
 "AWS::MediaLive::Channel.GlobalConfiguration"
 [:map
  {:closed :true}
  ["InputEndAction" {:optional true} [:ref "String"]]
  ["OutputTimingSource" {:optional true} [:ref "String"]]
  ["OutputLockingMode" {:optional true} [:ref "String"]]
  ["SupportLowFramerateInputs" {:optional true} [:ref "String"]]
  ["InitialAudioGain" {:optional true} [:ref "Integer"]]
  ["InputLossBehavior"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.InputLossBehavior"]]],
 "AWS::Kendra::DataSource.SalesforceKnowledgeArticleConfiguration"
 [:map
  {:closed :true}
  ["IncludedStates"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.SalesforceKnowledgeArticleStateList"]]
  ["StandardKnowledgeArticleTypeConfiguration"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.SalesforceStandardKnowledgeArticleTypeConfiguration"]]
  ["CustomKnowledgeArticleTypeConfigurations"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.SalesforceCustomKnowledgeArticleTypeConfigurationList"]]],
 "AWS::AppMesh::Route.GrpcRouteAction"
 [:map
  {:closed :true}
  ["WeightedTargets"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::AppMesh::Route.WeightedTarget"]]
    "Fn::If"]]],
 "AWS::MediaLive::Channel.AudioSelectorSettings"
 [:map
  {:closed :true}
  ["AudioPidSelection"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AudioPidSelection"]]
  ["AudioLanguageSelection"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AudioLanguageSelection"]]
  ["AudioTrackSelection"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AudioTrackSelection"]]],
 "AWS::Pinpoint::EmailChannel"
 [:map
  ["Type" [:= "AWS::Pinpoint::EmailChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ConfigurationSet" {:optional true} [:ref "String"]]
    ["FromAddress" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ApplicationId" {:optional true} [:ref "String"]]
    ["Identity" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]]]],
 "AWS::Redshift::ClusterSubnetGroup"
 [:map
  ["Type" [:= "AWS::Redshift::ClusterSubnetGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::IoTAnalytics::Pipeline.Channel"
 [:map
  {:closed :true}
  ["ChannelName" {:optional true} [:ref "String"]]
  ["Next" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Dataset.Trigger"
 [:map
  {:closed :true}
  ["Schedule"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Dataset.Schedule"]]
  ["TriggeringDataset"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Dataset.TriggeringDataset"]]],
 "AWS::EC2::SpotFleet.SpotPlacement"
 [:map
  {:closed :true}
  ["AvailabilityZone" {:optional true} [:ref "String"]]
  ["GroupName" {:optional true} [:ref "String"]]
  ["Tenancy" {:optional true} [:ref "String"]]],
 "AWS::IAM::ManagedPolicy"
 [:map
  ["Type" [:= "AWS::IAM::ManagedPolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Groups" {:optional true} [:ref "StringList"]]
    ["ManagedPolicyName" {:optional true} [:ref "String"]]
    ["Path" {:optional true} [:ref "String"]]
    ["PolicyDocument" {:optional true} [:ref "Json"]]
    ["Roles" {:optional true} [:ref "StringList"]]
    ["Users" {:optional true} [:ref "StringList"]]]]],
 "AWS::SageMaker::Model.VpcConfig"
 [:map
  {:closed :true}
  ["Subnets" {:optional true} [:ref "StringList"]]
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]],
 "AWS::AppMesh::VirtualNode.HealthCheck"
 [:map
  {:closed :true}
  ["Path" {:optional true} [:ref "String"]]
  ["UnhealthyThreshold" {:optional true} [:ref "Integer"]]
  ["Port" {:optional true} [:ref "Integer"]]
  ["HealthyThreshold" {:optional true} [:ref "Integer"]]
  ["TimeoutMillis" {:optional true} [:ref "Integer"]]
  ["Protocol" {:optional true} [:ref "String"]]
  ["IntervalMillis" {:optional true} [:ref "Integer"]]],
 "AWS::GroundStation::DataflowEndpointGroup.SecurityDetails"
 [:map
  {:closed :true}
  ["SubnetIds" {:optional true} [:ref "StringList"]]
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Dataset.Action"
 [:map
  {:closed :true}
  ["ActionName" {:optional true} [:ref "String"]]
  ["ContainerAction"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Dataset.ContainerAction"]]
  ["QueryAction"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Dataset.QueryAction"]]],
 "AWS::GameLift::Fleet"
 [:map
  ["Type" [:= "AWS::GameLift::Fleet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["FleetType" {:optional true} [:ref "String"]]
    ["MinSize" {:optional true} [:ref "Integer"]]
    ["PeerVpcId" {:optional true} [:ref "String"]]
    ["ServerLaunchParameters" {:optional true} [:ref "String"]]
    ["EC2InboundPermissions"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::GameLift::Fleet.IpPermission"]]
      "Fn::If"]]
    ["InstanceRoleARN" {:optional true} [:ref "String"]]
    ["ScriptId" {:optional true} [:ref "String"]]
    ["MaxSize" {:optional true} [:ref "Integer"]]
    ["NewGameSessionProtectionPolicy" {:optional true} [:ref "String"]]
    ["LogPaths" {:optional true} [:ref "StringList"]]
    ["PeerVpcAwsAccountId" {:optional true} [:ref "String"]]
    ["DesiredEC2Instances" {:optional true} [:ref "Integer"]]
    ["Name" {:optional true} [:ref "String"]]
    ["RuntimeConfiguration"
     {:optional true}
     [:ref "AWS::GameLift::Fleet.RuntimeConfiguration"]]
    ["Description" {:optional true} [:ref "String"]]
    ["ServerLaunchPath" {:optional true} [:ref "String"]]
    ["BuildId" {:optional true} [:ref "String"]]
    ["MetricGroups" {:optional true} [:ref "StringList"]]
    ["CertificateConfiguration"
     {:optional true}
     [:ref "AWS::GameLift::Fleet.CertificateConfiguration"]]
    ["EC2InstanceType" {:optional true} [:ref "String"]]
    ["ResourceCreationLimitPolicy"
     {:optional true}
     [:ref "AWS::GameLift::Fleet.ResourceCreationLimitPolicy"]]]]],
 "AWS::CloudWatch::Alarm.MetricDataQuery"
 [:map
  {:closed :true}
  ["Expression" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Label" {:optional true} [:ref "String"]]
  ["MetricStat"
   {:optional true}
   [:ref "AWS::CloudWatch::Alarm.MetricStat"]]
  ["Period" {:optional true} [:ref "Integer"]]
  ["ReturnData" {:optional true} [:ref "Boolean"]]],
 "AWS::EMR::Cluster.InstanceFleetConfig"
 [:map
  {:closed :true}
  ["InstanceTypeConfigs"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::Cluster.InstanceTypeConfig"]]
    "Fn::If"]]
  ["LaunchSpecifications"
   {:optional true}
   [:ref "AWS::EMR::Cluster.InstanceFleetProvisioningSpecifications"]]
  ["Name" {:optional true} [:ref "String"]]
  ["TargetOnDemandCapacity" {:optional true} [:ref "Integer"]]
  ["TargetSpotCapacity" {:optional true} [:ref "Integer"]]],
 "AWS::Cognito::UserPoolRiskConfigurationAttachment"
 [:map
  ["Type" [:= "AWS::Cognito::UserPoolRiskConfigurationAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CompromisedCredentialsRiskConfiguration"
     {:optional true}
     [:ref
      "AWS::Cognito::UserPoolRiskConfigurationAttachment.CompromisedCredentialsRiskConfigurationType"]]
    ["UserPoolId" {:optional true} [:ref "String"]]
    ["ClientId" {:optional true} [:ref "String"]]
    ["AccountTakeoverRiskConfiguration"
     {:optional true}
     [:ref
      "AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverRiskConfigurationType"]]
    ["RiskExceptionConfiguration"
     {:optional true}
     [:ref
      "AWS::Cognito::UserPoolRiskConfigurationAttachment.RiskExceptionConfigurationType"]]]]],
 "AWS::Greengrass::CoreDefinitionVersion"
 [:map
  ["Type" [:= "AWS::Greengrass::CoreDefinitionVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Cores"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Greengrass::CoreDefinitionVersion.Core"]]
      "Fn::If"]]
    ["CoreDefinitionId" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisAnalytics::Application.InputLambdaProcessor"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]],
 "AWS::GameLift::Fleet.RuntimeConfiguration"
 [:map
  {:closed :true}
  ["GameSessionActivationTimeoutSeconds"
   {:optional true}
   [:ref "Integer"]]
  ["MaxConcurrentGameSessionActivations"
   {:optional true}
   [:ref "Integer"]]
  ["ServerProcesses"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::GameLift::Fleet.ServerProcess"]]
    "Fn::If"]]],
 "AWS::Cognito::IdentityPool.PushSync"
 [:map
  {:closed :true}
  ["ApplicationArns" {:optional true} [:ref "StringList"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::EC2::LaunchTemplate.NetworkInterface"
 [:map
  {:closed :true}
  ["Groups" {:optional true} [:ref "StringList"]]
  ["DeleteOnTermination" {:optional true} [:ref "Boolean"]]
  ["PrivateIpAddress" {:optional true} [:ref "String"]]
  ["PrivateIpAddresses"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::LaunchTemplate.PrivateIpAdd"]]
    "Fn::If"]]
  ["SubnetId" {:optional true} [:ref "String"]]
  ["AssociatePublicIpAddress" {:optional true} [:ref "Boolean"]]
  ["Ipv6AddressCount" {:optional true} [:ref "Integer"]]
  ["Description" {:optional true} [:ref "String"]]
  ["DeviceIndex" {:optional true} [:ref "Integer"]]
  ["SecondaryPrivateIpAddressCount" {:optional true} [:ref "Integer"]]
  ["InterfaceType" {:optional true} [:ref "String"]]
  ["Ipv6Addresses"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::LaunchTemplate.Ipv6Add"]]
    "Fn::If"]]
  ["NetworkInterfaceId" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Pipeline.DeviceRegistryEnrich"
 [:map
  {:closed :true}
  ["Attribute" {:optional true} [:ref "String"]]
  ["Next" {:optional true} [:ref "String"]]
  ["ThingName" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Route53::HealthCheck"
 [:map
  ["Type" [:= "AWS::Route53::HealthCheck"]]
  ["Properties"
   [:map
    {:closed :true}
    ["HealthCheckConfig" {:optional true} [:ref "Json"]]
    ["HealthCheckTags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Route53::HealthCheck.HealthCheckTag"]]
      "Fn::If"]]]]],
 "AWS::SSM::MaintenanceWindowTarget.Targets"
 [:map
  {:closed :true}
  ["Values" {:optional true} [:ref "StringList"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::EC2::LocalGatewayRouteTableVPCAssociation.Tags"
 [:map
  {:closed :true}
  ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::MSK::Cluster.Prometheus"
 [:map
  {:closed :true}
  ["JmxExporter"
   {:optional true}
   [:ref "AWS::MSK::Cluster.JmxExporter"]]
  ["NodeExporter"
   {:optional true}
   [:ref "AWS::MSK::Cluster.NodeExporter"]]],
 "AWS::DocDB::DBSubnetGroup"
 [:map
  ["Type" [:= "AWS::DocDB::DBSubnetGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DBSubnetGroupName" {:optional true} [:ref "String"]]
    ["DBSubnetGroupDescription" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::RoboMaker::RobotApplicationVersion"
 [:map
  ["Type" [:= "AWS::RoboMaker::RobotApplicationVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CurrentRevisionId" {:optional true} [:ref "String"]]
    ["Application" {:optional true} [:ref "String"]]]]],
 "AWS::ResourceGroups::Group.ResourceQuery"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Query"
   {:optional true}
   [:ref "AWS::ResourceGroups::Group.Query"]]],
 "AWS::IoTAnalytics::Datastore.CustomerManagedS3"
 [:map
  {:closed :true}
  ["Bucket" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["KeyPrefix" {:optional true} [:ref "String"]]],
 "AWS::WAFRegional::Rule.Predicate"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["DataId" {:optional true} [:ref "String"]]
  ["Negated" {:optional true} [:ref "Boolean"]]],
 "AWS::EC2::SecurityGroup"
 [:map
  ["Type" [:= "AWS::EC2::SecurityGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GroupDescription" {:optional true} [:ref "String"]]
    ["GroupName" {:optional true} [:ref "String"]]
    ["SecurityGroupEgress"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EC2::SecurityGroup.Egress"]]
      "Fn::If"]]
    ["SecurityGroupIngress"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EC2::SecurityGroup.Ingress"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::MediaStore::Container.MetricPolicy"
 [:map
  {:closed :true}
  ["ContainerLevelMetrics" {:optional true} [:ref "String"]]
  ["MetricPolicyRules"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaStore::Container.MetricPolicyRule"]]
    "Fn::If"]]],
 "AWS::KinesisFirehose::DeliveryStream.OpenXJsonSerDe"
 [:map
  {:closed :true}
  ["CaseInsensitive" {:optional true} [:ref "Boolean"]]
  ["ColumnToJsonKeyMappings" {:optional true} [:ref "StringMap"]]
  ["ConvertDotsInJsonKeysToUnderscores"
   {:optional true}
   [:ref "Boolean"]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayListenerTls"
 [:map
  {:closed :true}
  ["Mode" {:optional true} [:ref "String"]]
  ["Certificate"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualGateway.VirtualGatewayListenerTlsCertificate"]]],
 "AWS::AppMesh::Route.Duration"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "Integer"]]
  ["Unit" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskSet.Scale"
 [:map
  {:closed :true}
  ["Unit" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "Double"]]],
 "AWS::Greengrass::FunctionDefinition.RunAs"
 [:map
  {:closed :true}
  ["Uid" {:optional true} [:ref "Integer"]]
  ["Gid" {:optional true} [:ref "Integer"]]],
 "AWS::GroundStation::DataflowEndpointGroup.DataflowEndpoint"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Address"
   {:optional true}
   [:ref "AWS::GroundStation::DataflowEndpointGroup.SocketAddress"]]
  ["Status" {:optional true} [:ref "String"]]
  ["Mtu" {:optional true} [:ref "Integer"]]],
 "AWS::Greengrass::ResourceDefinition.ResourceDefinitionVersion"
 [:map
  {:closed :true}
  ["Resources"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Greengrass::ResourceDefinition.ResourceInstance"]]
    "Fn::If"]]],
 "AWS::S3::Bucket.AccelerateConfiguration"
 [:map
  {:closed :true}
  ["AccelerationStatus" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPoolGroup"
 [:map
  ["Type" [:= "AWS::Cognito::UserPoolGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GroupName" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["UserPoolId" {:optional true} [:ref "String"]]
    ["Precedence" {:optional true} [:ref "Double"]]
    ["RoleArn" {:optional true} [:ref "String"]]]]],
 "AWS::Config::OrganizationConfigRule"
 [:map
  ["Type" [:= "AWS::Config::OrganizationConfigRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["OrganizationManagedRuleMetadata"
     {:optional true}
     [:ref
      "AWS::Config::OrganizationConfigRule.OrganizationManagedRuleMetadata"]]
    ["OrganizationConfigRuleName" {:optional true} [:ref "String"]]
    ["OrganizationCustomRuleMetadata"
     {:optional true}
     [:ref
      "AWS::Config::OrganizationConfigRule.OrganizationCustomRuleMetadata"]]
    ["ExcludedAccounts" {:optional true} [:ref "StringList"]]]]],
 "AWS::AppMesh::VirtualGateway"
 [:map
  ["Type" [:= "AWS::AppMesh::VirtualGateway"]]
  ["Properties"
   [:map
    {:closed :true}
    ["VirtualGatewayName" {:optional true} [:ref "String"]]
    ["MeshName" {:optional true} [:ref "String"]]
    ["MeshOwner" {:optional true} [:ref "String"]]
    ["Spec"
     {:optional true}
     [:ref "AWS::AppMesh::VirtualGateway.VirtualGatewaySpec"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Greengrass::ConnectorDefinitionVersion.Connector"
 [:map
  {:closed :true}
  ["ConnectorArn" {:optional true} [:ref "String"]]
  ["Parameters" {:optional true} [:ref "Json"]]
  ["Id" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.DataSourceConfiguration"
 [:map
  {:closed :true}
  ["S3Configuration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.S3DataSourceConfiguration"]]
  ["SharePointConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.SharePointConfiguration"]]
  ["SalesforceConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.SalesforceConfiguration"]]
  ["OneDriveConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.OneDriveConfiguration"]]
  ["ServiceNowConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.ServiceNowConfiguration"]]
  ["DatabaseConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.DatabaseConfiguration"]]],
 "AWS::Greengrass::ResourceDefinition"
 [:map
  ["Type" [:= "AWS::Greengrass::ResourceDefinition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InitialVersion"
     {:optional true}
     [:ref
      "AWS::Greengrass::ResourceDefinition.ResourceDefinitionVersion"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Pinpoint::Campaign.CampaignSmsMessage"
 [:map
  {:closed :true}
  ["SenderId" {:optional true} [:ref "String"]]
  ["Body" {:optional true} [:ref "String"]]
  ["MessageType" {:optional true} [:ref "String"]]],
 "AWS::Neptune::DBClusterParameterGroup"
 [:map
  ["Type" [:= "AWS::Neptune::DBClusterParameterGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Parameters" {:optional true} [:ref "Json"]]
    ["Family" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::IoTEvents::DetectorModel.DetectorModelDefinition"
 [:map
  {:closed :true}
  ["States"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoTEvents::DetectorModel.State"]]
    "Fn::If"]]
  ["InitialStateName" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::Application.EnvironmentProperties"
 [:map
  {:closed :true}
  ["PropertyGroups"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::KinesisAnalyticsV2::Application.PropertyGroup"]]
    "Fn::If"]]],
 "AWS::Glue::MLTransform.GlueTables"
 [:map
  {:closed :true}
  ["ConnectionName" {:optional true} [:ref "String"]]
  ["TableName" {:optional true} [:ref "String"]]
  ["DatabaseName" {:optional true} [:ref "String"]]
  ["CatalogId" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.Transition"
 [:map
  {:closed :true}
  ["StorageClass" {:optional true} [:ref "String"]]
  ["TransitionDate" {:optional true} [:ref "Timestamp"]]
  ["TransitionInDays" {:optional true} [:ref "Integer"]]],
 "AWS::ImageBuilder::Image.ImageTestsConfiguration"
 [:map
  {:closed :true}
  ["ImageTestsEnabled" {:optional true} [:ref "Boolean"]]
  ["TimeoutMinutes" {:optional true} [:ref "Integer"]]],
 "AWS::ImageBuilder::Component"
 [:map
  ["Type" [:= "AWS::ImageBuilder::Component"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Data" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "StringMap"]]
    ["SupportedOsVersions" {:optional true} [:ref "StringList"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["Platform" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Uri" {:optional true} [:ref "String"]]
    ["Version" {:optional true} [:ref "String"]]
    ["ChangeDescription" {:optional true} [:ref "String"]]]]],
 "AWS::Greengrass::ResourceDefinition.LocalDeviceResourceData"
 [:map
  {:closed :true}
  ["SourcePath" {:optional true} [:ref "String"]]
  ["GroupOwnerSetting"
   {:optional true}
   [:ref "AWS::Greengrass::ResourceDefinition.GroupOwnerSetting"]]],
 "AWS::CodeStar::GitHubRepository.S3"
 [:map
  {:closed :true}
  ["ObjectVersion" {:optional true} [:ref "String"]]
  ["Bucket" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::Logs::MetricFilter.MetricTransformation"
 [:map
  {:closed :true}
  ["DefaultValue" {:optional true} [:ref "Double"]]
  ["MetricName" {:optional true} [:ref "String"]]
  ["MetricNamespace" {:optional true} [:ref "String"]]
  ["MetricValue" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.StatementTwo"
 [:map
  {:closed :true}
  ["NotStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.NotStatementTwo"]]
  ["SqliMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.SqliMatchStatement"]]
  ["OrStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.OrStatementTwo"]]
  ["SizeConstraintStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.SizeConstraintStatement"]]
  ["XssMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.XssMatchStatement"]]
  ["IPSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.IPSetReferenceStatement"]]
  ["RuleGroupReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.RuleGroupReferenceStatement"]]
  ["RegexPatternSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.RegexPatternSetReferenceStatement"]]
  ["AndStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.AndStatementTwo"]]
  ["ByteMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.ByteMatchStatement"]]
  ["RateBasedStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.RateBasedStatementTwo"]]
  ["GeoMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.GeoMatchStatement"]]
  ["ManagedRuleGroupStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.ManagedRuleGroupStatement"]]],
 "AWS::MediaLive::Channel.ArchiveContainerSettings"
 [:map
  {:closed :true}
  ["M2tsSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.M2tsSettings"]]],
 "AWS::ServiceCatalog::LaunchRoleConstraint"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::LaunchRoleConstraint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["LocalRoleName" {:optional true} [:ref "String"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["PortfolioId" {:optional true} [:ref "String"]]
    ["ProductId" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]]]],
 "AWS::IoT::ProvisioningTemplate.ProvisioningHook"
 [:map
  {:closed :true}
  ["TargetArn" {:optional true} [:ref "String"]]
  ["PayloadVersion" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.AndStatementOne"
 [:map
  {:closed :true}
  ["Statements"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.StatementTwo"]]
    "Fn::If"]]],
 "AWS::DMS::ReplicationInstance"
 [:map
  ["Type" [:= "AWS::DMS::ReplicationInstance"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["AllocatedStorage" {:optional true} [:ref "Integer"]]
    ["PubliclyAccessible" {:optional true} [:ref "Boolean"]]
    ["AutoMinorVersionUpgrade" {:optional true} [:ref "Boolean"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ReplicationInstanceClass" {:optional true} [:ref "String"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["AllowMajorVersionUpgrade" {:optional true} [:ref "Boolean"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["EngineVersion" {:optional true} [:ref "String"]]
    ["VpcSecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["ReplicationInstanceIdentifier" {:optional true} [:ref "String"]]
    ["ReplicationSubnetGroupIdentifier"
     {:optional true}
     [:ref "String"]]
    ["MultiAZ" {:optional true} [:ref "Boolean"]]]]],
 "AWS::EMR::InstanceGroupConfig"
 [:map
  ["Type" [:= "AWS::EMR::InstanceGroupConfig"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Configurations"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::EMR::InstanceGroupConfig.Configuration"]]
      "Fn::If"]]
    ["InstanceRole" {:optional true} [:ref "String"]]
    ["AutoScalingPolicy"
     {:optional true}
     [:ref "AWS::EMR::InstanceGroupConfig.AutoScalingPolicy"]]
    ["InstanceType" {:optional true} [:ref "String"]]
    ["JobFlowId" {:optional true} [:ref "String"]]
    ["EbsConfiguration"
     {:optional true}
     [:ref "AWS::EMR::InstanceGroupConfig.EbsConfiguration"]]
    ["Name" {:optional true} [:ref "String"]]
    ["BidPrice" {:optional true} [:ref "String"]]
    ["Market" {:optional true} [:ref "String"]]
    ["InstanceCount" {:optional true} [:ref "Integer"]]]]],
 "AWS::Pinpoint::ApplicationSettings.CampaignHook"
 [:map
  {:closed :true}
  ["Mode" {:optional true} [:ref "String"]]
  ["WebUrl" {:optional true} [:ref "String"]]
  ["LambdaFunctionName" {:optional true} [:ref "String"]]],
 "AWS::SES::ReceiptRule.LambdaAction"
 [:map
  {:closed :true}
  ["FunctionArn" {:optional true} [:ref "String"]]
  ["TopicArn" {:optional true} [:ref "String"]]
  ["InvocationType" {:optional true} [:ref "String"]]],
 "AWS::EventSchemas::Discoverer"
 [:map
  ["Type" [:= "AWS::EventSchemas::Discoverer"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["SourceArn" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EventSchemas::Discoverer.TagsEntry"]]
      "Fn::If"]]]]],
 "AWS::ApiGateway::Stage.CanarySetting"
 [:map
  {:closed :true}
  ["DeploymentId" {:optional true} [:ref "String"]]
  ["PercentTraffic" {:optional true} [:ref "Double"]]
  ["StageVariableOverrides" {:optional true} [:ref "StringMap"]]
  ["UseStageCache" {:optional true} [:ref "Boolean"]]],
 "AWS::AppMesh::Route.HttpRetryPolicy"
 [:map
  {:closed :true}
  ["MaxRetries" {:optional true} [:ref "Integer"]]
  ["PerRetryTimeout"
   {:optional true}
   [:ref "AWS::AppMesh::Route.Duration"]]
  ["HttpRetryEvents" {:optional true} [:ref "StringList"]]
  ["TcpRetryEvents" {:optional true} [:ref "StringList"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.TargetGroupStickinessConfig"
 [:map
  {:closed :true}
  ["DurationSeconds" {:optional true} [:ref "Integer"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::IoT::Thing.AttributePayload"
 [:map
  {:closed :true}
  ["Attributes" {:optional true} [:ref "StringMap"]]],
 "AWS::Greengrass::FunctionDefinitionVersion.Function"
 [:map
  {:closed :true}
  ["FunctionArn" {:optional true} [:ref "String"]]
  ["FunctionConfiguration"
   {:optional true}
   [:ref
    "AWS::Greengrass::FunctionDefinitionVersion.FunctionConfiguration"]]
  ["Id" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::Application.InputProcessingConfiguration"
 [:map
  {:closed :true}
  ["InputLambdaProcessor"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::Application.InputLambdaProcessor"]]],
 "AWS::IoTEvents::DetectorModel.DynamoDBv2"
 [:map
  {:closed :true}
  ["TableName" {:optional true} [:ref "String"]]
  ["Payload"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.Payload"]]],
 "AWS::LakeFormation::Permissions.TableWithColumnsResource"
 [:map
  {:closed :true}
  ["ColumnNames" {:optional true} [:ref "StringList"]]
  ["DatabaseName" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]
  ["ColumnWildcard"
   {:optional true}
   [:ref "AWS::LakeFormation::Permissions.ColumnWildcard"]]],
 "AWS::ApplicationInsights::Application.ConfigurationDetails"
 [:map
  {:closed :true}
  ["AlarmMetrics"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::ApplicationInsights::Application.AlarmMetric"]]
    "Fn::If"]]
  ["Logs"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ApplicationInsights::Application.Log"]]
    "Fn::If"]]
  ["WindowsEvents"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::ApplicationInsights::Application.WindowsEvent"]]
    "Fn::If"]]
  ["Alarms"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ApplicationInsights::Application.Alarm"]]
    "Fn::If"]]],
 "AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration"
 [:map
  {:closed :true}
  ["BucketARN" {:optional true} [:ref "String"]]
  ["BufferingHints"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.BufferingHints"]]
  ["CloudWatchLoggingOptions"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions"]]
  ["CompressionFormat" {:optional true} [:ref "String"]]
  ["EncryptionConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.EncryptionConfiguration"]]
  ["ErrorOutputPrefix" {:optional true} [:ref "String"]]
  ["Prefix" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]],
 "AWS::CodeBuild::Project.LogsConfig"
 [:map
  {:closed :true}
  ["CloudWatchLogs"
   {:optional true}
   [:ref "AWS::CodeBuild::Project.CloudWatchLogsConfig"]]
  ["S3Logs"
   {:optional true}
   [:ref "AWS::CodeBuild::Project.S3LogsConfig"]]],
 "AWS::AppStream::DirectoryConfig"
 [:map
  ["Type" [:= "AWS::AppStream::DirectoryConfig"]]
  ["Properties"
   [:map
    {:closed :true}
    ["OrganizationalUnitDistinguishedNames"
     {:optional true}
     [:ref "StringList"]]
    ["ServiceAccountCredentials"
     {:optional true}
     [:ref
      "AWS::AppStream::DirectoryConfig.ServiceAccountCredentials"]]
    ["DirectoryName" {:optional true} [:ref "String"]]]]],
 "AWS::RAM::ResourceShare"
 [:map
  ["Type" [:= "AWS::RAM::ResourceShare"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Principals" {:optional true} [:ref "StringList"]]
    ["AllowExternalPrincipals" {:optional true} [:ref "Boolean"]]
    ["ResourceArns" {:optional true} [:ref "StringList"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayListenerTlsFileCertificate"
 [:map
  {:closed :true}
  ["PrivateKey" {:optional true} [:ref "String"]]
  ["CertificateChain" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.ProcessorParameter"
 [:map
  {:closed :true}
  ["ParameterName" {:optional true} [:ref "String"]]
  ["ParameterValue" {:optional true} [:ref "String"]]],
 "AWS::EC2::VPCDHCPOptionsAssociation"
 [:map
  ["Type" [:= "AWS::EC2::VPCDHCPOptionsAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DhcpOptionsId" {:optional true} [:ref "String"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::GameLift::GameServerGroup.TargetTrackingConfiguration"
 [:map
  {:closed :true}
  ["TargetValue" {:optional true} [:ref "Double"]]],
 "AWS::Route53::RecordSetGroup.RecordSet"
 [:map
  {:closed :true}
  ["AliasTarget"
   {:optional true}
   [:ref "AWS::Route53::RecordSetGroup.AliasTarget"]]
  ["Comment" {:optional true} [:ref "String"]]
  ["MultiValueAnswer" {:optional true} [:ref "Boolean"]]
  ["Failover" {:optional true} [:ref "String"]]
  ["HostedZoneName" {:optional true} [:ref "String"]]
  ["ResourceRecords" {:optional true} [:ref "StringList"]]
  ["SetIdentifier" {:optional true} [:ref "String"]]
  ["TTL" {:optional true} [:ref "String"]]
  ["Region" {:optional true} [:ref "String"]]
  ["HostedZoneId" {:optional true} [:ref "String"]]
  ["HealthCheckId" {:optional true} [:ref "String"]]
  ["GeoLocation"
   {:optional true}
   [:ref "AWS::Route53::RecordSetGroup.GeoLocation"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Weight" {:optional true} [:ref "Integer"]]],
 "AWS::SageMaker::MonitoringSchedule.MonitoringOutput"
 [:map
  {:closed :true}
  ["S3Output"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.S3Output"]]],
 "AWS::MediaLive::Channel.CaptionSelectorSettings"
 [:map
  {:closed :true}
  ["DvbSubSourceSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.DvbSubSourceSettings"]]
  ["Scte27SourceSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Scte27SourceSettings"]]
  ["AribSourceSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AribSourceSettings"]]
  ["EmbeddedSourceSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.EmbeddedSourceSettings"]]
  ["Scte20SourceSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Scte20SourceSettings"]]
  ["TeletextSourceSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.TeletextSourceSettings"]]],
 "AWS::MSK::Cluster.NodeExporter"
 [:map
  {:closed :true}
  ["EnabledInBroker" {:optional true} [:ref "Boolean"]]],
 "AWS::EMR::InstanceFleetConfig.EbsBlockDeviceConfig"
 [:map
  {:closed :true}
  ["VolumeSpecification"
   {:optional true}
   [:ref "AWS::EMR::InstanceFleetConfig.VolumeSpecification"]]
  ["VolumesPerInstance" {:optional true} [:ref "Integer"]]],
 "AWS::ElasticLoadBalancingV2::Listener.FixedResponseConfig"
 [:map
  {:closed :true}
  ["ContentType" {:optional true} [:ref "String"]]
  ["MessageBody" {:optional true} [:ref "String"]]
  ["StatusCode" {:optional true} [:ref "String"]]],
 "AWS::AppStream::Stack.UserSetting"
 [:map
  {:closed :true}
  ["Action" {:optional true} [:ref "String"]]
  ["Permission" {:optional true} [:ref "String"]]],
 "AWS::Batch::JobDefinition.ContainerProperties"
 [:map
  {:closed :true}
  ["Environment"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Batch::JobDefinition.Environment"]]
    "Fn::If"]]
  ["Memory" {:optional true} [:ref "Integer"]]
  ["MountPoints"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Batch::JobDefinition.MountPoints"]]
    "Fn::If"]]
  ["JobRoleArn" {:optional true} [:ref "String"]]
  ["Image" {:optional true} [:ref "String"]]
  ["ReadonlyRootFilesystem" {:optional true} [:ref "Boolean"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["ResourceRequirements"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Batch::JobDefinition.ResourceRequirement"]]
    "Fn::If"]]
  ["Vcpus" {:optional true} [:ref "Integer"]]
  ["Command" {:optional true} [:ref "StringList"]]
  ["User" {:optional true} [:ref "String"]]
  ["Ulimits"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Batch::JobDefinition.Ulimit"]]
    "Fn::If"]]
  ["Volumes"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Batch::JobDefinition.Volumes"]]
    "Fn::If"]]
  ["LinuxParameters"
   {:optional true}
   [:ref "AWS::Batch::JobDefinition.LinuxParameters"]]
  ["Privileged" {:optional true} [:ref "Boolean"]]],
 "AWS::WorkSpaces::Workspace.WorkspaceProperties"
 [:map
  {:closed :true}
  ["ComputeTypeName" {:optional true} [:ref "String"]]
  ["RootVolumeSizeGib" {:optional true} [:ref "Integer"]]
  ["RunningMode" {:optional true} [:ref "String"]]
  ["RunningModeAutoStopTimeoutInMinutes"
   {:optional true}
   [:ref "Integer"]]
  ["UserVolumeSizeGib" {:optional true} [:ref "Integer"]]],
 "AWS::CodeDeploy::DeploymentConfig.MinimumHealthyHosts"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "Integer"]]],
 "AWS::AppSync::GraphQLApi.Tags" [:map {:closed :true}],
 "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"
 [:map
  {:closed :true}
  ["DataSourceToIndexFieldMappingList"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Kendra::DataSource.DataSourceToIndexFieldMapping"]]
    "Fn::If"]]],
 "AWS::Greengrass::SubscriptionDefinitionVersion.Subscription"
 [:map
  {:closed :true}
  ["Target" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Source" {:optional true} [:ref "String"]]
  ["Subject" {:optional true} [:ref "String"]]],
 "AWS::S3::AccessPoint"
 [:map
  ["Type" [:= "AWS::S3::AccessPoint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Bucket" {:optional true} [:ref "String"]]
    ["VpcConfiguration"
     {:optional true}
     [:ref "AWS::S3::AccessPoint.VpcConfiguration"]]
    ["PublicAccessBlockConfiguration"
     {:optional true}
     [:ref "AWS::S3::AccessPoint.PublicAccessBlockConfiguration"]]
    ["Policy" {:optional true} [:ref "Json"]]
    ["PolicyStatus" {:optional true} [:ref "Json"]]
    ["NetworkOrigin" {:optional true} [:ref "String"]]
    ["CreationDate" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.HlsSettings"
 [:map
  {:closed :true}
  ["StandardHlsSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.StandardHlsSettings"]]
  ["AudioOnlyHlsSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AudioOnlyHlsSettings"]]
  ["Fmp4HlsSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Fmp4HlsSettings"]]],
 "AWS::AutoScalingPlans::ScalingPlan.CustomizedLoadMetricSpecification"
 [:map
  {:closed :true}
  ["MetricName" {:optional true} [:ref "String"]]
  ["Statistic" {:optional true} [:ref "String"]]
  ["Dimensions"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::AutoScalingPlans::ScalingPlan.MetricDimension"]]
    "Fn::If"]]
  ["Unit" {:optional true} [:ref "String"]]
  ["Namespace" {:optional true} [:ref "String"]]],
 "AWS::ACMPCA::CertificateAuthority.RevocationConfiguration"
 [:map
  {:closed :true}
  ["CrlConfiguration"
   {:optional true}
   [:ref "AWS::ACMPCA::CertificateAuthority.CrlConfiguration"]]],
 "AWS::Kendra::Faq.S3Path"
 [:map
  {:closed :true}
  ["Bucket" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::CodePipeline::CustomActionType.ConfigurationProperties"
 [:map
  {:closed :true}
  ["Description" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "Boolean"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Queryable" {:optional true} [:ref "Boolean"]]
  ["Required" {:optional true} [:ref "Boolean"]]
  ["Secret" {:optional true} [:ref "Boolean"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::FunctionDefinitionVersion.Environment"
 [:map
  {:closed :true}
  ["Variables" {:optional true} [:ref "Json"]]
  ["Execution"
   {:optional true}
   [:ref "AWS::Greengrass::FunctionDefinitionVersion.Execution"]]
  ["ResourceAccessPolicies"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::Greengrass::FunctionDefinitionVersion.ResourceAccessPolicy"]]
    "Fn::If"]]
  ["AccessSysfs" {:optional true} [:ref "Boolean"]]],
 "AWS::SSM::Document"
 [:map
  ["Type" [:= "AWS::SSM::Document"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Content" {:optional true} [:ref "Json"]]
    ["DocumentType" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EC2::SpotFleet.ClassicLoadBalancersConfig"
 [:map
  {:closed :true}
  ["ClassicLoadBalancers"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::SpotFleet.ClassicLoadBalancer"]]
    "Fn::If"]]],
 "AWS::Pinpoint::EventStream"
 [:map
  ["Type" [:= "AWS::Pinpoint::EventStream"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationId" {:optional true} [:ref "String"]]
    ["DestinationStreamArn" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]]]],
 "AWS::CloudFront::Distribution.CustomErrorResponse"
 [:map
  {:closed :true}
  ["ResponseCode" {:optional true} [:ref "Integer"]]
  ["ErrorCachingMinTTL" {:optional true} [:ref "Double"]]
  ["ErrorCode" {:optional true} [:ref "Integer"]]
  ["ResponsePagePath" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Input"
 [:map
  ["Type" [:= "AWS::MediaLive::Input"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Sources"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::MediaLive::Input.InputSourceRequest"]]
      "Fn::If"]]
    ["MediaConnectFlows"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::MediaLive::Input.MediaConnectFlowRequest"]]
      "Fn::If"]]
    ["InputSecurityGroups" {:optional true} [:ref "StringList"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Destinations"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::MediaLive::Input.InputDestinationRequest"]]
      "Fn::If"]]
    ["Vpc"
     {:optional true}
     [:ref "AWS::MediaLive::Input.InputVpcRequest"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]
    ["InputDevices"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::MediaLive::Input.InputDeviceSettings"]]
      "Fn::If"]]]]],
 "AWS::SageMaker::EndpointConfig.DataCaptureConfig"
 [:map
  {:closed :true}
  ["CaptureOptions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::SageMaker::EndpointConfig.CaptureOption"]]
    "Fn::If"]]
  ["KmsKeyId" {:optional true} [:ref "String"]]
  ["DestinationS3Uri" {:optional true} [:ref "String"]]
  ["InitialSamplingPercentage" {:optional true} [:ref "Integer"]]
  ["CaptureContentTypeHeader"
   {:optional true}
   [:ref "AWS::SageMaker::EndpointConfig.CaptureContentTypeHeader"]]
  ["EnableCapture" {:optional true} [:ref "Boolean"]]],
 "AWS::Route53::HostedZone"
 [:map
  ["Type" [:= "AWS::Route53::HostedZone"]]
  ["Properties"
   [:map
    {:closed :true}
    ["HostedZoneConfig"
     {:optional true}
     [:ref "AWS::Route53::HostedZone.HostedZoneConfig"]]
    ["HostedZoneTags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Route53::HostedZone.HostedZoneTag"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]
    ["QueryLoggingConfig"
     {:optional true}
     [:ref "AWS::Route53::HostedZone.QueryLoggingConfig"]]
    ["VPCs"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Route53::HostedZone.VPC"]]
      "Fn::If"]]]]],
 "AWS::AmazonMQ::ConfigurationAssociation.ConfigurationId"
 [:map
  {:closed :true}
  ["Revision" {:optional true} [:ref "Integer"]]
  ["Id" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.DataFormatConversionConfiguration"
 [:map
  {:closed :true}
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["InputFormatConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.InputFormatConfiguration"]]
  ["OutputFormatConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.OutputFormatConfiguration"]]
  ["SchemaConfiguration"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.SchemaConfiguration"]]],
 "AWS::Inspector::AssessmentTemplate"
 [:map
  ["Type" [:= "AWS::Inspector::AssessmentTemplate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AssessmentTargetArn" {:optional true} [:ref "String"]]
    ["DurationInSeconds" {:optional true} [:ref "Integer"]]
    ["AssessmentTemplateName" {:optional true} [:ref "String"]]
    ["RulesPackageArns" {:optional true} [:ref "StringList"]]
    ["UserAttributesForFindings"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::IoT::PolicyPrincipalAttachment"
 [:map
  ["Type" [:= "AWS::IoT::PolicyPrincipalAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PolicyName" {:optional true} [:ref "String"]]
    ["Principal" {:optional true} [:ref "String"]]]]],
 "AWS::MSK::Cluster.Scram"
 [:map {:closed :true} ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::GameLift::GameServerGroup.VpcSubnets"
 [:map
  {:closed :true}
  ["VpcSubnets" {:optional true} [:ref "StringList"]]],
 "AWS::GameLift::Fleet.CertificateConfiguration"
 [:map
  {:closed :true}
  ["CertificateType" {:optional true} [:ref "String"]]],
 "AWS::Glue::Workflow"
 [:map
  ["Type" [:= "AWS::Glue::Workflow"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["DefaultRunProperties" {:optional true} [:ref "Json"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.ColorSpacePassthroughSettings"
 [:map {:closed :true}],
 "AWS::AppMesh::Route.HttpRoute"
 [:map
  {:closed :true}
  ["Action"
   {:optional true}
   [:ref "AWS::AppMesh::Route.HttpRouteAction"]]
  ["Timeout" {:optional true} [:ref "AWS::AppMesh::Route.HttpTimeout"]]
  ["RetryPolicy"
   {:optional true}
   [:ref "AWS::AppMesh::Route.HttpRetryPolicy"]]
  ["Match"
   {:optional true}
   [:ref "AWS::AppMesh::Route.HttpRouteMatch"]]],
 "AWS::ECS::Cluster.ClusterSettings"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.AccessLog"
 [:map
  {:closed :true}
  ["File"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.FileAccessLog"]]],
 "AWS::Cognito::IdentityPoolRoleAttachment.RulesConfigurationType"
 [:map
  {:closed :true}
  ["Rules"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Cognito::IdentityPoolRoleAttachment.MappingRule"]]
    "Fn::If"]]],
 "AWS::MediaLive::Input.InputDeviceRequest"
 [:map {:closed :true} ["Id" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::Distribution.OriginGroupMembers"
 [:map
  {:closed :true}
  ["Quantity" {:optional true} [:ref "Integer"]]
  ["Items"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::CloudFront::Distribution.OriginGroupMember"]]
    "Fn::If"]]],
 "AWS::SES::ReceiptRule.StopAction"
 [:map
  {:closed :true}
  ["Scope" {:optional true} [:ref "String"]]
  ["TopicArn" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::Application.ApplicationCodeConfiguration"
 [:map
  {:closed :true}
  ["CodeContentType" {:optional true} [:ref "String"]]
  ["CodeContent"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::Application.CodeContent"]]],
 "AWS::OpsWorks::Instance.BlockDeviceMapping"
 [:map
  {:closed :true}
  ["DeviceName" {:optional true} [:ref "String"]]
  ["Ebs"
   {:optional true}
   [:ref "AWS::OpsWorks::Instance.EbsBlockDevice"]]
  ["NoDevice" {:optional true} [:ref "String"]]
  ["VirtualName" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPool.PasswordPolicy"
 [:map
  {:closed :true}
  ["RequireNumbers" {:optional true} [:ref "Boolean"]]
  ["MinimumLength" {:optional true} [:ref "Integer"]]
  ["TemporaryPasswordValidityDays" {:optional true} [:ref "Integer"]]
  ["RequireUppercase" {:optional true} [:ref "Boolean"]]
  ["RequireLowercase" {:optional true} [:ref "Boolean"]]
  ["RequireSymbols" {:optional true} [:ref "Boolean"]]],
 "AWS::CloudFront::Distribution.OriginGroup"
 [:map
  {:closed :true}
  ["Id" {:optional true} [:ref "String"]]
  ["FailoverCriteria"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.OriginGroupFailoverCriteria"]]
  ["Members"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.OriginGroupMembers"]]],
 "AWS::MediaLive::Channel.OutputSettings"
 [:map
  {:closed :true}
  ["MediaPackageOutputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.MediaPackageOutputSettings"]]
  ["MsSmoothOutputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.MsSmoothOutputSettings"]]
  ["FrameCaptureOutputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.FrameCaptureOutputSettings"]]
  ["HlsOutputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.HlsOutputSettings"]]
  ["RtmpOutputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.RtmpOutputSettings"]]
  ["UdpOutputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.UdpOutputSettings"]]
  ["MultiplexOutputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.MultiplexOutputSettings"]]
  ["ArchiveOutputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.ArchiveOutputSettings"]]],
 "AWS::EC2::LaunchTemplate.CapacityReservationTarget"
 [:map
  {:closed :true}
  ["CapacityReservationId" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource"
 [:map
  ["Type" [:= "AWS::Kendra::DataSource"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["IndexId" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]
    ["DataSourceConfiguration"
     {:optional true}
     [:ref "AWS::Kendra::DataSource.DataSourceConfiguration"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Schedule" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:ref "AWS::Kendra::DataSource.TagList"]]]]],
 "AWS::PinpointEmail::ConfigurationSet.SendingOptions"
 [:map
  {:closed :true}
  ["SendingEnabled" {:optional true} [:ref "Boolean"]]],
 "AWS::Config::DeliveryChannel.ConfigSnapshotDeliveryProperties"
 [:map
  {:closed :true}
  ["DeliveryFrequency" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinitionVersion"
 [:map
  ["Type" [:= "AWS::Greengrass::ResourceDefinitionVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Resources"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::Greengrass::ResourceDefinitionVersion.ResourceInstance"]]
      "Fn::If"]]
    ["ResourceDefinitionId" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.H265FilterSettings"
 [:map
  {:closed :true}
  ["TemporalFilterSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.TemporalFilterSettings"]]],
 "AWS::Events::Rule.RunCommandParameters"
 [:map
  {:closed :true}
  ["RunCommandTargets"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Events::Rule.RunCommandTarget"]]
    "Fn::If"]]],
 "AWS::IoTAnalytics::Dataset.VersioningConfiguration"
 [:map
  {:closed :true}
  ["MaxVersions" {:optional true} [:ref "Integer"]]
  ["Unlimited" {:optional true} [:ref "Boolean"]]],
 "AWS::IoTAnalytics::Dataset.IotEventsDestinationConfiguration"
 [:map
  {:closed :true}
  ["InputName" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::EC2::ClientVpnAuthorizationRule"
 [:map
  ["Type" [:= "AWS::EC2::ClientVpnAuthorizationRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ClientVpnEndpointId" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["AccessGroupId" {:optional true} [:ref "String"]]
    ["TargetNetworkCidr" {:optional true} [:ref "String"]]
    ["AuthorizeAllGroups" {:optional true} [:ref "Boolean"]]]]],
 "AWS::WorkSpaces::Workspace"
 [:map
  ["Type" [:= "AWS::WorkSpaces::Workspace"]]
  ["Properties"
   [:map
    {:closed :true}
    ["BundleId" {:optional true} [:ref "String"]]
    ["DirectoryId" {:optional true} [:ref "String"]]
    ["RootVolumeEncryptionEnabled" {:optional true} [:ref "Boolean"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["UserName" {:optional true} [:ref "String"]]
    ["UserVolumeEncryptionEnabled" {:optional true} [:ref "Boolean"]]
    ["VolumeEncryptionKey" {:optional true} [:ref "String"]]
    ["WorkspaceProperties"
     {:optional true}
     [:ref "AWS::WorkSpaces::Workspace.WorkspaceProperties"]]]]],
 "AWS::ApiGatewayV2::Api"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::Api"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Target" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["CredentialsArn" {:optional true} [:ref "String"]]
    ["DisableSchemaValidation" {:optional true} [:ref "Boolean"]]
    ["ProtocolType" {:optional true} [:ref "String"]]
    ["Body" {:optional true} [:ref "Json"]]
    ["CorsConfiguration"
     {:optional true}
     [:ref "AWS::ApiGatewayV2::Api.Cors"]]
    ["BodyS3Location"
     {:optional true}
     [:ref "AWS::ApiGatewayV2::Api.BodyS3Location"]]
    ["ApiKeySelectionExpression" {:optional true} [:ref "String"]]
    ["FailOnWarnings" {:optional true} [:ref "Boolean"]]
    ["RouteSelectionExpression" {:optional true} [:ref "String"]]
    ["RouteKey" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["BasePath" {:optional true} [:ref "String"]]
    ["Version" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisAnalyticsV2::Application.CheckpointConfiguration"
 [:map
  {:closed :true}
  ["ConfigurationType" {:optional true} [:ref "String"]]
  ["CheckpointInterval" {:optional true} [:ref "Integer"]]
  ["MinPauseBetweenCheckpoints" {:optional true} [:ref "Integer"]]
  ["CheckpointingEnabled" {:optional true} [:ref "Boolean"]]],
 "AWS::IoTAnalytics::Pipeline.AddAttributes"
 [:map
  {:closed :true}
  ["Next" {:optional true} [:ref "String"]]
  ["Attributes" {:optional true} [:ref "Json"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayClientPolicy"
 [:map
  {:closed :true}
  ["TLS"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualGateway.VirtualGatewayClientPolicyTls"]]],
 "AWS::AppMesh::GatewayRoute.GatewayRouteVirtualService"
 [:map
  {:closed :true}
  ["VirtualServiceName" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.TargetGroupTuple"
 [:map
  {:closed :true}
  ["TargetGroupArn" {:optional true} [:ref "String"]]
  ["Weight" {:optional true} [:ref "Integer"]]],
 "AWS::EMR::InstanceFleetConfig.EbsConfiguration"
 [:map
  {:closed :true}
  ["EbsBlockDeviceConfigs"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::EMR::InstanceFleetConfig.EbsBlockDeviceConfig"]]
    "Fn::If"]]
  ["EbsOptimized" {:optional true} [:ref "Boolean"]]],
 "AWS::CodeCommit::Repository.Code"
 [:map
  {:closed :true}
  ["S3" {:optional true} [:ref "AWS::CodeCommit::Repository.S3"]]
  ["BranchName" {:optional true} [:ref "String"]]],
 "AWS::Glue::Partition.SkewedInfo"
 [:map
  {:closed :true}
  ["SkewedColumnNames" {:optional true} [:ref "StringList"]]
  ["SkewedColumnValues" {:optional true} [:ref "StringList"]]
  ["SkewedColumnValueLocationMaps" {:optional true} [:ref "Json"]]],
 "AWS::KinesisAnalyticsV2::Application.JSONMappingParameters"
 [:map
  {:closed :true}
  ["RecordRowPath" {:optional true} [:ref "String"]]],
 "AWS::Glue::MLTransform"
 [:map
  ["Type" [:= "AWS::Glue::MLTransform"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MaxRetries" {:optional true} [:ref "Integer"]]
    ["Timeout" {:optional true} [:ref "Integer"]]
    ["NumberOfWorkers" {:optional true} [:ref "Integer"]]
    ["MaxCapacity" {:optional true} [:ref "Double"]]
    ["TransformParameters"
     {:optional true}
     [:ref "AWS::Glue::MLTransform.TransformParameters"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["WorkerType" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["GlueVersion" {:optional true} [:ref "String"]]
    ["Role" {:optional true} [:ref "String"]]
    ["InputRecordTables"
     {:optional true}
     [:ref "AWS::Glue::MLTransform.InputRecordTables"]]]]],
 "AWS::Kendra::Faq"
 [:map
  ["Type" [:= "AWS::Kendra::Faq"]]
  ["Properties"
   [:map
    {:closed :true}
    ["IndexId" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["S3Path" {:optional true} [:ref "AWS::Kendra::Faq.S3Path"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "AWS::Kendra::Faq.TagList"]]]]],
 "AWS::AppMesh::Mesh.MeshSpec"
 [:map
  {:closed :true}
  ["EgressFilter"
   {:optional true}
   [:ref "AWS::AppMesh::Mesh.EgressFilter"]]],
 "AWS::EC2::SecurityGroupEgress"
 [:map
  ["Type" [:= "AWS::EC2::SecurityGroupEgress"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CidrIpv6" {:optional true} [:ref "String"]]
    ["IpProtocol" {:optional true} [:ref "String"]]
    ["DestinationSecurityGroupId" {:optional true} [:ref "String"]]
    ["CidrIp" {:optional true} [:ref "String"]]
    ["ToPort" {:optional true} [:ref "Integer"]]
    ["GroupId" {:optional true} [:ref "String"]]
    ["DestinationPrefixListId" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["FromPort" {:optional true} [:ref "Integer"]]]]],
 "AWS::SageMaker::EndpointConfig.CaptureContentTypeHeader"
 [:map
  {:closed :true}
  ["JsonContentTypes" {:optional true} [:ref "StringList"]]
  ["CsvContentTypes" {:optional true} [:ref "StringList"]]],
 "AWS::Config::ConfigurationRecorder.RecordingGroup"
 [:map
  {:closed :true}
  ["AllSupported" {:optional true} [:ref "Boolean"]]
  ["IncludeGlobalResourceTypes" {:optional true} [:ref "Boolean"]]
  ["ResourceTypes" {:optional true} [:ref "StringList"]]],
 "AWS::ImageBuilder::DistributionConfiguration"
 [:map
  ["Type" [:= "AWS::ImageBuilder::DistributionConfiguration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Distributions"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ImageBuilder::DistributionConfiguration.Distribution"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:ref "StringMap"]]]]],
 "AWS::Greengrass::ResourceDefinition.SageMakerMachineLearningModelResourceData"
 [:map
  {:closed :true}
  ["OwnerSetting"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinition.ResourceDownloadOwnerSetting"]]
  ["DestinationPath" {:optional true} [:ref "String"]]
  ["SageMakerJobArn" {:optional true} [:ref "String"]]],
 "AWS::WAFRegional::RateBasedRule.Predicate"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["DataId" {:optional true} [:ref "String"]]
  ["Negated" {:optional true} [:ref "Boolean"]]],
 "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption.CloudWatchLoggingOption"
 [:map
  {:closed :true}
  ["LogStreamARN" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPool.Policies"
 [:map
  {:closed :true}
  ["PasswordPolicy"
   {:optional true}
   [:ref "AWS::Cognito::UserPool.PasswordPolicy"]]],
 "AWS::Logs::LogStream"
 [:map
  ["Type" [:= "AWS::Logs::LogStream"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LogGroupName" {:optional true} [:ref "String"]]
    ["LogStreamName" {:optional true} [:ref "String"]]]]],
 "AWS::ElastiCache::ParameterGroup"
 [:map
  ["Type" [:= "AWS::ElastiCache::ParameterGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CacheParameterGroupFamily" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Properties" {:optional true} [:ref "StringMap"]]]]],
 "AWS::LakeFormation::DataLakeSettings.Admins" [:map {:closed :true}],
 "AWS::KinesisAnalyticsV2::ApplicationOutput"
 [:map
  ["Type" [:= "AWS::KinesisAnalyticsV2::ApplicationOutput"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["Output"
     {:optional true}
     [:ref "AWS::KinesisAnalyticsV2::ApplicationOutput.Output"]]]]],
 "AWS::Lambda::Function"
 [:map
  ["Type" [:= "AWS::Lambda::Function"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Environment"
     {:optional true}
     [:ref "AWS::Lambda::Function.Environment"]]
    ["Timeout" {:optional true} [:ref "Integer"]]
    ["VpcConfig"
     {:optional true}
     [:ref "AWS::Lambda::Function.VpcConfig"]]
    ["DeadLetterConfig"
     {:optional true}
     [:ref "AWS::Lambda::Function.DeadLetterConfig"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["FunctionName" {:optional true} [:ref "String"]]
    ["KmsKeyArn" {:optional true} [:ref "String"]]
    ["TracingConfig"
     {:optional true}
     [:ref "AWS::Lambda::Function.TracingConfig"]]
    ["ReservedConcurrentExecutions" {:optional true} [:ref "Integer"]]
    ["Code" {:optional true} [:ref "AWS::Lambda::Function.Code"]]
    ["Description" {:optional true} [:ref "String"]]
    ["FileSystemConfigs"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Lambda::Function.FileSystemConfig"]]
      "Fn::If"]]
    ["Layers" {:optional true} [:ref "StringList"]]
    ["Runtime" {:optional true} [:ref "String"]]
    ["Role" {:optional true} [:ref "String"]]
    ["MemorySize" {:optional true} [:ref "Integer"]]
    ["Handler" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.InputSpecification"
 [:map
  {:closed :true}
  ["Codec" {:optional true} [:ref "String"]]
  ["MaximumBitrate" {:optional true} [:ref "String"]]
  ["Resolution" {:optional true} [:ref "String"]]],
 "AWS::SecretsManager::Secret.GenerateSecretString"
 [:map
  {:closed :true}
  ["ExcludePunctuation" {:optional true} [:ref "Boolean"]]
  ["RequireEachIncludedType" {:optional true} [:ref "Boolean"]]
  ["ExcludeNumbers" {:optional true} [:ref "Boolean"]]
  ["GenerateStringKey" {:optional true} [:ref "String"]]
  ["ExcludeUppercase" {:optional true} [:ref "Boolean"]]
  ["ExcludeLowercase" {:optional true} [:ref "Boolean"]]
  ["PasswordLength" {:optional true} [:ref "Integer"]]
  ["SecretStringTemplate" {:optional true} [:ref "String"]]
  ["ExcludeCharacters" {:optional true} [:ref "String"]]
  ["IncludeSpace" {:optional true} [:ref "Boolean"]]],
 "AWS::EMR::Cluster.ScriptBootstrapActionConfig"
 [:map
  {:closed :true}
  ["Args" {:optional true} [:ref "StringList"]]
  ["Path" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::StreamingDistribution.TrustedSigners"
 [:map
  {:closed :true}
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["AwsAccountNumbers" {:optional true} [:ref "StringList"]]],
 "AWS::OpsWorks::Layer.VolumeConfiguration"
 [:map
  {:closed :true}
  ["Encrypted" {:optional true} [:ref "Boolean"]]
  ["Iops" {:optional true} [:ref "Integer"]]
  ["MountPoint" {:optional true} [:ref "String"]]
  ["NumberOfDisks" {:optional true} [:ref "Integer"]]
  ["RaidLevel" {:optional true} [:ref "Integer"]]
  ["Size" {:optional true} [:ref "Integer"]]
  ["VolumeType" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPool.SchemaAttribute"
 [:map
  {:closed :true}
  ["DeveloperOnlyAttribute" {:optional true} [:ref "Boolean"]]
  ["Mutable" {:optional true} [:ref "Boolean"]]
  ["AttributeDataType" {:optional true} [:ref "String"]]
  ["StringAttributeConstraints"
   {:optional true}
   [:ref "AWS::Cognito::UserPool.StringAttributeConstraints"]]
  ["Required" {:optional true} [:ref "Boolean"]]
  ["NumberAttributeConstraints"
   {:optional true}
   [:ref "AWS::Cognito::UserPool.NumberAttributeConstraints"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::SSM::MaintenanceWindow"
 [:map
  ["Type" [:= "AWS::SSM::MaintenanceWindow"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AllowUnassociatedTargets" {:optional true} [:ref "Boolean"]]
    ["ScheduleTimezone" {:optional true} [:ref "String"]]
    ["StartDate" {:optional true} [:ref "String"]]
    ["Schedule" {:optional true} [:ref "String"]]
    ["Cutoff" {:optional true} [:ref "Integer"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Duration" {:optional true} [:ref "Integer"]]
    ["Description" {:optional true} [:ref "String"]]
    ["EndDate" {:optional true} [:ref "String"]]
    ["ScheduleOffset" {:optional true} [:ref "Integer"]]]]],
 "AWS::Route53::HostedZone.QueryLoggingConfig"
 [:map
  {:closed :true}
  ["CloudWatchLogsLogGroupArn" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.ServiceNowConfiguration"
 [:map
  {:closed :true}
  ["HostUrl" {:optional true} [:ref "String"]]
  ["SecretArn" {:optional true} [:ref "String"]]
  ["ServiceNowBuildVersion" {:optional true} [:ref "String"]]
  ["KnowledgeArticleConfiguration"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.ServiceNowKnowledgeArticleConfiguration"]]
  ["ServiceCatalogConfiguration"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.ServiceNowServiceCatalogConfiguration"]]],
 "AWS::ACMPCA::CertificateAuthorityActivation"
 [:map
  ["Type" [:= "AWS::ACMPCA::CertificateAuthorityActivation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CertificateAuthorityArn" {:optional true} [:ref "String"]]
    ["Certificate" {:optional true} [:ref "String"]]
    ["CertificateChain" {:optional true} [:ref "String"]]
    ["Status" {:optional true} [:ref "String"]]]]],
 "AWS::Events::EventBusPolicy"
 [:map
  ["Type" [:= "AWS::Events::EventBusPolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EventBusName" {:optional true} [:ref "String"]]
    ["Condition"
     {:optional true}
     [:ref "AWS::Events::EventBusPolicy.Condition"]]
    ["Action" {:optional true} [:ref "String"]]
    ["StatementId" {:optional true} [:ref "String"]]
    ["Principal" {:optional true} [:ref "String"]]]]],
 "AWS::RDS::OptionGroup.OptionSetting"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::ApiGatewayV2::Integration.TlsConfig"
 [:map
  {:closed :true}
  ["ServerNameToVerify" {:optional true} [:ref "String"]]],
 "AWS::EC2::PrefixList.Entry"
 [:map
  {:closed :true}
  ["Cidr" {:optional true} [:ref "String"]]
  ["Description" {:optional true} [:ref "String"]]],
 "AWS::ApplicationAutoScaling::ScalableTarget.ScalableTargetAction"
 [:map
  {:closed :true}
  ["MaxCapacity" {:optional true} [:ref "Integer"]]
  ["MinCapacity" {:optional true} [:ref "Integer"]]],
 "AWS::SSM::PatchBaseline.RuleGroup"
 [:map
  {:closed :true}
  ["PatchRules"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::SSM::PatchBaseline.Rule"]]
    "Fn::If"]]],
 "AWS::CodeDeploy::DeploymentGroup.S3Location"
 [:map
  {:closed :true}
  ["Bucket" {:optional true} [:ref "String"]]
  ["BundleType" {:optional true} [:ref "String"]]
  ["ETag" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]],
 "AWS::GuardDuty::Filter"
 [:map
  ["Type" [:= "AWS::GuardDuty::Filter"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Action" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["DetectorId" {:optional true} [:ref "String"]]
    ["FindingCriteria"
     {:optional true}
     [:ref "AWS::GuardDuty::Filter.FindingCriteria"]]
    ["Rank" {:optional true} [:ref "Integer"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Config::ConfigRule"
 [:map
  ["Type" [:= "AWS::Config::ConfigRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ConfigRuleName" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["InputParameters" {:optional true} [:ref "Json"]]
    ["MaximumExecutionFrequency" {:optional true} [:ref "String"]]
    ["Scope" {:optional true} [:ref "AWS::Config::ConfigRule.Scope"]]
    ["Source"
     {:optional true}
     [:ref "AWS::Config::ConfigRule.Source"]]]]],
 "AWS::S3::BucketPolicy"
 [:map
  ["Type" [:= "AWS::S3::BucketPolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Bucket" {:optional true} [:ref "String"]]
    ["PolicyDocument" {:optional true} [:ref "Json"]]]]],
 "AWS::AppMesh::VirtualNode.ListenerTls"
 [:map
  {:closed :true}
  ["Mode" {:optional true} [:ref "String"]]
  ["Certificate"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.ListenerTlsCertificate"]]],
 "AWS::AppSync::DataSource.HttpConfig"
 [:map
  {:closed :true}
  ["Endpoint" {:optional true} [:ref "String"]]
  ["AuthorizationConfig"
   {:optional true}
   [:ref "AWS::AppSync::DataSource.AuthorizationConfig"]]],
 "AWS::GameLift::Fleet.ServerProcess"
 [:map
  {:closed :true}
  ["ConcurrentExecutions" {:optional true} [:ref "Integer"]]
  ["LaunchPath" {:optional true} [:ref "String"]]
  ["Parameters" {:optional true} [:ref "String"]]],
 "AWS::Cognito::IdentityPool"
 [:map
  ["Type" [:= "AWS::Cognito::IdentityPool"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SupportedLoginProviders" {:optional true} [:ref "Json"]]
    ["DeveloperProviderName" {:optional true} [:ref "String"]]
    ["AllowUnauthenticatedIdentities"
     {:optional true}
     [:ref "Boolean"]]
    ["SamlProviderARNs" {:optional true} [:ref "StringList"]]
    ["CognitoIdentityProviders"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Cognito::IdentityPool.CognitoIdentityProvider"]]
      "Fn::If"]]
    ["CognitoEvents" {:optional true} [:ref "Json"]]
    ["OpenIdConnectProviderARNs" {:optional true} [:ref "StringList"]]
    ["PushSync"
     {:optional true}
     [:ref "AWS::Cognito::IdentityPool.PushSync"]]
    ["IdentityPoolName" {:optional true} [:ref "String"]]
    ["AllowClassicFlow" {:optional true} [:ref "Boolean"]]
    ["CognitoStreams"
     {:optional true}
     [:ref "AWS::Cognito::IdentityPool.CognitoStreams"]]]]],
 "AWS::ApplicationAutoScaling::ScalingPolicy.TargetTrackingScalingPolicyConfiguration"
 [:map
  {:closed :true}
  ["CustomizedMetricSpecification"
   {:optional true}
   [:ref
    "AWS::ApplicationAutoScaling::ScalingPolicy.CustomizedMetricSpecification"]]
  ["DisableScaleIn" {:optional true} [:ref "Boolean"]]
  ["PredefinedMetricSpecification"
   {:optional true}
   [:ref
    "AWS::ApplicationAutoScaling::ScalingPolicy.PredefinedMetricSpecification"]]
  ["ScaleInCooldown" {:optional true} [:ref "Integer"]]
  ["ScaleOutCooldown" {:optional true} [:ref "Integer"]]
  ["TargetValue" {:optional true} [:ref "Double"]]],
 "AWS::CodeDeploy::DeploymentConfig"
 [:map
  ["Type" [:= "AWS::CodeDeploy::DeploymentConfig"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DeploymentConfigName" {:optional true} [:ref "String"]]
    ["MinimumHealthyHosts"
     {:optional true}
     [:ref
      "AWS::CodeDeploy::DeploymentConfig.MinimumHealthyHosts"]]]]],
 "AWS::DLM::LifecyclePolicy.RetainRule"
 [:map
  {:closed :true}
  ["IntervalUnit" {:optional true} [:ref "String"]]
  ["Count" {:optional true} [:ref "Integer"]]
  ["Interval" {:optional true} [:ref "Integer"]]],
 "AWS::IoTEvents::DetectorModel.OnInput"
 [:map
  {:closed :true}
  ["Events"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoTEvents::DetectorModel.Event"]]
    "Fn::If"]]
  ["TransitionEvents"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::IoTEvents::DetectorModel.TransitionEvent"]]
    "Fn::If"]]],
 "AWS::SES::ReceiptFilter"
 [:map
  ["Type" [:= "AWS::SES::ReceiptFilter"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Filter"
     {:optional true}
     [:ref "AWS::SES::ReceiptFilter.Filter"]]]]],
 "AWS::DynamoDB::Table.AttributeDefinition"
 [:map
  {:closed :true}
  ["AttributeName" {:optional true} [:ref "String"]]
  ["AttributeType" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPoolUser"
 [:map
  ["Type" [:= "AWS::Cognito::UserPoolUser"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ValidationData"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Cognito::UserPoolUser.AttributeType"]]
      "Fn::If"]]
    ["UserPoolId" {:optional true} [:ref "String"]]
    ["Username" {:optional true} [:ref "String"]]
    ["MessageAction" {:optional true} [:ref "String"]]
    ["ClientMetadata" {:optional true} [:ref "Json"]]
    ["DesiredDeliveryMediums" {:optional true} [:ref "StringList"]]
    ["ForceAliasCreation" {:optional true} [:ref "Boolean"]]
    ["UserAttributes"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Cognito::UserPoolUser.AttributeType"]]
      "Fn::If"]]]]],
 "AWS::EC2::PrefixList"
 [:map
  ["Type" [:= "AWS::EC2::PrefixList"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PrefixListName" {:optional true} [:ref "String"]]
    ["AddressFamily" {:optional true} [:ref "String"]]
    ["MaxEntries" {:optional true} [:ref "Integer"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Entries"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EC2::PrefixList.Entry"]]
      "Fn::If"]]]]],
 "AWS::KinesisAnalytics::ApplicationOutput.Output"
 [:map
  {:closed :true}
  ["DestinationSchema"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::ApplicationOutput.DestinationSchema"]]
  ["LambdaOutput"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::ApplicationOutput.LambdaOutput"]]
  ["KinesisFirehoseOutput"
   {:optional true}
   [:ref
    "AWS::KinesisAnalytics::ApplicationOutput.KinesisFirehoseOutput"]]
  ["KinesisStreamsOutput"
   {:optional true}
   [:ref
    "AWS::KinesisAnalytics::ApplicationOutput.KinesisStreamsOutput"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.FilterRule"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::WAFRegional::XssMatchSet.XssMatchTuple"
 [:map
  {:closed :true}
  ["TextTransformation" {:optional true} [:ref "String"]]
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFRegional::XssMatchSet.FieldToMatch"]]],
 "AWS::EC2::VPC"
 [:map
  ["Type" [:= "AWS::EC2::VPC"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CidrBlock" {:optional true} [:ref "String"]]
    ["EnableDnsHostnames" {:optional true} [:ref "Boolean"]]
    ["EnableDnsSupport" {:optional true} [:ref "Boolean"]]
    ["InstanceTenancy" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::AppSync::DataSource.RelationalDatabaseConfig"
 [:map
  {:closed :true}
  ["RdsHttpEndpointConfig"
   {:optional true}
   [:ref "AWS::AppSync::DataSource.RdsHttpEndpointConfig"]]
  ["RelationalDatabaseSourceType" {:optional true} [:ref "String"]]],
 "AWS::EFS::FileSystem.BackupPolicy"
 [:map {:closed :true} ["Status" {:optional true} [:ref "String"]]],
 "AWS::EMR::InstanceFleetConfig.SpotProvisioningSpecification"
 [:map
  {:closed :true}
  ["BlockDurationMinutes" {:optional true} [:ref "Integer"]]
  ["TimeoutAction" {:optional true} [:ref "String"]]
  ["TimeoutDurationMinutes" {:optional true} [:ref "Integer"]]],
 "AWS::ElasticLoadBalancingV2::TargetGroup.TargetGroupAttribute"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::AppSync::Resolver.LambdaConflictHandlerConfig"
 [:map
  {:closed :true}
  ["LambdaConflictHandlerArn" {:optional true} [:ref "String"]]],
 "AWS::OpsWorks::Stack.StackConfigurationManager"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::Workteam.NotificationConfiguration"
 [:map
  {:closed :true}
  ["NotificationTopicArn" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.Listener"
 [:map
  {:closed :true}
  ["Timeout"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.ListenerTimeout"]]
  ["HealthCheck"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.HealthCheck"]]
  ["TLS"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.ListenerTls"]]
  ["PortMapping"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.PortMapping"]]],
 "AWS::Kendra::Index.CapacityUnitsConfiguration"
 [:map
  {:closed :true}
  ["StorageCapacityUnits" {:optional true} [:ref "Integer"]]
  ["QueryCapacityUnits" {:optional true} [:ref "Integer"]]],
 "AWS::WAF::WebACL.WafAction"
 [:map {:closed :true} ["Type" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::APNSSandboxChannel"
 [:map
  ["Type" [:= "AWS::Pinpoint::APNSSandboxChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TeamId" {:optional true} [:ref "String"]]
    ["Certificate" {:optional true} [:ref "String"]]
    ["BundleId" {:optional true} [:ref "String"]]
    ["PrivateKey" {:optional true} [:ref "String"]]
    ["TokenKeyId" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ApplicationId" {:optional true} [:ref "String"]]
    ["DefaultAuthenticationMethod" {:optional true} [:ref "String"]]
    ["TokenKey" {:optional true} [:ref "String"]]]]],
 "AWS::WAFv2::RuleGroup.Rule"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Priority" {:optional true} [:ref "Integer"]]
  ["Statement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.StatementOne"]]
  ["Action" {:optional true} [:ref "AWS::WAFv2::RuleGroup.RuleAction"]]
  ["VisibilityConfig"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.VisibilityConfig"]]],
 "AWS::EventSchemas::RegistryPolicy"
 [:map
  ["Type" [:= "AWS::EventSchemas::RegistryPolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Policy" {:optional true} [:ref "Json"]]
    ["RegistryName" {:optional true} [:ref "String"]]
    ["RevisionId" {:optional true} [:ref "String"]]]]],
 "AWS::IAM::Role"
 [:map
  ["Type" [:= "AWS::IAM::Role"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ManagedPolicyArns" {:optional true} [:ref "StringList"]]
    ["PermissionsBoundary" {:optional true} [:ref "String"]]
    ["Path" {:optional true} [:ref "String"]]
    ["Policies"
     {:optional true}
     [:or [:sequential [:ref "AWS::IAM::Role.Policy"]] "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["RoleName" {:optional true} [:ref "String"]]
    ["MaxSessionDuration" {:optional true} [:ref "Integer"]]
    ["Description" {:optional true} [:ref "String"]]
    ["AssumeRolePolicyDocument" {:optional true} [:ref "Json"]]]]],
 "AWS::EC2::InternetGateway"
 [:map
  ["Type" [:= "AWS::EC2::InternetGateway"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::SSM::MaintenanceWindowTask.MaintenanceWindowRunCommandParameters"
 [:map
  {:closed :true}
  ["NotificationConfig"
   {:optional true}
   [:ref "AWS::SSM::MaintenanceWindowTask.NotificationConfig"]]
  ["Comment" {:optional true} [:ref "String"]]
  ["Parameters" {:optional true} [:ref "Json"]]
  ["OutputS3BucketName" {:optional true} [:ref "String"]]
  ["DocumentHash" {:optional true} [:ref "String"]]
  ["DocumentHashType" {:optional true} [:ref "String"]]
  ["OutputS3KeyPrefix" {:optional true} [:ref "String"]]
  ["TimeoutSeconds" {:optional true} [:ref "Integer"]]
  ["ServiceRoleArn" {:optional true} [:ref "String"]]],
 "AWS::ECS::CapacityProvider.ManagedScaling"
 [:map
  {:closed :true}
  ["MinimumScalingStepSize" {:optional true} [:ref "Integer"]]
  ["MaximumScalingStepSize" {:optional true} [:ref "Integer"]]
  ["Status" {:optional true} [:ref "String"]]
  ["TargetCapacity" {:optional true} [:ref "Integer"]]],
 "AWS::DocDB::DBInstance"
 [:map
  ["Type" [:= "AWS::DocDB::DBInstance"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DBInstanceClass" {:optional true} [:ref "String"]]
    ["DBClusterIdentifier" {:optional true} [:ref "String"]]
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["AutoMinorVersionUpgrade" {:optional true} [:ref "Boolean"]]
    ["DBInstanceIdentifier" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EC2::VolumeAttachment"
 [:map
  ["Type" [:= "AWS::EC2::VolumeAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Device" {:optional true} [:ref "String"]]
    ["InstanceId" {:optional true} [:ref "String"]]
    ["VolumeId" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewaySpec"
 [:map
  {:closed :true}
  ["Logging"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualGateway.VirtualGatewayLogging"]]
  ["Listeners"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::AppMesh::VirtualGateway.VirtualGatewayListener"]]
    "Fn::If"]]
  ["BackendDefaults"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualGateway.VirtualGatewayBackendDefaults"]]],
 "AWS::SageMaker::Workteam.MemberDefinition"
 [:map
  {:closed :true}
  ["CognitoMemberDefinition"
   {:optional true}
   [:ref "AWS::SageMaker::Workteam.CognitoMemberDefinition"]]],
 "AWS::Synthetics::Canary.Code"
 [:map
  {:closed :true}
  ["S3Bucket" {:optional true} [:ref "String"]]
  ["S3Key" {:optional true} [:ref "String"]]
  ["S3ObjectVersion" {:optional true} [:ref "String"]]
  ["Script" {:optional true} [:ref "String"]]
  ["Handler" {:optional true} [:ref "String"]]],
 "AWS::Budgets::Budget.TimePeriod"
 [:map
  {:closed :true}
  ["Start" {:optional true} [:ref "String"]]
  ["End" {:optional true} [:ref "String"]]],
 "AWS::Route53::RecordSet"
 [:map
  ["Type" [:= "AWS::Route53::RecordSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AliasTarget"
     {:optional true}
     [:ref "AWS::Route53::RecordSet.AliasTarget"]]
    ["Comment" {:optional true} [:ref "String"]]
    ["MultiValueAnswer" {:optional true} [:ref "Boolean"]]
    ["Failover" {:optional true} [:ref "String"]]
    ["HostedZoneName" {:optional true} [:ref "String"]]
    ["ResourceRecords" {:optional true} [:ref "StringList"]]
    ["SetIdentifier" {:optional true} [:ref "String"]]
    ["TTL" {:optional true} [:ref "String"]]
    ["Region" {:optional true} [:ref "String"]]
    ["HostedZoneId" {:optional true} [:ref "String"]]
    ["HealthCheckId" {:optional true} [:ref "String"]]
    ["GeoLocation"
     {:optional true}
     [:ref "AWS::Route53::RecordSet.GeoLocation"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]
    ["Weight" {:optional true} [:ref "Integer"]]]]],
 "AWS::KinesisAnalytics::ApplicationReferenceDataSource.S3ReferenceDataSource"
 [:map
  {:closed :true}
  ["BucketARN" {:optional true} [:ref "String"]]
  ["FileKey" {:optional true} [:ref "String"]]
  ["ReferenceRoleARN" {:optional true} [:ref "String"]]],
 "AWS::Glue::Crawler"
 [:map
  ["Type" [:= "AWS::Glue::Crawler"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CrawlerSecurityConfiguration" {:optional true} [:ref "String"]]
    ["SchemaChangePolicy"
     {:optional true}
     [:ref "AWS::Glue::Crawler.SchemaChangePolicy"]]
    ["Schedule" {:optional true} [:ref "AWS::Glue::Crawler.Schedule"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Targets" {:optional true} [:ref "AWS::Glue::Crawler.Targets"]]
    ["Classifiers" {:optional true} [:ref "StringList"]]
    ["TablePrefix" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Role" {:optional true} [:ref "String"]]
    ["Configuration" {:optional true} [:ref "String"]]
    ["DatabaseName" {:optional true} [:ref "String"]]]]],
 "AWS::WAFv2::WebACL.OrStatementTwo"
 [:map
  {:closed :true}
  ["Statements"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.StatementThree"]]
    "Fn::If"]]],
 "AWS::IoTAnalytics::Datastore.ServiceManagedS3"
 [:map {:closed :true}],
 "AWS::KinesisAnalyticsV2::ApplicationOutput.LambdaOutput"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::Route.TcpTimeout"
 [:map
  {:closed :true}
  ["Idle" {:optional true} [:ref "AWS::AppMesh::Route.Duration"]]],
 "AWS::EMR::InstanceGroupConfig.ScalingAction"
 [:map
  {:closed :true}
  ["Market" {:optional true} [:ref "String"]]
  ["SimpleScalingPolicyConfiguration"
   {:optional true}
   [:ref
    "AWS::EMR::InstanceGroupConfig.SimpleScalingPolicyConfiguration"]]],
 "AWS::WAFv2::RuleGroup.TextTransformation"
 [:map
  {:closed :true}
  ["Priority" {:optional true} [:ref "Integer"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::ElastiCache::ReplicationGroup.NodeGroupConfiguration"
 [:map
  {:closed :true}
  ["NodeGroupId" {:optional true} [:ref "String"]]
  ["PrimaryAvailabilityZone" {:optional true} [:ref "String"]]
  ["ReplicaAvailabilityZones" {:optional true} [:ref "StringList"]]
  ["ReplicaCount" {:optional true} [:ref "Integer"]]
  ["Slots" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.ResetTimer"
 [:map {:closed :true} ["TimerName" {:optional true} [:ref "String"]]],
 "AWS::Amplify::App.BasicAuthConfig"
 [:map
  {:closed :true}
  ["Username" {:optional true} [:ref "String"]]
  ["EnableBasicAuth" {:optional true} [:ref "Boolean"]]
  ["Password" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.ArchiveOutputSettings"
 [:map
  {:closed :true}
  ["Extension" {:optional true} [:ref "String"]]
  ["NameModifier" {:optional true} [:ref "String"]]
  ["ContainerSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.ArchiveContainerSettings"]]],
 "AWS::IoTAnalytics::Dataset.DatasetContentDeliveryRuleDestination"
 [:map
  {:closed :true}
  ["IotEventsDestinationConfiguration"
   {:optional true}
   [:ref
    "AWS::IoTAnalytics::Dataset.IotEventsDestinationConfiguration"]]
  ["S3DestinationConfiguration"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Dataset.S3DestinationConfiguration"]]],
 "AWS::Greengrass::ResourceDefinition.LocalVolumeResourceData"
 [:map
  {:closed :true}
  ["SourcePath" {:optional true} [:ref "String"]]
  ["DestinationPath" {:optional true} [:ref "String"]]
  ["GroupOwnerSetting"
   {:optional true}
   [:ref "AWS::Greengrass::ResourceDefinition.GroupOwnerSetting"]]],
 "AWS::Kendra::DataSource.SalesforceStandardObjectConfiguration"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["DocumentDataFieldName" {:optional true} [:ref "String"]]
  ["DocumentTitleFieldName" {:optional true} [:ref "String"]]
  ["FieldMappings"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"]]],
 "AWS::CloudFront::CachePolicy"
 [:map
  ["Type" [:= "AWS::CloudFront::CachePolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CachePolicyConfig"
     {:optional true}
     [:ref "AWS::CloudFront::CachePolicy.CachePolicyConfig"]]]]],
 "AWS::Amplify::App.CustomRule"
 [:map
  {:closed :true}
  ["Condition" {:optional true} [:ref "String"]]
  ["Status" {:optional true} [:ref "String"]]
  ["Target" {:optional true} [:ref "String"]]
  ["Source" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::CachePolicy.ParametersInCacheKeyAndForwardedToOrigin"
 [:map
  {:closed :true}
  ["CookiesConfig"
   {:optional true}
   [:ref "AWS::CloudFront::CachePolicy.CookiesConfig"]]
  ["EnableAcceptEncodingGzip" {:optional true} [:ref "Boolean"]]
  ["HeadersConfig"
   {:optional true}
   [:ref "AWS::CloudFront::CachePolicy.HeadersConfig"]]
  ["QueryStringsConfig"
   {:optional true}
   [:ref "AWS::CloudFront::CachePolicy.QueryStringsConfig"]]],
 "AWS::MSK::Cluster.Firehose"
 [:map
  {:closed :true}
  ["DeliveryStream" {:optional true} [:ref "String"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::Kinesis::Stream"
 [:map
  ["Type" [:= "AWS::Kinesis::Stream"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["RetentionPeriodHours" {:optional true} [:ref "Integer"]]
    ["ShardCount" {:optional true} [:ref "Integer"]]
    ["StreamEncryption"
     {:optional true}
     [:ref "AWS::Kinesis::Stream.StreamEncryption"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::AppMesh::Route.HttpRouteHeader"
 [:map
  {:closed :true}
  ["Invert" {:optional true} [:ref "Boolean"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Match"
   {:optional true}
   [:ref "AWS::AppMesh::Route.HeaderMatchMethod"]]],
 "AWS::ElasticLoadBalancingV2::LoadBalancer.SubnetMapping"
 [:map
  {:closed :true}
  ["AllocationId" {:optional true} [:ref "String"]]
  ["PrivateIPv4Address" {:optional true} [:ref "String"]]
  ["SubnetId" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.HostVolumeProperties"
 [:map
  {:closed :true}
  ["SourcePath" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.SpotProvisioningSpecification"
 [:map
  {:closed :true}
  ["BlockDurationMinutes" {:optional true} [:ref "Integer"]]
  ["TimeoutAction" {:optional true} [:ref "String"]]
  ["TimeoutDurationMinutes" {:optional true} [:ref "Integer"]]],
 "AWS::S3::Bucket.RoutingRuleCondition"
 [:map
  {:closed :true}
  ["HttpErrorCodeReturnedEquals" {:optional true} [:ref "String"]]
  ["KeyPrefixEquals" {:optional true} [:ref "String"]]],
 "AWS::Glue::Table.Order"
 [:map
  {:closed :true}
  ["Column" {:optional true} [:ref "String"]]
  ["SortOrder" {:optional true} [:ref "Integer"]]],
 "AWS::Greengrass::ResourceDefinitionVersion.ResourceInstance"
 [:map
  {:closed :true}
  ["ResourceDataContainer"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinitionVersion.ResourceDataContainer"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::SES::ConfigurationSetEventDestination.EventDestination"
 [:map
  {:closed :true}
  ["CloudWatchDestination"
   {:optional true}
   [:ref
    "AWS::SES::ConfigurationSetEventDestination.CloudWatchDestination"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["MatchingEventTypes" {:optional true} [:ref "StringList"]]
  ["Name" {:optional true} [:ref "String"]]
  ["KinesisFirehoseDestination"
   {:optional true}
   [:ref
    "AWS::SES::ConfigurationSetEventDestination.KinesisFirehoseDestination"]]],
 "AWS::CodeBuild::Project.BuildStatusConfig"
 [:map
  {:closed :true}
  ["Context" {:optional true} [:ref "String"]]
  ["TargetUrl" {:optional true} [:ref "String"]]],
 "AWS::ImageBuilder::InfrastructureConfiguration.S3Logs"
 [:map
  {:closed :true}
  ["S3BucketName" {:optional true} [:ref "String"]]
  ["S3KeyPrefix" {:optional true} [:ref "String"]]],
 "AWS::WAFRegional::SizeConstraintSet"
 [:map
  ["Type" [:= "AWS::WAFRegional::SizeConstraintSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SizeConstraints"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::WAFRegional::SizeConstraintSet.SizeConstraint"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::AutoScaling::ScalingPolicy"
 [:map
  ["Type" [:= "AWS::AutoScaling::ScalingPolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ScalingAdjustment" {:optional true} [:ref "Integer"]]
    ["MetricAggregationType" {:optional true} [:ref "String"]]
    ["Cooldown" {:optional true} [:ref "String"]]
    ["AutoScalingGroupName" {:optional true} [:ref "String"]]
    ["StepAdjustments"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::AutoScaling::ScalingPolicy.StepAdjustment"]]
      "Fn::If"]]
    ["PolicyType" {:optional true} [:ref "String"]]
    ["EstimatedInstanceWarmup" {:optional true} [:ref "Integer"]]
    ["TargetTrackingConfiguration"
     {:optional true}
     [:ref
      "AWS::AutoScaling::ScalingPolicy.TargetTrackingConfiguration"]]
    ["AdjustmentType" {:optional true} [:ref "String"]]
    ["MinAdjustmentMagnitude" {:optional true} [:ref "Integer"]]]]],
 "AWS::S3::Bucket.DataExport"
 [:map
  {:closed :true}
  ["Destination" {:optional true} [:ref "AWS::S3::Bucket.Destination"]]
  ["OutputSchemaVersion" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ConnectorDefinition.ConnectorDefinitionVersion"
 [:map
  {:closed :true}
  ["Connectors"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::Greengrass::ConnectorDefinition.Connector"]]
    "Fn::If"]]],
 "AWS::AccessAnalyzer::Analyzer"
 [:map
  ["Type" [:= "AWS::AccessAnalyzer::Analyzer"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AnalyzerName" {:optional true} [:ref "String"]]
    ["ArchiveRules"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::AccessAnalyzer::Analyzer.ArchiveRule"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Type" {:optional true} [:ref "String"]]]]],
 "AWS::IoTEvents::DetectorModel.AssetPropertyValue"
 [:map
  {:closed :true}
  ["Quality" {:optional true} [:ref "String"]]
  ["Value"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.AssetPropertyVariant"]]
  ["Timestamp"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.AssetPropertyTimestamp"]]],
 "AWS::StepFunctions::StateMachine.LogDestination"
 [:map
  {:closed :true}
  ["CloudWatchLogsLogGroup"
   {:optional true}
   [:ref "AWS::StepFunctions::StateMachine.CloudWatchLogsLogGroup"]]],
 "AWS::OpsWorks::Layer"
 [:map
  ["Type" [:= "AWS::OpsWorks::Layer"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CustomInstanceProfileArn" {:optional true} [:ref "String"]]
    ["EnableAutoHealing" {:optional true} [:ref "Boolean"]]
    ["CustomJson" {:optional true} [:ref "Json"]]
    ["Shortname" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["StackId" {:optional true} [:ref "String"]]
    ["UseEbsOptimizedInstances" {:optional true} [:ref "Boolean"]]
    ["Packages" {:optional true} [:ref "StringList"]]
    ["CustomSecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["LoadBasedAutoScaling"
     {:optional true}
     [:ref "AWS::OpsWorks::Layer.LoadBasedAutoScaling"]]
    ["AutoAssignElasticIps" {:optional true} [:ref "Boolean"]]
    ["InstallUpdatesOnBoot" {:optional true} [:ref "Boolean"]]
    ["CustomRecipes"
     {:optional true}
     [:ref "AWS::OpsWorks::Layer.Recipes"]]
    ["VolumeConfigurations"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::OpsWorks::Layer.VolumeConfiguration"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]
    ["LifecycleEventConfiguration"
     {:optional true}
     [:ref "AWS::OpsWorks::Layer.LifecycleEventConfiguration"]]
    ["Attributes" {:optional true} [:ref "StringMap"]]
    ["AutoAssignPublicIps" {:optional true} [:ref "Boolean"]]]]],
 "AWS::ApplicationAutoScaling::ScalableTarget.SuspendedState"
 [:map
  {:closed :true}
  ["DynamicScalingInSuspended" {:optional true} [:ref "Boolean"]]
  ["DynamicScalingOutSuspended" {:optional true} [:ref "Boolean"]]
  ["ScheduledScalingSuspended" {:optional true} [:ref "Boolean"]]],
 "AWS::SSM::PatchBaseline.PatchFilterGroup"
 [:map
  {:closed :true}
  ["PatchFilters"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::SSM::PatchBaseline.PatchFilter"]]
    "Fn::If"]]],
 "AWS::AmazonMQ::Broker.MaintenanceWindow"
 [:map
  {:closed :true}
  ["DayOfWeek" {:optional true} [:ref "String"]]
  ["TimeOfDay" {:optional true} [:ref "String"]]
  ["TimeZone" {:optional true} [:ref "String"]]],
 "AWS::Config::OrganizationConformancePack"
 [:map
  ["Type" [:= "AWS::Config::OrganizationConformancePack"]]
  ["Properties"
   [:map
    {:closed :true}
    ["OrganizationConformancePackName"
     {:optional true}
     [:ref "String"]]
    ["TemplateS3Uri" {:optional true} [:ref "String"]]
    ["TemplateBody" {:optional true} [:ref "String"]]
    ["DeliveryS3Bucket" {:optional true} [:ref "String"]]
    ["DeliveryS3KeyPrefix" {:optional true} [:ref "String"]]
    ["ConformancePackInputParameters"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::Config::OrganizationConformancePack.ConformancePackInputParameter"]]
      "Fn::If"]]
    ["ExcludedAccounts" {:optional true} [:ref "StringList"]]]]],
 "AWS::Pinpoint::GCMChannel"
 [:map
  ["Type" [:= "AWS::Pinpoint::GCMChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApiKey" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ApplicationId" {:optional true} [:ref "String"]]]]],
 "AWS::Kinesis::StreamConsumer"
 [:map
  ["Type" [:= "AWS::Kinesis::StreamConsumer"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ConsumerName" {:optional true} [:ref "String"]]
    ["StreamARN" {:optional true} [:ref "String"]]]]],
 "AWS::Glue::Job.JobCommand"
 [:map
  {:closed :true}
  ["PythonVersion" {:optional true} [:ref "String"]]
  ["ScriptLocation" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Lambda::Version.ProvisionedConcurrencyConfiguration"
 [:map
  {:closed :true}
  ["ProvisionedConcurrentExecutions"
   {:optional true}
   [:ref "Integer"]]],
 "AWS::KinesisFirehose::DeliveryStream"
 [:map
  ["Type" [:= "AWS::KinesisFirehose::DeliveryStream"]]
  ["Properties"
   [:map
    {:closed :true}
    ["HttpEndpointDestinationConfiguration"
     {:optional true}
     [:ref
      "AWS::KinesisFirehose::DeliveryStream.HttpEndpointDestinationConfiguration"]]
    ["DeliveryStreamName" {:optional true} [:ref "String"]]
    ["S3DestinationConfiguration"
     {:optional true}
     [:ref
      "AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration"]]
    ["RedshiftDestinationConfiguration"
     {:optional true}
     [:ref
      "AWS::KinesisFirehose::DeliveryStream.RedshiftDestinationConfiguration"]]
    ["SplunkDestinationConfiguration"
     {:optional true}
     [:ref
      "AWS::KinesisFirehose::DeliveryStream.SplunkDestinationConfiguration"]]
    ["KinesisStreamSourceConfiguration"
     {:optional true}
     [:ref
      "AWS::KinesisFirehose::DeliveryStream.KinesisStreamSourceConfiguration"]]
    ["ExtendedS3DestinationConfiguration"
     {:optional true}
     [:ref
      "AWS::KinesisFirehose::DeliveryStream.ExtendedS3DestinationConfiguration"]]
    ["DeliveryStreamType" {:optional true} [:ref "String"]]
    ["ElasticsearchDestinationConfiguration"
     {:optional true}
     [:ref
      "AWS::KinesisFirehose::DeliveryStream.ElasticsearchDestinationConfiguration"]]]]],
 "AWS::CloudWatch::Alarm.MetricStat"
 [:map
  {:closed :true}
  ["Metric" {:optional true} [:ref "AWS::CloudWatch::Alarm.Metric"]]
  ["Period" {:optional true} [:ref "Integer"]]
  ["Stat" {:optional true} [:ref "String"]]
  ["Unit" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Segment.Coordinates"
 [:map
  {:closed :true}
  ["Latitude" {:optional true} [:ref "Double"]]
  ["Longitude" {:optional true} [:ref "Double"]]],
 "AWS::Kendra::DataSource.ChangeDetectingColumns"
 [:map
  {:closed :true}
  ["ChangeDetectingColumns" {:optional true} [:ref "StringList"]]],
 "AWS::SSM::MaintenanceWindowTask"
 [:map
  ["Type" [:= "AWS::SSM::MaintenanceWindowTask"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MaxErrors" {:optional true} [:ref "String"]]
    ["WindowId" {:optional true} [:ref "String"]]
    ["TaskType" {:optional true} [:ref "String"]]
    ["LoggingInfo"
     {:optional true}
     [:ref "AWS::SSM::MaintenanceWindowTask.LoggingInfo"]]
    ["MaxConcurrency" {:optional true} [:ref "String"]]
    ["TaskArn" {:optional true} [:ref "String"]]
    ["Targets"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::SSM::MaintenanceWindowTask.Target"]]
      "Fn::If"]]
    ["TaskInvocationParameters"
     {:optional true}
     [:ref "AWS::SSM::MaintenanceWindowTask.TaskInvocationParameters"]]
    ["Priority" {:optional true} [:ref "Integer"]]
    ["ServiceRoleArn" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["TaskParameters" {:optional true} [:ref "Json"]]]]],
 "AWS::Neptune::DBSubnetGroup"
 [:map
  ["Type" [:= "AWS::Neptune::DBSubnetGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DBSubnetGroupName" {:optional true} [:ref "String"]]
    ["DBSubnetGroupDescription" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::CloudFront::RealtimeLogConfig"
 [:map
  ["Type" [:= "AWS::CloudFront::RealtimeLogConfig"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EndPoints"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CloudFront::RealtimeLogConfig.EndPoint"]]
      "Fn::If"]]
    ["Fields" {:optional true} [:ref "StringList"]]
    ["Name" {:optional true} [:ref "String"]]
    ["SamplingRate" {:optional true} [:ref "Double"]]]]],
 "AWS::ApiGatewayV2::DomainName.DomainNameConfiguration"
 [:map
  {:closed :true}
  ["EndpointType" {:optional true} [:ref "String"]]
  ["CertificateName" {:optional true} [:ref "String"]]
  ["CertificateArn" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.HlsBasicPutSettings"
 [:map
  {:closed :true}
  ["FilecacheDuration" {:optional true} [:ref "Integer"]]
  ["NumRetries" {:optional true} [:ref "Integer"]]
  ["RestartDelay" {:optional true} [:ref "Integer"]]
  ["ConnectionRetryInterval" {:optional true} [:ref "Integer"]]],
 "AWS::EC2::CustomerGateway"
 [:map
  ["Type" [:= "AWS::EC2::CustomerGateway"]]
  ["Properties"
   [:map
    {:closed :true}
    ["BgpAsn" {:optional true} [:ref "Integer"]]
    ["IpAddress" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Type" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.H264Settings"
 [:map
  {:closed :true}
  ["GopSize" {:optional true} [:ref "Double"]]
  ["EntropyEncoding" {:optional true} [:ref "String"]]
  ["NumRefFrames" {:optional true} [:ref "Integer"]]
  ["GopNumBFrames" {:optional true} [:ref "Integer"]]
  ["AdaptiveQuantization" {:optional true} [:ref "String"]]
  ["ParNumerator" {:optional true} [:ref "Integer"]]
  ["Softness" {:optional true} [:ref "Integer"]]
  ["Profile" {:optional true} [:ref "String"]]
  ["ParDenominator" {:optional true} [:ref "Integer"]]
  ["QualityLevel" {:optional true} [:ref "String"]]
  ["SceneChangeDetect" {:optional true} [:ref "String"]]
  ["SpatialAq" {:optional true} [:ref "String"]]
  ["FlickerAq" {:optional true} [:ref "String"]]
  ["FixedAfd" {:optional true} [:ref "String"]]
  ["ForceFieldPictures" {:optional true} [:ref "String"]]
  ["MinIInterval" {:optional true} [:ref "Integer"]]
  ["QvbrQualityLevel" {:optional true} [:ref "Integer"]]
  ["Syntax" {:optional true} [:ref "String"]]
  ["ColorMetadata" {:optional true} [:ref "String"]]
  ["TemporalAq" {:optional true} [:ref "String"]]
  ["FramerateNumerator" {:optional true} [:ref "Integer"]]
  ["RateControlMode" {:optional true} [:ref "String"]]
  ["SubgopLength" {:optional true} [:ref "String"]]
  ["ScanType" {:optional true} [:ref "String"]]
  ["Bitrate" {:optional true} [:ref "Integer"]]
  ["ColorSpaceSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.H264ColorSpaceSettings"]]
  ["TimecodeInsertion" {:optional true} [:ref "String"]]
  ["ParControl" {:optional true} [:ref "String"]]
  ["Level" {:optional true} [:ref "String"]]
  ["GopSizeUnits" {:optional true} [:ref "String"]]
  ["MaxBitrate" {:optional true} [:ref "Integer"]]
  ["FramerateDenominator" {:optional true} [:ref "Integer"]]
  ["Slices" {:optional true} [:ref "Integer"]]
  ["BufFillPct" {:optional true} [:ref "Integer"]]
  ["LookAheadRateControl" {:optional true} [:ref "String"]]
  ["FilterSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.H264FilterSettings"]]
  ["GopClosedCadence" {:optional true} [:ref "Integer"]]
  ["GopBReference" {:optional true} [:ref "String"]]
  ["AfdSignaling" {:optional true} [:ref "String"]]
  ["BufSize" {:optional true} [:ref "Integer"]]
  ["FramerateControl" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::Input.Attribute"
 [:map {:closed :true} ["JsonPath" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Dataset.RetentionPeriod"
 [:map
  {:closed :true}
  ["NumberOfDays" {:optional true} [:ref "Integer"]]
  ["Unlimited" {:optional true} [:ref "Boolean"]]],
 "AWS::SecurityHub::Hub"
 [:map
  ["Type" [:= "AWS::SecurityHub::Hub"]]
  ["Properties"
   [:map {:closed :true} ["Tags" {:optional true} [:ref "Json"]]]]],
 "AWS::Budgets::Budget.NotificationWithSubscribers"
 [:map
  {:closed :true}
  ["Subscribers"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Budgets::Budget.Subscriber"]]
    "Fn::If"]]
  ["Notification"
   {:optional true}
   [:ref "AWS::Budgets::Budget.Notification"]]],
 "AWS::ApplicationAutoScaling::ScalingPolicy"
 [:map
  ["Type" [:= "AWS::ApplicationAutoScaling::ScalingPolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PolicyName" {:optional true} [:ref "String"]]
    ["PolicyType" {:optional true} [:ref "String"]]
    ["ResourceId" {:optional true} [:ref "String"]]
    ["ScalableDimension" {:optional true} [:ref "String"]]
    ["ScalingTargetId" {:optional true} [:ref "String"]]
    ["ServiceNamespace" {:optional true} [:ref "String"]]
    ["StepScalingPolicyConfiguration"
     {:optional true}
     [:ref
      "AWS::ApplicationAutoScaling::ScalingPolicy.StepScalingPolicyConfiguration"]]
    ["TargetTrackingScalingPolicyConfiguration"
     {:optional true}
     [:ref
      "AWS::ApplicationAutoScaling::ScalingPolicy.TargetTrackingScalingPolicyConfiguration"]]]]],
 "AWS::WAF::Rule"
 [:map
  ["Type" [:= "AWS::WAF::Rule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MetricName" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Predicates"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::WAF::Rule.Predicate"]]
      "Fn::If"]]]]],
 "AWS::ServiceCatalog::TagOptionAssociation"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::TagOptionAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TagOptionId" {:optional true} [:ref "String"]]
    ["ResourceId" {:optional true} [:ref "String"]]]]],
 "AWS::Elasticsearch::Domain.ElasticsearchClusterConfig"
 [:map
  {:closed :true}
  ["DedicatedMasterCount" {:optional true} [:ref "Integer"]]
  ["DedicatedMasterEnabled" {:optional true} [:ref "Boolean"]]
  ["DedicatedMasterType" {:optional true} [:ref "String"]]
  ["InstanceCount" {:optional true} [:ref "Integer"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["ZoneAwarenessConfig"
   {:optional true}
   [:ref "AWS::Elasticsearch::Domain.ZoneAwarenessConfig"]]
  ["ZoneAwarenessEnabled" {:optional true} [:ref "Boolean"]]],
 "AWS::AppMesh::VirtualNode.TlsValidationContextAcmTrust"
 [:map
  {:closed :true}
  ["CertificateAuthorityArns" {:optional true} [:ref "StringList"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.QueryStringConfig"
 [:map
  {:closed :true}
  ["Values"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::ElasticLoadBalancingV2::ListenerRule.QueryStringKeyValue"]]
    "Fn::If"]]],
 "AWS::NetworkManager::LinkAssociation"
 [:map
  ["Type" [:= "AWS::NetworkManager::LinkAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GlobalNetworkId" {:optional true} [:ref "String"]]
    ["DeviceId" {:optional true} [:ref "String"]]
    ["LinkId" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::VPCEndpointServicePermissions"
 [:map
  ["Type" [:= "AWS::EC2::VPCEndpointServicePermissions"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AllowedPrincipals" {:optional true} [:ref "StringList"]]
    ["ServiceId" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualNode.ClientPolicyTls"
 [:map
  {:closed :true}
  ["Validation"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.TlsValidationContext"]]
  ["Enforce" {:optional true} [:ref "Boolean"]]
  ["Ports" {:optional true} [:ref "IntegerList"]]],
 "AWS::CloudFront::Distribution.CustomOriginConfig"
 [:map
  {:closed :true}
  ["OriginReadTimeout" {:optional true} [:ref "Integer"]]
  ["HTTPSPort" {:optional true} [:ref "Integer"]]
  ["OriginKeepaliveTimeout" {:optional true} [:ref "Integer"]]
  ["OriginSSLProtocols" {:optional true} [:ref "StringList"]]
  ["HTTPPort" {:optional true} [:ref "Integer"]]
  ["OriginProtocolPolicy" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.KernelCapabilities"
 [:map
  {:closed :true}
  ["Add" {:optional true} [:ref "StringList"]]
  ["Drop" {:optional true} [:ref "StringList"]]],
 "AWS::Glue::Table.Column"
 [:map
  {:closed :true}
  ["Comment" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskSet"
 [:map
  ["Type" [:= "AWS::ECS::TaskSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Service" {:optional true} [:ref "String"]]
    ["ExternalId" {:optional true} [:ref "String"]]
    ["Scale" {:optional true} [:ref "AWS::ECS::TaskSet.Scale"]]
    ["TaskDefinition" {:optional true} [:ref "String"]]
    ["ServiceRegistries"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ECS::TaskSet.ServiceRegistry"]]
      "Fn::If"]]
    ["PlatformVersion" {:optional true} [:ref "String"]]
    ["NetworkConfiguration"
     {:optional true}
     [:ref "AWS::ECS::TaskSet.NetworkConfiguration"]]
    ["LoadBalancers"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ECS::TaskSet.LoadBalancer"]]
      "Fn::If"]]
    ["Cluster" {:optional true} [:ref "String"]]
    ["LaunchType" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::Subnet"
 [:map
  ["Type" [:= "AWS::EC2::Subnet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AssignIpv6AddressOnCreation" {:optional true} [:ref "Boolean"]]
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["CidrBlock" {:optional true} [:ref "String"]]
    ["Ipv6CidrBlock" {:optional true} [:ref "String"]]
    ["MapPublicIpOnLaunch" {:optional true} [:ref "Boolean"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::ApiGateway::BasePathMapping"
 [:map
  ["Type" [:= "AWS::ApiGateway::BasePathMapping"]]
  ["Properties"
   [:map
    {:closed :true}
    ["BasePath" {:optional true} [:ref "String"]]
    ["DomainName" {:optional true} [:ref "String"]]
    ["RestApiId" {:optional true} [:ref "String"]]
    ["Stage" {:optional true} [:ref "String"]]]]],
 "AWS::SecretsManager::RotationSchedule.RotationRules"
 [:map
  {:closed :true}
  ["AutomaticallyAfterDays" {:optional true} [:ref "Integer"]]],
 "AWS::MediaLive::Channel.AribSourceSettings" [:map {:closed :true}],
 "AWS::EC2::SecurityGroupIngress"
 [:map
  ["Type" [:= "AWS::EC2::SecurityGroupIngress"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SourceSecurityGroupOwnerId" {:optional true} [:ref "String"]]
    ["CidrIpv6" {:optional true} [:ref "String"]]
    ["IpProtocol" {:optional true} [:ref "String"]]
    ["CidrIp" {:optional true} [:ref "String"]]
    ["ToPort" {:optional true} [:ref "Integer"]]
    ["SourceSecurityGroupName" {:optional true} [:ref "String"]]
    ["SourceSecurityGroupId" {:optional true} [:ref "String"]]
    ["GroupId" {:optional true} [:ref "String"]]
    ["SourcePrefixListId" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["FromPort" {:optional true} [:ref "Integer"]]
    ["GroupName" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualService.VirtualServiceProvider"
 [:map
  {:closed :true}
  ["VirtualNode"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualService.VirtualNodeServiceProvider"]]
  ["VirtualRouter"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualService.VirtualRouterServiceProvider"]]],
 "AWS::CodeStarNotifications::NotificationRule.Target"
 [:map
  {:closed :true}
  ["TargetType" {:optional true} [:ref "String"]]
  ["TargetAddress" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.ProxyConfiguration"
 [:map
  {:closed :true}
  ["ContainerName" {:optional true} [:ref "String"]]
  ["ProxyConfigurationProperties"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.KeyValuePair"]]
    "Fn::If"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::GroundStation::Config"
 [:map
  ["Type" [:= "AWS::GroundStation::Config"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ConfigData" {:optional true} [:ref "Json"]]]]],
 "AWS::Kendra::DataSource.SalesforceChatterFeedIncludeFilterTypes"
 [:map
  {:closed :true}
  ["SalesforceChatterFeedIncludeFilterTypes"
   {:optional true}
   [:ref "StringList"]]],
 "AWS::EC2::PlacementGroup"
 [:map
  ["Type" [:= "AWS::EC2::PlacementGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Strategy" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.AvailSettings"
 [:map
  {:closed :true}
  ["Scte35SpliceInsert"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Scte35SpliceInsert"]]
  ["Scte35TimeSignalApos"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Scte35TimeSignalApos"]]],
 "AWS::Pinpoint::BaiduChannel"
 [:map
  ["Type" [:= "AWS::Pinpoint::BaiduChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SecretKey" {:optional true} [:ref "String"]]
    ["ApiKey" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ApplicationId" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisFirehose::DeliveryStream.HttpEndpointDestinationConfiguration"
 [:map
  {:closed :true}
  ["EndpointConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.HttpEndpointConfiguration"]]
  ["RoleARN" {:optional true} [:ref "String"]]
  ["RequestConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.HttpEndpointRequestConfiguration"]]
  ["CloudWatchLoggingOptions"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions"]]
  ["ProcessingConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration"]]
  ["RetryOptions"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.RetryOptions"]]
  ["S3Configuration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration"]]
  ["BufferingHints"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.BufferingHints"]]
  ["S3BackupMode" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.AudioChannelMapping"
 [:map
  {:closed :true}
  ["OutputChannel" {:optional true} [:ref "Integer"]]
  ["InputChannelLevels"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaLive::Channel.InputChannelLevel"]]
    "Fn::If"]]],
 "AWS::EC2::Instance.ElasticInferenceAccelerator"
 [:map
  {:closed :true}
  ["Count" {:optional true} [:ref "Integer"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::ApplicationOutput.KinesisStreamsOutput"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.VideoSelectorProgramId"
 [:map
  {:closed :true}
  ["ProgramId" {:optional true} [:ref "Integer"]]],
 "AWS::EMR::Cluster.VolumeSpecification"
 [:map
  {:closed :true}
  ["Iops" {:optional true} [:ref "Integer"]]
  ["SizeInGB" {:optional true} [:ref "Integer"]]
  ["VolumeType" {:optional true} [:ref "String"]]],
 "AWS::AutoScaling::ScalingPolicy.PredefinedMetricSpecification"
 [:map
  {:closed :true}
  ["PredefinedMetricType" {:optional true} [:ref "String"]]
  ["ResourceLabel" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.InputFormatConfiguration"
 [:map
  {:closed :true}
  ["Deserializer"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.Deserializer"]]],
 "AWS::ServiceCatalog::ResourceUpdateConstraint"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::ResourceUpdateConstraint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["TagUpdateOnProvisionedProduct" {:optional true} [:ref "String"]]
    ["PortfolioId" {:optional true} [:ref "String"]]
    ["ProductId" {:optional true} [:ref "String"]]]]],
 "AWS::MediaConvert::JobTemplate"
 [:map
  ["Type" [:= "AWS::MediaConvert::JobTemplate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["StatusUpdateInterval" {:optional true} [:ref "String"]]
    ["SettingsJson" {:optional true} [:ref "Json"]]
    ["AccelerationSettings"
     {:optional true}
     [:ref "AWS::MediaConvert::JobTemplate.AccelerationSettings"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Queue" {:optional true} [:ref "String"]]
    ["Priority" {:optional true} [:ref "Integer"]]
    ["Category" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["HopDestinations"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::MediaConvert::JobTemplate.HopDestination"]]
      "Fn::If"]]]]],
 "AWS::LakeFormation::DataLakeSettings"
 [:map
  ["Type" [:= "AWS::LakeFormation::DataLakeSettings"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Admins"
     {:optional true}
     [:ref "AWS::LakeFormation::DataLakeSettings.Admins"]]]]],
 "AWS::MediaLive::Channel.MultiplexGroupSettings"
 [:map {:closed :true}],
 "AWS::Cognito::UserPoolResourceServer.ResourceServerScopeType"
 [:map
  {:closed :true}
  ["ScopeName" {:optional true} [:ref "String"]]
  ["ScopeDescription" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPoolClient"
 [:map
  ["Type" [:= "AWS::Cognito::UserPoolClient"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GenerateSecret" {:optional true} [:ref "Boolean"]]
    ["LogoutURLs" {:optional true} [:ref "StringList"]]
    ["ClientName" {:optional true} [:ref "String"]]
    ["DefaultRedirectURI" {:optional true} [:ref "String"]]
    ["TokenValidityUnits"
     {:optional true}
     [:ref "AWS::Cognito::UserPoolClient.TokenValidityUnits"]]
    ["AllowedOAuthScopes" {:optional true} [:ref "StringList"]]
    ["AllowedOAuthFlows" {:optional true} [:ref "StringList"]]
    ["AllowedOAuthFlowsUserPoolClient"
     {:optional true}
     [:ref "Boolean"]]
    ["AccessTokenValidity" {:optional true} [:ref "Integer"]]
    ["SupportedIdentityProviders" {:optional true} [:ref "StringList"]]
    ["ReadAttributes" {:optional true} [:ref "StringList"]]
    ["RefreshTokenValidity" {:optional true} [:ref "Integer"]]
    ["UserPoolId" {:optional true} [:ref "String"]]
    ["PreventUserExistenceErrors" {:optional true} [:ref "String"]]
    ["CallbackURLs" {:optional true} [:ref "StringList"]]
    ["WriteAttributes" {:optional true} [:ref "StringList"]]
    ["ExplicitAuthFlows" {:optional true} [:ref "StringList"]]
    ["IdTokenValidity" {:optional true} [:ref "Integer"]]
    ["AnalyticsConfiguration"
     {:optional true}
     [:ref "AWS::Cognito::UserPoolClient.AnalyticsConfiguration"]]]]],
 "AWS::CloudWatch::Alarm.Metric"
 [:map
  {:closed :true}
  ["Dimensions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CloudWatch::Alarm.Dimension"]]
    "Fn::If"]]
  ["MetricName" {:optional true} [:ref "String"]]
  ["Namespace" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.NetworkInputSettings"
 [:map
  {:closed :true}
  ["ServerValidation" {:optional true} [:ref "String"]]
  ["HlsInputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.HlsInputSettings"]]],
 "AWS::RoboMaker::Fleet"
 [:map
  ["Type" [:= "AWS::RoboMaker::Fleet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::GlobalAccelerator::EndpointGroup"
 [:map
  ["Type" [:= "AWS::GlobalAccelerator::EndpointGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ThresholdCount" {:optional true} [:ref "Integer"]]
    ["HealthCheckPath" {:optional true} [:ref "String"]]
    ["ListenerArn" {:optional true} [:ref "String"]]
    ["TrafficDialPercentage" {:optional true} [:ref "Double"]]
    ["HealthCheckPort" {:optional true} [:ref "Integer"]]
    ["EndpointConfigurations"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::GlobalAccelerator::EndpointGroup.EndpointConfiguration"]]
      "Fn::If"]]
    ["EndpointGroupRegion" {:optional true} [:ref "String"]]
    ["HealthCheckProtocol" {:optional true} [:ref "String"]]
    ["HealthCheckIntervalSeconds"
     {:optional true}
     [:ref "Integer"]]]]],
 "AWS::IoT::TopicRule.CloudwatchAlarmAction"
 [:map
  {:closed :true}
  ["AlarmName" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["StateReason" {:optional true} [:ref "String"]]
  ["StateValue" {:optional true} [:ref "String"]]],
 "AWS::ECS::Service.AwsVpcConfiguration"
 [:map
  {:closed :true}
  ["AssignPublicIp" {:optional true} [:ref "String"]]
  ["SecurityGroups" {:optional true} [:ref "StringList"]]
  ["Subnets" {:optional true} [:ref "StringList"]]],
 "AWS::Budgets::Budget.Subscriber"
 [:map
  {:closed :true}
  ["SubscriptionType" {:optional true} [:ref "String"]]
  ["Address" {:optional true} [:ref "String"]]],
 "AWS::IoT::ProvisioningTemplate"
 [:map
  ["Type" [:= "AWS::IoT::ProvisioningTemplate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TemplateName" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ProvisioningRoleArn" {:optional true} [:ref "String"]]
    ["TemplateBody" {:optional true} [:ref "String"]]
    ["PreProvisioningHook"
     {:optional true}
     [:ref "AWS::IoT::ProvisioningTemplate.ProvisioningHook"]]
    ["Tags"
     {:optional true}
     [:ref "AWS::IoT::ProvisioningTemplate.Tags"]]]]],
 "AWS::ECS::TaskDefinition.FirelensConfiguration"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Options" {:optional true} [:ref "StringMap"]]],
 "AWS::Budgets::Budget.CostTypes"
 [:map
  {:closed :true}
  ["IncludeRefund" {:optional true} [:ref "Boolean"]]
  ["IncludeSubscription" {:optional true} [:ref "Boolean"]]
  ["IncludeUpfront" {:optional true} [:ref "Boolean"]]
  ["IncludeRecurring" {:optional true} [:ref "Boolean"]]
  ["IncludeDiscount" {:optional true} [:ref "Boolean"]]
  ["IncludeSupport" {:optional true} [:ref "Boolean"]]
  ["IncludeCredit" {:optional true} [:ref "Boolean"]]
  ["UseAmortized" {:optional true} [:ref "Boolean"]]
  ["IncludeOtherSubscription" {:optional true} [:ref "Boolean"]]
  ["UseBlended" {:optional true} [:ref "Boolean"]]
  ["IncludeTax" {:optional true} [:ref "Boolean"]]],
 "AWS::ManagedBlockchain::Member.ApprovalThresholdPolicy"
 [:map
  {:closed :true}
  ["ThresholdComparator" {:optional true} [:ref "String"]]
  ["ThresholdPercentage" {:optional true} [:ref "Integer"]]
  ["ProposalDurationInHours" {:optional true} [:ref "Integer"]]],
 "AWS::GameLift::MatchmakingRuleSet"
 [:map
  ["Type" [:= "AWS::GameLift::MatchmakingRuleSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RuleSetBody" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::IoT::TopicRule.IotEventsAction"
 [:map
  {:closed :true}
  ["InputName" {:optional true} [:ref "String"]]
  ["MessageId" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::ServiceDiscovery::Service.HealthCheckCustomConfig"
 [:map
  {:closed :true}
  ["FailureThreshold" {:optional true} [:ref "Double"]]],
 "AWS::SageMaker::MonitoringSchedule.VpcConfig"
 [:map
  {:closed :true}
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
  ["Subnets" {:optional true} [:ref "StringList"]]],
 "AWS::EC2::EgressOnlyInternetGateway"
 [:map
  ["Type" [:= "AWS::EC2::EgressOnlyInternetGateway"]]
  ["Properties"
   [:map {:closed :true} ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::Batch::JobDefinition.VolumesHost"
 [:map
  {:closed :true}
  ["SourcePath" {:optional true} [:ref "String"]]],
 "AWS::ECS::Service.PlacementConstraint"
 [:map
  {:closed :true}
  ["Expression" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::GatewayRoute.GrpcGatewayRouteMatch"
 [:map
  {:closed :true}
  ["ServiceName" {:optional true} [:ref "String"]]],
 "AWS::LakeFormation::Permissions.ColumnWildcard"
 [:map
  {:closed :true}
  ["ExcludedColumnNames" {:optional true} [:ref "StringList"]]],
 "AWS::KinesisAnalytics::ApplicationOutput.DestinationSchema"
 [:map
  {:closed :true}
  ["RecordFormatType" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::OriginRequestPolicy"
 [:map
  ["Type" [:= "AWS::CloudFront::OriginRequestPolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["OriginRequestPolicyConfig"
     {:optional true}
     [:ref
      "AWS::CloudFront::OriginRequestPolicy.OriginRequestPolicyConfig"]]]]],
 "AWS::OpsWorks::Stack.ElasticIp"
 [:map
  {:closed :true}
  ["Ip" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Glue::Table.SkewedInfo"
 [:map
  {:closed :true}
  ["SkewedColumnNames" {:optional true} [:ref "StringList"]]
  ["SkewedColumnValues" {:optional true} [:ref "StringList"]]
  ["SkewedColumnValueLocationMaps" {:optional true} [:ref "Json"]]],
 "AWS::MSK::Cluster.EBSStorageInfo"
 [:map
  {:closed :true}
  ["VolumeSize" {:optional true} [:ref "Integer"]]],
 "AWS::GlobalAccelerator::Accelerator"
 [:map
  ["Type" [:= "AWS::GlobalAccelerator::Accelerator"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["IpAddressType" {:optional true} [:ref "String"]]
    ["IpAddresses" {:optional true} [:ref "StringList"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::MediaLive::Channel.AribDestinationSettings"
 [:map {:closed :true}],
 "AWS::StepFunctions::StateMachine.TracingConfiguration"
 [:map {:closed :true} ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::S3::Bucket.StorageClassAnalysis"
 [:map
  {:closed :true}
  ["DataExport" {:optional true} [:ref "AWS::S3::Bucket.DataExport"]]],
 "AWS::AppSync::FunctionConfiguration"
 [:map
  ["Type" [:= "AWS::AppSync::FunctionConfiguration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResponseMappingTemplateS3Location"
     {:optional true}
     [:ref "String"]]
    ["ApiId" {:optional true} [:ref "String"]]
    ["DataSourceName" {:optional true} [:ref "String"]]
    ["RequestMappingTemplateS3Location"
     {:optional true}
     [:ref "String"]]
    ["ResponseMappingTemplate" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["RequestMappingTemplate" {:optional true} [:ref "String"]]
    ["FunctionVersion" {:optional true} [:ref "String"]]]]],
 "AWS::Transfer::Server.IdentityProviderDetails"
 [:map
  {:closed :true}
  ["InvocationRole" {:optional true} [:ref "String"]]
  ["Url" {:optional true} [:ref "String"]]],
 "AWS::SecretsManager::RotationSchedule.HostedRotationLambda"
 [:map
  {:closed :true}
  ["RotationType" {:optional true} [:ref "String"]]
  ["RotationLambdaName" {:optional true} [:ref "String"]]
  ["KmsKeyArn" {:optional true} [:ref "String"]]
  ["MasterSecretArn" {:optional true} [:ref "String"]]
  ["VpcSecurityGroupIds" {:optional true} [:ref "String"]]
  ["MasterSecretKmsKeyArn" {:optional true} [:ref "String"]]
  ["VpcSubnetIds" {:optional true} [:ref "String"]]],
 "AWS::RDS::DBProxy.AuthFormat"
 [:map
  {:closed :true}
  ["AuthScheme" {:optional true} [:ref "String"]]
  ["Description" {:optional true} [:ref "String"]]
  ["IAMAuth" {:optional true} [:ref "String"]]
  ["SecretArn" {:optional true} [:ref "String"]]
  ["UserName" {:optional true} [:ref "String"]]],
 "AWS::Amplify::Domain.SubDomainSetting"
 [:map
  {:closed :true}
  ["Prefix" {:optional true} [:ref "String"]]
  ["BranchName" {:optional true} [:ref "String"]]],
 "AWS::ManagedBlockchain::Member.MemberConfiguration"
 [:map
  {:closed :true}
  ["Description" {:optional true} [:ref "String"]]
  ["MemberFrameworkConfiguration"
   {:optional true}
   [:ref
    "AWS::ManagedBlockchain::Member.MemberFrameworkConfiguration"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Budgets::Budget.BudgetData"
 [:map
  {:closed :true}
  ["BudgetLimit" {:optional true} [:ref "AWS::Budgets::Budget.Spend"]]
  ["TimePeriod"
   {:optional true}
   [:ref "AWS::Budgets::Budget.TimePeriod"]]
  ["TimeUnit" {:optional true} [:ref "String"]]
  ["PlannedBudgetLimits" {:optional true} [:ref "Json"]]
  ["CostFilters" {:optional true} [:ref "Json"]]
  ["BudgetName" {:optional true} [:ref "String"]]
  ["CostTypes"
   {:optional true}
   [:ref "AWS::Budgets::Budget.CostTypes"]]
  ["BudgetType" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::GatewayRoute.HttpGatewayRouteAction"
 [:map
  {:closed :true}
  ["Target"
   {:optional true}
   [:ref "AWS::AppMesh::GatewayRoute.GatewayRouteTarget"]]],
 "AWS::Athena::WorkGroup.Tags"
 [:map
  {:closed :true}
  ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::S3::Bucket.InventoryConfiguration"
 [:map
  {:closed :true}
  ["Destination" {:optional true} [:ref "AWS::S3::Bucket.Destination"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["Id" {:optional true} [:ref "String"]]
  ["IncludedObjectVersions" {:optional true} [:ref "String"]]
  ["OptionalFields" {:optional true} [:ref "StringList"]]
  ["Prefix" {:optional true} [:ref "String"]]
  ["ScheduleFrequency" {:optional true} [:ref "String"]]],
 "AWS::Config::RemediationConfiguration.RemediationParameterValue"
 [:map
  {:closed :true}
  ["ResourceValue"
   {:optional true}
   [:ref "AWS::Config::RemediationConfiguration.ResourceValue"]]
  ["StaticValue"
   {:optional true}
   [:ref "AWS::Config::RemediationConfiguration.StaticValue"]]],
 "AWS::KinesisFirehose::DeliveryStream.SchemaConfiguration"
 [:map
  {:closed :true}
  ["CatalogId" {:optional true} [:ref "String"]]
  ["DatabaseName" {:optional true} [:ref "String"]]
  ["Region" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]
  ["TableName" {:optional true} [:ref "String"]]
  ["VersionId" {:optional true} [:ref "String"]]],
 "AWS::EC2::SpotFleet.GroupIdentifier"
 [:map {:closed :true} ["GroupId" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster"
 [:map
  ["Type" [:= "AWS::EMR::Cluster"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Instances"
     {:optional true}
     [:ref "AWS::EMR::Cluster.JobFlowInstancesConfig"]]
    ["Configurations"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EMR::Cluster.Configuration"]]
      "Fn::If"]]
    ["CustomAmiId" {:optional true} [:ref "String"]]
    ["ScaleDownBehavior" {:optional true} [:ref "String"]]
    ["SecurityConfiguration" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["LogUri" {:optional true} [:ref "String"]]
    ["VisibleToAllUsers" {:optional true} [:ref "Boolean"]]
    ["Applications"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EMR::Cluster.Application"]]
      "Fn::If"]]
    ["BootstrapActions"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EMR::Cluster.BootstrapActionConfig"]]
      "Fn::If"]]
    ["EbsRootVolumeSize" {:optional true} [:ref "Integer"]]
    ["ServiceRole" {:optional true} [:ref "String"]]
    ["ReleaseLabel" {:optional true} [:ref "String"]]
    ["JobFlowRole" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Steps"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EMR::Cluster.StepConfig"]]
      "Fn::If"]]
    ["AdditionalInfo" {:optional true} [:ref "Json"]]
    ["AutoScalingRole" {:optional true} [:ref "String"]]
    ["KerberosAttributes"
     {:optional true}
     [:ref "AWS::EMR::Cluster.KerberosAttributes"]]]]],
 "AWS::Cognito::UserPool.InviteMessageTemplate"
 [:map
  {:closed :true}
  ["EmailMessage" {:optional true} [:ref "String"]]
  ["SMSMessage" {:optional true} [:ref "String"]]
  ["EmailSubject" {:optional true} [:ref "String"]]],
 "AWS::MSK::Cluster"
 [:map
  ["Type" [:= "AWS::MSK::Cluster"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EncryptionInfo"
     {:optional true}
     [:ref "AWS::MSK::Cluster.EncryptionInfo"]]
    ["ConfigurationInfo"
     {:optional true}
     [:ref "AWS::MSK::Cluster.ConfigurationInfo"]]
    ["LoggingInfo"
     {:optional true}
     [:ref "AWS::MSK::Cluster.LoggingInfo"]]
    ["ClusterName" {:optional true} [:ref "String"]]
    ["OpenMonitoring"
     {:optional true}
     [:ref "AWS::MSK::Cluster.OpenMonitoring"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["NumberOfBrokerNodes" {:optional true} [:ref "Integer"]]
    ["EnhancedMonitoring" {:optional true} [:ref "String"]]
    ["BrokerNodeGroupInfo"
     {:optional true}
     [:ref "AWS::MSK::Cluster.BrokerNodeGroupInfo"]]
    ["KafkaVersion" {:optional true} [:ref "String"]]
    ["ClientAuthentication"
     {:optional true}
     [:ref "AWS::MSK::Cluster.ClientAuthentication"]]]]],
 "AWS::WAFv2::RuleGroup.AndStatementOne"
 [:map
  {:closed :true}
  ["Statements"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::RuleGroup.StatementTwo"]]
    "Fn::If"]]],
 "AWS::Pinpoint::APNSVoipChannel"
 [:map
  ["Type" [:= "AWS::Pinpoint::APNSVoipChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TeamId" {:optional true} [:ref "String"]]
    ["Certificate" {:optional true} [:ref "String"]]
    ["BundleId" {:optional true} [:ref "String"]]
    ["PrivateKey" {:optional true} [:ref "String"]]
    ["TokenKeyId" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ApplicationId" {:optional true} [:ref "String"]]
    ["DefaultAuthenticationMethod" {:optional true} [:ref "String"]]
    ["TokenKey" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayListenerTlsCertificate"
 [:map
  {:closed :true}
  ["ACM"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualGateway.VirtualGatewayListenerTlsAcmCertificate"]]
  ["File"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualGateway.VirtualGatewayListenerTlsFileCertificate"]]],
 "AWS::GuardDuty::Master"
 [:map
  ["Type" [:= "AWS::GuardDuty::Master"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DetectorId" {:optional true} [:ref "String"]]
    ["MasterId" {:optional true} [:ref "String"]]
    ["InvitationId" {:optional true} [:ref "String"]]]]],
 "AWS::CloudFront::StreamingDistribution.StreamingDistributionConfig"
 [:map
  {:closed :true}
  ["Logging"
   {:optional true}
   [:ref "AWS::CloudFront::StreamingDistribution.Logging"]]
  ["Comment" {:optional true} [:ref "String"]]
  ["PriceClass" {:optional true} [:ref "String"]]
  ["S3Origin"
   {:optional true}
   [:ref "AWS::CloudFront::StreamingDistribution.S3Origin"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["Aliases" {:optional true} [:ref "StringList"]]
  ["TrustedSigners"
   {:optional true}
   [:ref "AWS::CloudFront::StreamingDistribution.TrustedSigners"]]],
 "AWS::CodeDeploy::DeploymentGroup.EC2TagFilter"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::Deployment.DeploymentCanarySettings"
 [:map
  {:closed :true}
  ["PercentTraffic" {:optional true} [:ref "Double"]]
  ["StageVariableOverrides" {:optional true} [:ref "StringMap"]]
  ["UseStageCache" {:optional true} [:ref "Boolean"]]],
 "AWS::SageMaker::MonitoringSchedule.StoppingCondition"
 [:map
  {:closed :true}
  ["MaxRuntimeInSeconds" {:optional true} [:ref "Integer"]]],
 "AWS::EC2::VPNGatewayRoutePropagation"
 [:map
  ["Type" [:= "AWS::EC2::VPNGatewayRoutePropagation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RouteTableIds" {:optional true} [:ref "StringList"]]
    ["VpnGatewayId" {:optional true} [:ref "String"]]]]],
 "AWS::WAFRegional::XssMatchSet"
 [:map
  ["Type" [:= "AWS::WAFRegional::XssMatchSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["XssMatchTuples"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::WAFRegional::XssMatchSet.XssMatchTuple"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::CodePipeline::Pipeline.BlockerDeclaration"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::MSK::Cluster.ClientAuthentication"
 [:map
  {:closed :true}
  ["Sasl" {:optional true} [:ref "AWS::MSK::Cluster.Sasl"]]
  ["Tls" {:optional true} [:ref "AWS::MSK::Cluster.Tls"]]],
 "AWS::RoboMaker::SimulationApplication.SourceConfig"
 [:map
  {:closed :true}
  ["S3Bucket" {:optional true} [:ref "String"]]
  ["Architecture" {:optional true} [:ref "String"]]
  ["S3Key" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.GeoMatchStatement"
 [:map
  {:closed :true}
  ["CountryCodes" {:optional true} [:ref "StringList"]]
  ["ForwardedIPConfig"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.ForwardedIPConfiguration"]]],
 "AWS::ECS::TaskDefinition.PortMapping"
 [:map
  {:closed :true}
  ["ContainerPort" {:optional true} [:ref "Integer"]]
  ["HostPort" {:optional true} [:ref "Integer"]]
  ["Protocol" {:optional true} [:ref "String"]]],
 "AWS::Glue::MLTransform.InputRecordTables"
 [:map
  {:closed :true}
  ["GlueTables"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Glue::MLTransform.GlueTables"]]
    "Fn::If"]]],
 "Alexa::ASK::Skill.SkillPackage"
 [:map
  {:closed :true}
  ["S3BucketRole" {:optional true} [:ref "String"]]
  ["S3ObjectVersion" {:optional true} [:ref "String"]]
  ["S3Bucket" {:optional true} [:ref "String"]]
  ["S3Key" {:optional true} [:ref "String"]]
  ["Overrides" {:optional true} [:ref "Alexa::ASK::Skill.Overrides"]]],
 "AWS::Glue::MLTransform.FindMatchesParameters"
 [:map
  {:closed :true}
  ["PrecisionRecallTradeoff" {:optional true} [:ref "Double"]]
  ["EnforceProvidedLabels" {:optional true} [:ref "Boolean"]]
  ["PrimaryKeyColumnName" {:optional true} [:ref "String"]]
  ["AccuracyCostTradeoff" {:optional true} [:ref "Double"]]],
 "AWS::WAFRegional::GeoMatchSet.GeoMatchConstraint"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::ApplicationInsights::Application.AlarmMetric"
 [:map
  {:closed :true}
  ["AlarmMetricName" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Dataset.OutputFileUriValue"
 [:map {:closed :true} ["FileName" {:optional true} [:ref "String"]]],
 "AWS::Elasticsearch::Domain.ZoneAwarenessConfig"
 [:map
  {:closed :true}
  ["AvailabilityZoneCount" {:optional true} [:ref "Integer"]]],
 "AWS::DLM::LifecyclePolicy.FastRestoreRule"
 [:map
  {:closed :true}
  ["IntervalUnit" {:optional true} [:ref "String"]]
  ["AvailabilityZones" {:optional true} [:ref "StringList"]]
  ["Count" {:optional true} [:ref "Integer"]]
  ["Interval" {:optional true} [:ref "Integer"]]],
 "AWS::AppMesh::GatewayRoute.HttpGatewayRouteMatch"
 [:map {:closed :true} ["Prefix" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::FunctionDefinition.DefaultConfig"
 [:map
  {:closed :true}
  ["Execution"
   {:optional true}
   [:ref "AWS::Greengrass::FunctionDefinition.Execution"]]],
 "AWS::Amplify::Domain"
 [:map
  ["Type" [:= "AWS::Amplify::Domain"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SubDomainSettings"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Amplify::Domain.SubDomainSetting"]]
      "Fn::If"]]
    ["AppId" {:optional true} [:ref "String"]]
    ["AutoSubDomainIAMRole" {:optional true} [:ref "String"]]
    ["DomainName" {:optional true} [:ref "String"]]
    ["EnableAutoSubDomain" {:optional true} [:ref "Boolean"]]
    ["AutoSubDomainCreationPatterns"
     {:optional true}
     [:ref "StringList"]]]]],
 "AWS::CloudWatch::Alarm"
 [:map
  ["Type" [:= "AWS::CloudWatch::Alarm"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Unit" {:optional true} [:ref "String"]]
    ["AlarmName" {:optional true} [:ref "String"]]
    ["EvaluationPeriods" {:optional true} [:ref "Integer"]]
    ["Statistic" {:optional true} [:ref "String"]]
    ["ThresholdMetricId" {:optional true} [:ref "String"]]
    ["DatapointsToAlarm" {:optional true} [:ref "Integer"]]
    ["Dimensions"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::CloudWatch::Alarm.Dimension"]]
      "Fn::If"]]
    ["TreatMissingData" {:optional true} [:ref "String"]]
    ["ComparisonOperator" {:optional true} [:ref "String"]]
    ["AlarmActions" {:optional true} [:ref "StringList"]]
    ["ActionsEnabled" {:optional true} [:ref "Boolean"]]
    ["Metrics"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::CloudWatch::Alarm.MetricDataQuery"]]
      "Fn::If"]]
    ["Threshold" {:optional true} [:ref "Double"]]
    ["AlarmDescription" {:optional true} [:ref "String"]]
    ["Namespace" {:optional true} [:ref "String"]]
    ["Period" {:optional true} [:ref "Integer"]]
    ["OKActions" {:optional true} [:ref "StringList"]]
    ["EvaluateLowSampleCountPercentile"
     {:optional true}
     [:ref "String"]]
    ["InsufficientDataActions" {:optional true} [:ref "StringList"]]
    ["MetricName" {:optional true} [:ref "String"]]
    ["ExtendedStatistic" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisFirehose::DeliveryStream.SplunkRetryOptions"
 [:map
  {:closed :true}
  ["DurationInSeconds" {:optional true} [:ref "Integer"]]],
 "AWS::Glue::SecurityConfiguration.CloudWatchEncryption"
 [:map
  {:closed :true}
  ["KmsKeyArn" {:optional true} [:ref "String"]]
  ["CloudWatchEncryptionMode" {:optional true} [:ref "String"]]],
 "AWS::Batch::JobDefinition.ResourceRequirement"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::Application.S3ContentLocation"
 [:map
  {:closed :true}
  ["BucketARN" {:optional true} [:ref "String"]]
  ["FileKey" {:optional true} [:ref "String"]]
  ["ObjectVersion" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.PathPatternConfig"
 [:map
  {:closed :true}
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::IoTAnalytics::Dataset.DeltaTime"
 [:map
  {:closed :true}
  ["TimeExpression" {:optional true} [:ref "String"]]
  ["OffsetSeconds" {:optional true} [:ref "Integer"]]],
 "AWS::KinesisAnalyticsV2::Application.MonitoringConfiguration"
 [:map
  {:closed :true}
  ["ConfigurationType" {:optional true} [:ref "String"]]
  ["MetricsLevel" {:optional true} [:ref "String"]]
  ["LogLevel" {:optional true} [:ref "String"]]],
 "AWS::AppSync::Resolver"
 [:map
  ["Type" [:= "AWS::AppSync::Resolver"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResponseMappingTemplateS3Location"
     {:optional true}
     [:ref "String"]]
    ["ApiId" {:optional true} [:ref "String"]]
    ["DataSourceName" {:optional true} [:ref "String"]]
    ["RequestMappingTemplateS3Location"
     {:optional true}
     [:ref "String"]]
    ["TypeName" {:optional true} [:ref "String"]]
    ["ResponseMappingTemplate" {:optional true} [:ref "String"]]
    ["PipelineConfig"
     {:optional true}
     [:ref "AWS::AppSync::Resolver.PipelineConfig"]]
    ["Kind" {:optional true} [:ref "String"]]
    ["SyncConfig"
     {:optional true}
     [:ref "AWS::AppSync::Resolver.SyncConfig"]]
    ["RequestMappingTemplate" {:optional true} [:ref "String"]]
    ["FieldName" {:optional true} [:ref "String"]]
    ["CachingConfig"
     {:optional true}
     [:ref "AWS::AppSync::Resolver.CachingConfig"]]]]],
 "AWS::OpsWorks::ElasticLoadBalancerAttachment"
 [:map
  ["Type" [:= "AWS::OpsWorks::ElasticLoadBalancerAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ElasticLoadBalancerName" {:optional true} [:ref "String"]]
    ["LayerId" {:optional true} [:ref "String"]]]]],
 "AWS::IAM::ServiceLinkedRole"
 [:map
  ["Type" [:= "AWS::IAM::ServiceLinkedRole"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CustomSuffix" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["AWSServiceName" {:optional true} [:ref "String"]]]]],
 "AWS::WAFv2::WebACL.IPSetReferenceStatement"
 [:map
  {:closed :true}
  ["Arn" {:optional true} [:ref "String"]]
  ["IPSetForwardedIPConfig"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.IPSetForwardedIPConfiguration"]]],
 "AWS::Cognito::UserPoolClient.TokenValidityUnits"
 [:map
  {:closed :true}
  ["IdToken" {:optional true} [:ref "String"]]
  ["RefreshToken" {:optional true} [:ref "String"]]
  ["AccessToken" {:optional true} [:ref "String"]]],
 "AWS::Config::ConfigurationAggregator.AccountAggregationSource"
 [:map
  {:closed :true}
  ["AllAwsRegions" {:optional true} [:ref "Boolean"]]
  ["AwsRegions" {:optional true} [:ref "StringList"]]
  ["AccountIds" {:optional true} [:ref "StringList"]]],
 "AWS::EKS::Cluster.ResourcesVpcConfig"
 [:map
  {:closed :true}
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
  ["SubnetIds" {:optional true} [:ref "StringList"]]],
 "AWS::SSM::MaintenanceWindowTarget"
 [:map
  ["Type" [:= "AWS::SSM::MaintenanceWindowTarget"]]
  ["Properties"
   [:map
    {:closed :true}
    ["OwnerInformation" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["WindowId" {:optional true} [:ref "String"]]
    ["ResourceType" {:optional true} [:ref "String"]]
    ["Targets"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::SSM::MaintenanceWindowTarget.Targets"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::SSM::PatchBaseline"
 [:map
  ["Type" [:= "AWS::SSM::PatchBaseline"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Sources"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::SSM::PatchBaseline.PatchSource"]]
      "Fn::If"]]
    ["ApprovedPatchesComplianceLevel" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["RejectedPatchesAction" {:optional true} [:ref "String"]]
    ["RejectedPatches" {:optional true} [:ref "StringList"]]
    ["ApprovedPatches" {:optional true} [:ref "StringList"]]
    ["GlobalFilters"
     {:optional true}
     [:ref "AWS::SSM::PatchBaseline.PatchFilterGroup"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["OperatingSystem" {:optional true} [:ref "String"]]
    ["ApprovedPatchesEnableNonSecurity"
     {:optional true}
     [:ref "Boolean"]]
    ["PatchGroups" {:optional true} [:ref "StringList"]]
    ["ApprovalRules"
     {:optional true}
     [:ref "AWS::SSM::PatchBaseline.RuleGroup"]]]]],
 "AWS::KinesisFirehose::DeliveryStream.ElasticsearchBufferingHints"
 [:map
  {:closed :true}
  ["IntervalInSeconds" {:optional true} [:ref "Integer"]]
  ["SizeInMBs" {:optional true} [:ref "Integer"]]],
 "AWS::MediaLive::Channel.MediaPackageGroupSettings"
 [:map
  {:closed :true}
  ["Destination"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.OutputLocationRef"]]],
 "AWS::Transfer::User"
 [:map
  ["Type" [:= "AWS::Transfer::User"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SshPublicKeys"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Transfer::User.SshPublicKey"]]
      "Fn::If"]]
    ["HomeDirectory" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ServerId" {:optional true} [:ref "String"]]
    ["UserName" {:optional true} [:ref "String"]]
    ["HomeDirectoryMappings"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Transfer::User.HomeDirectoryMapEntry"]]
      "Fn::If"]]
    ["HomeDirectoryType" {:optional true} [:ref "String"]]
    ["Role" {:optional true} [:ref "String"]]
    ["Policy" {:optional true} [:ref "String"]]]]],
 "AWS::S3::Bucket.AccessControlTranslation"
 [:map {:closed :true} ["Owner" {:optional true} [:ref "String"]]],
 "AWS::Batch::JobDefinition.Timeout"
 [:map
  {:closed :true}
  ["AttemptDurationSeconds" {:optional true} [:ref "Integer"]]],
 "AWS::Events::Rule.Target"
 [:map
  {:closed :true}
  ["InputTransformer"
   {:optional true}
   [:ref "AWS::Events::Rule.InputTransformer"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Input" {:optional true} [:ref "String"]]
  ["InputPath" {:optional true} [:ref "String"]]
  ["SqsParameters"
   {:optional true}
   [:ref "AWS::Events::Rule.SqsParameters"]]
  ["RunCommandParameters"
   {:optional true}
   [:ref "AWS::Events::Rule.RunCommandParameters"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["KinesisParameters"
   {:optional true}
   [:ref "AWS::Events::Rule.KinesisParameters"]]
  ["Arn" {:optional true} [:ref "String"]]
  ["BatchParameters"
   {:optional true}
   [:ref "AWS::Events::Rule.BatchParameters"]]
  ["EcsParameters"
   {:optional true}
   [:ref "AWS::Events::Rule.EcsParameters"]]
  ["HttpParameters"
   {:optional true}
   [:ref "AWS::Events::Rule.HttpParameters"]]],
 "AWS::SSO::Assignment"
 [:map
  ["Type" [:= "AWS::SSO::Assignment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InstanceArn" {:optional true} [:ref "String"]]
    ["TargetId" {:optional true} [:ref "String"]]
    ["TargetType" {:optional true} [:ref "String"]]
    ["PermissionSetArn" {:optional true} [:ref "String"]]
    ["PrincipalType" {:optional true} [:ref "String"]]
    ["PrincipalId" {:optional true} [:ref "String"]]]]],
 "AWS::Glue::Classifier.JsonClassifier"
 [:map
  {:closed :true}
  ["JsonPath" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.RtmpCaptionInfoDestinationSettings"
 [:map {:closed :true}],
 "AWS::EventSchemas::Discoverer.TagsEntry"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::Synthetics::Canary.Schedule"
 [:map
  {:closed :true}
  ["Expression" {:optional true} [:ref "String"]]
  ["DurationInSeconds" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHook"
 [:map {:closed :true} ["Content" {:optional true} [:ref "String"]]],
 "AWS::ECS::Service.ServiceRegistry"
 [:map
  {:closed :true}
  ["ContainerName" {:optional true} [:ref "String"]]
  ["ContainerPort" {:optional true} [:ref "Integer"]]
  ["Port" {:optional true} [:ref "Integer"]]
  ["RegistryArn" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::ApplicationOutput"
 [:map
  ["Type" [:= "AWS::KinesisAnalytics::ApplicationOutput"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["Output"
     {:optional true}
     [:ref "AWS::KinesisAnalytics::ApplicationOutput.Output"]]]]],
 "AWS::Cassandra::Table.Column"
 [:map
  {:closed :true}
  ["ColumnName" {:optional true} [:ref "String"]]
  ["ColumnType" {:optional true} [:ref "String"]]],
 "AWS::Glue::Database"
 [:map
  ["Type" [:= "AWS::Glue::Database"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DatabaseInput"
     {:optional true}
     [:ref "AWS::Glue::Database.DatabaseInput"]]
    ["CatalogId" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisFirehose::DeliveryStream.HiveJsonSerDe"
 [:map
  {:closed :true}
  ["TimestampFormats" {:optional true} [:ref "StringList"]]],
 "AWS::SSM::PatchBaseline.Rule"
 [:map
  {:closed :true}
  ["ApproveUntilDate"
   {:optional true}
   [:ref "AWS::SSM::PatchBaseline.PatchStringDate"]]
  ["EnableNonSecurity" {:optional true} [:ref "Boolean"]]
  ["PatchFilterGroup"
   {:optional true}
   [:ref "AWS::SSM::PatchBaseline.PatchFilterGroup"]]
  ["ApproveAfterDays" {:optional true} [:ref "Integer"]]
  ["ComplianceLevel" {:optional true} [:ref "String"]]],
 "AWS::OpsWorks::Layer.LifecycleEventConfiguration"
 [:map
  {:closed :true}
  ["ShutdownEventConfiguration"
   {:optional true}
   [:ref "AWS::OpsWorks::Layer.ShutdownEventConfiguration"]]],
 "AWS::Config::DeliveryChannel"
 [:map
  ["Type" [:= "AWS::Config::DeliveryChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ConfigSnapshotDeliveryProperties"
     {:optional true}
     [:ref
      "AWS::Config::DeliveryChannel.ConfigSnapshotDeliveryProperties"]]
    ["Name" {:optional true} [:ref "String"]]
    ["S3BucketName" {:optional true} [:ref "String"]]
    ["S3KeyPrefix" {:optional true} [:ref "String"]]
    ["SnsTopicARN" {:optional true} [:ref "String"]]]]],
 "AWS::ManagedBlockchain::Member"
 [:map
  ["Type" [:= "AWS::ManagedBlockchain::Member"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MemberConfiguration"
     {:optional true}
     [:ref "AWS::ManagedBlockchain::Member.MemberConfiguration"]]
    ["NetworkConfiguration"
     {:optional true}
     [:ref "AWS::ManagedBlockchain::Member.NetworkConfiguration"]]
    ["NetworkId" {:optional true} [:ref "String"]]
    ["InvitationId" {:optional true} [:ref "String"]]]]],
 "AWS::EMR::Step.KeyValue"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::DLM::LifecyclePolicy.PolicyDetails"
 [:map
  {:closed :true}
  ["ResourceTypes" {:optional true} [:ref "StringList"]]
  ["Schedules"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::DLM::LifecyclePolicy.Schedule"]]
    "Fn::If"]]
  ["PolicyType" {:optional true} [:ref "String"]]
  ["Parameters"
   {:optional true}
   [:ref "AWS::DLM::LifecyclePolicy.Parameters"]]
  ["TargetTags"
   {:optional true}
   [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::Pinpoint::Segment.AttributeDimension"
 [:map
  {:closed :true}
  ["AttributeType" {:optional true} [:ref "String"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::AppMesh::VirtualNode.TcpTimeout"
 [:map
  {:closed :true}
  ["Idle"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.Duration"]]],
 "AWS::OpsWorks::App.SslConfiguration"
 [:map
  {:closed :true}
  ["Certificate" {:optional true} [:ref "String"]]
  ["Chain" {:optional true} [:ref "String"]]
  ["PrivateKey" {:optional true} [:ref "String"]]],
 "AWS::Kendra::Index.TagList"
 [:map
  {:closed :true}
  ["TagList"
   {:optional true}
   [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::WAF::SizeConstraintSet"
 [:map
  ["Type" [:= "AWS::WAF::SizeConstraintSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["SizeConstraints"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::WAF::SizeConstraintSet.SizeConstraint"]]
      "Fn::If"]]]]],
 "AWS::SNS::Subscription"
 [:map
  ["Type" [:= "AWS::SNS::Subscription"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DeliveryPolicy" {:optional true} [:ref "Json"]]
    ["Endpoint" {:optional true} [:ref "String"]]
    ["FilterPolicy" {:optional true} [:ref "Json"]]
    ["Protocol" {:optional true} [:ref "String"]]
    ["RawMessageDelivery" {:optional true} [:ref "Boolean"]]
    ["RedrivePolicy" {:optional true} [:ref "Json"]]
    ["Region" {:optional true} [:ref "String"]]
    ["TopicArn" {:optional true} [:ref "String"]]]]],
 "AWS::Cassandra::Table.BillingMode"
 [:map
  {:closed :true}
  ["Mode" {:optional true} [:ref "String"]]
  ["ProvisionedThroughput"
   {:optional true}
   [:ref "AWS::Cassandra::Table.ProvisionedThroughput"]]],
 "AWS::Cognito::UserPool.LambdaConfig"
 [:map
  {:closed :true}
  ["DefineAuthChallenge" {:optional true} [:ref "String"]]
  ["VerifyAuthChallengeResponse" {:optional true} [:ref "String"]]
  ["UserMigration" {:optional true} [:ref "String"]]
  ["PostConfirmation" {:optional true} [:ref "String"]]
  ["PreTokenGeneration" {:optional true} [:ref "String"]]
  ["PostAuthentication" {:optional true} [:ref "String"]]
  ["PreAuthentication" {:optional true} [:ref "String"]]
  ["PreSignUp" {:optional true} [:ref "String"]]
  ["CreateAuthChallenge" {:optional true} [:ref "String"]]
  ["CustomMessage" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::MonitoringSchedule.Environment"
 [:map {:closed :true}],
 "AWS::Config::ConformancePack.ConformancePackInputParameter"
 [:map
  {:closed :true}
  ["ParameterName" {:optional true} [:ref "String"]]
  ["ParameterValue" {:optional true} [:ref "String"]]],
 "AWS::Backup::BackupVault"
 [:map
  ["Type" [:= "AWS::Backup::BackupVault"]]
  ["Properties"
   [:map
    {:closed :true}
    ["BackupVaultTags" {:optional true} [:ref "Json"]]
    ["BackupVaultName" {:optional true} [:ref "String"]]
    ["EncryptionKeyArn" {:optional true} [:ref "String"]]
    ["Notifications"
     {:optional true}
     [:ref "AWS::Backup::BackupVault.NotificationObjectType"]]
    ["AccessPolicy" {:optional true} [:ref "Json"]]]]],
 "AWS::EC2::VPNConnection"
 [:map
  ["Type" [:= "AWS::EC2::VPNConnection"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CustomerGatewayId" {:optional true} [:ref "String"]]
    ["StaticRoutesOnly" {:optional true} [:ref "Boolean"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["TransitGatewayId" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]
    ["VpnGatewayId" {:optional true} [:ref "String"]]
    ["VpnTunnelOptionsSpecifications"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::EC2::VPNConnection.VpnTunnelOptionsSpecification"]]
      "Fn::If"]]]]],
 "AWS::Kendra::Index.ValueImportanceItem"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "Integer"]]],
 "AWS::AutoScalingPlans::ScalingPlan"
 [:map
  ["Type" [:= "AWS::AutoScalingPlans::ScalingPlan"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationSource"
     {:optional true}
     [:ref "AWS::AutoScalingPlans::ScalingPlan.ApplicationSource"]]
    ["ScalingInstructions"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::AutoScalingPlans::ScalingPlan.ScalingInstruction"]]
      "Fn::If"]]]]],
 "AWS::ApiGatewayV2::Authorizer"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::Authorizer"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApiId" {:optional true} [:ref "String"]]
    ["AuthorizerCredentialsArn" {:optional true} [:ref "String"]]
    ["AuthorizerUri" {:optional true} [:ref "String"]]
    ["AuthorizerType" {:optional true} [:ref "String"]]
    ["IdentitySource" {:optional true} [:ref "StringList"]]
    ["AuthorizerResultTtlInSeconds" {:optional true} [:ref "Integer"]]
    ["EnableSimpleResponses" {:optional true} [:ref "Boolean"]]
    ["JwtConfiguration"
     {:optional true}
     [:ref "AWS::ApiGatewayV2::Authorizer.JWTConfiguration"]]
    ["IdentityValidationExpression" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["AuthorizerPayloadFormatVersion"
     {:optional true}
     [:ref "String"]]]]],
 "AWS::MediaLive::Channel.H265Settings"
 [:map
  {:closed :true}
  ["GopSize" {:optional true} [:ref "Double"]]
  ["AdaptiveQuantization" {:optional true} [:ref "String"]]
  ["ParNumerator" {:optional true} [:ref "Integer"]]
  ["Profile" {:optional true} [:ref "String"]]
  ["ParDenominator" {:optional true} [:ref "Integer"]]
  ["SceneChangeDetect" {:optional true} [:ref "String"]]
  ["FlickerAq" {:optional true} [:ref "String"]]
  ["FixedAfd" {:optional true} [:ref "String"]]
  ["MinIInterval" {:optional true} [:ref "Integer"]]
  ["QvbrQualityLevel" {:optional true} [:ref "Integer"]]
  ["Tier" {:optional true} [:ref "String"]]
  ["ColorMetadata" {:optional true} [:ref "String"]]
  ["FramerateNumerator" {:optional true} [:ref "Integer"]]
  ["RateControlMode" {:optional true} [:ref "String"]]
  ["ScanType" {:optional true} [:ref "String"]]
  ["Bitrate" {:optional true} [:ref "Integer"]]
  ["AlternativeTransferFunction" {:optional true} [:ref "String"]]
  ["ColorSpaceSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.H265ColorSpaceSettings"]]
  ["TimecodeInsertion" {:optional true} [:ref "String"]]
  ["Level" {:optional true} [:ref "String"]]
  ["GopSizeUnits" {:optional true} [:ref "String"]]
  ["MaxBitrate" {:optional true} [:ref "Integer"]]
  ["FramerateDenominator" {:optional true} [:ref "Integer"]]
  ["Slices" {:optional true} [:ref "Integer"]]
  ["LookAheadRateControl" {:optional true} [:ref "String"]]
  ["FilterSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.H265FilterSettings"]]
  ["GopClosedCadence" {:optional true} [:ref "Integer"]]
  ["AfdSignaling" {:optional true} [:ref "String"]]
  ["BufSize" {:optional true} [:ref "Integer"]]],
 "AWS::AppSync::DataSource.RdsHttpEndpointConfig"
 [:map
  {:closed :true}
  ["AwsRegion" {:optional true} [:ref "String"]]
  ["Schema" {:optional true} [:ref "String"]]
  ["DatabaseName" {:optional true} [:ref "String"]]
  ["DbClusterIdentifier" {:optional true} [:ref "String"]]
  ["AwsSecretStoreArn" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPoolDomain.CustomDomainConfigType"
 [:map
  {:closed :true}
  ["CertificateArn" {:optional true} [:ref "String"]]],
 "AWS::RoboMaker::SimulationApplicationVersion"
 [:map
  ["Type" [:= "AWS::RoboMaker::SimulationApplicationVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CurrentRevisionId" {:optional true} [:ref "String"]]
    ["Application" {:optional true} [:ref "String"]]]]],
 "AWS::Events::Rule.NetworkConfiguration"
 [:map
  {:closed :true}
  ["AwsVpcConfiguration"
   {:optional true}
   [:ref "AWS::Events::Rule.AwsVpcConfiguration"]]],
 "AWS::Greengrass::FunctionDefinitionVersion.FunctionConfiguration"
 [:map
  {:closed :true}
  ["MemorySize" {:optional true} [:ref "Integer"]]
  ["Pinned" {:optional true} [:ref "Boolean"]]
  ["ExecArgs" {:optional true} [:ref "String"]]
  ["Timeout" {:optional true} [:ref "Integer"]]
  ["EncodingType" {:optional true} [:ref "String"]]
  ["Environment"
   {:optional true}
   [:ref "AWS::Greengrass::FunctionDefinitionVersion.Environment"]]
  ["Executable" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.ReferenceDataSource"
 [:map
  {:closed :true}
  ["ReferenceSchema"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.ReferenceSchema"]]
  ["TableName" {:optional true} [:ref "String"]]
  ["S3ReferenceDataSource"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.S3ReferenceDataSource"]]],
 "AWS::RDS::DBProxy"
 [:map
  ["Type" [:= "AWS::RDS::DBProxy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["IdleClientTimeout" {:optional true} [:ref "Integer"]]
    ["DebugLogging" {:optional true} [:ref "Boolean"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "AWS::RDS::DBProxy.TagFormat"]] "Fn::If"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["RequireTLS" {:optional true} [:ref "Boolean"]]
    ["Auth"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::RDS::DBProxy.AuthFormat"]]
      "Fn::If"]]
    ["VpcSecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["VpcSubnetIds" {:optional true} [:ref "StringList"]]
    ["EngineFamily" {:optional true} [:ref "String"]]
    ["DBProxyName" {:optional true} [:ref "String"]]]]],
 "AWS::Budgets::Budget.Spend"
 [:map
  {:closed :true}
  ["Amount" {:optional true} [:ref "Double"]]
  ["Unit" {:optional true} [:ref "String"]]],
 "AWS::ElasticBeanstalk::Environment"
 [:map
  ["Type" [:= "AWS::ElasticBeanstalk::Environment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PlatformArn" {:optional true} [:ref "String"]]
    ["CNAMEPrefix" {:optional true} [:ref "String"]]
    ["SolutionStackName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Tier"
     {:optional true}
     [:ref "AWS::ElasticBeanstalk::Environment.Tier"]]
    ["OptionSettings"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ElasticBeanstalk::Environment.OptionSetting"]]
      "Fn::If"]]
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["EnvironmentName" {:optional true} [:ref "String"]]
    ["TemplateName" {:optional true} [:ref "String"]]
    ["VersionLabel" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]]]],
 "AWS::DMS::Endpoint.S3Settings"
 [:map
  {:closed :true}
  ["ExternalTableDefinition" {:optional true} [:ref "String"]]
  ["BucketName" {:optional true} [:ref "String"]]
  ["BucketFolder" {:optional true} [:ref "String"]]
  ["CsvRowDelimiter" {:optional true} [:ref "String"]]
  ["CsvDelimiter" {:optional true} [:ref "String"]]
  ["ServiceAccessRoleArn" {:optional true} [:ref "String"]]
  ["CompressionType" {:optional true} [:ref "String"]]],
 "AWS::EC2::EC2Fleet.SpotOptionsRequest"
 [:map
  {:closed :true}
  ["SingleAvailabilityZone" {:optional true} [:ref "Boolean"]]
  ["AllocationStrategy" {:optional true} [:ref "String"]]
  ["SingleInstanceType" {:optional true} [:ref "Boolean"]]
  ["MinTargetCapacity" {:optional true} [:ref "Integer"]]
  ["MaxTotalPrice" {:optional true} [:ref "String"]]
  ["InstanceInterruptionBehavior" {:optional true} [:ref "String"]]
  ["InstancePoolsToUseCount" {:optional true} [:ref "Integer"]]],
 "AWS::Greengrass::FunctionDefinition.Function"
 [:map
  {:closed :true}
  ["FunctionArn" {:optional true} [:ref "String"]]
  ["FunctionConfiguration"
   {:optional true}
   [:ref "AWS::Greengrass::FunctionDefinition.FunctionConfiguration"]]
  ["Id" {:optional true} [:ref "String"]]],
 "AWS::SecretsManager::RotationSchedule"
 [:map
  ["Type" [:= "AWS::SecretsManager::RotationSchedule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SecretId" {:optional true} [:ref "String"]]
    ["HostedRotationLambda"
     {:optional true}
     [:ref
      "AWS::SecretsManager::RotationSchedule.HostedRotationLambda"]]
    ["RotationLambdaARN" {:optional true} [:ref "String"]]
    ["RotationRules"
     {:optional true}
     [:ref "AWS::SecretsManager::RotationSchedule.RotationRules"]]]]],
 "AWS::EC2::LaunchTemplate.LicenseSpecification"
 [:map
  {:closed :true}
  ["LicenseConfigurationArn" {:optional true} [:ref "String"]]],
 "AWS::ElasticBeanstalk::Application.MaxAgeRule"
 [:map
  {:closed :true}
  ["DeleteSourceFromS3" {:optional true} [:ref "Boolean"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["MaxAgeInDays" {:optional true} [:ref "Integer"]]],
 "AWS::GuardDuty::Detector.CFNS3LogsConfiguration"
 [:map {:closed :true} ["Enable" {:optional true} [:ref "Boolean"]]],
 "AWS::WAFv2::WebACL.DefaultAction"
 [:map
  {:closed :true}
  ["Allow" {:optional true} [:ref "Json"]]
  ["Block" {:optional true} [:ref "Json"]]],
 "AWS::DMS::Certificate"
 [:map
  ["Type" [:= "AWS::DMS::Certificate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CertificateIdentifier" {:optional true} [:ref "String"]]
    ["CertificatePem" {:optional true} [:ref "String"]]
    ["CertificateWallet" {:optional true} [:ref "String"]]]]],
 "AWS::Lambda::Alias.ProvisionedConcurrencyConfiguration"
 [:map
  {:closed :true}
  ["ProvisionedConcurrentExecutions"
   {:optional true}
   [:ref "Integer"]]],
 "AWS::DynamoDB::Table.ProvisionedThroughput"
 [:map
  {:closed :true}
  ["ReadCapacityUnits" {:optional true} [:ref "Long"]]
  ["WriteCapacityUnits" {:optional true} [:ref "Long"]]],
 "AWS::Amplify::Branch"
 [:map
  ["Type" [:= "AWS::Amplify::Branch"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PullRequestEnvironmentName" {:optional true} [:ref "String"]]
    ["BuildSpec" {:optional true} [:ref "String"]]
    ["Stage" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["BranchName" {:optional true} [:ref "String"]]
    ["EnableAutoBuild" {:optional true} [:ref "Boolean"]]
    ["BasicAuthConfig"
     {:optional true}
     [:ref "AWS::Amplify::Branch.BasicAuthConfig"]]
    ["EnvironmentVariables"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Amplify::Branch.EnvironmentVariable"]]
      "Fn::If"]]
    ["AppId" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["EnablePullRequestPreview" {:optional true} [:ref "Boolean"]]]]],
 "AWS::AmazonMQ::Broker.InterBrokerCred"
 [:map
  {:closed :true}
  ["Username" {:optional true} [:ref "String"]]
  ["Password" {:optional true} [:ref "String"]]],
 "AWS::AutoScaling::LifecycleHook"
 [:map
  ["Type" [:= "AWS::AutoScaling::LifecycleHook"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AutoScalingGroupName" {:optional true} [:ref "String"]]
    ["DefaultResult" {:optional true} [:ref "String"]]
    ["HeartbeatTimeout" {:optional true} [:ref "Integer"]]
    ["LifecycleHookName" {:optional true} [:ref "String"]]
    ["LifecycleTransition" {:optional true} [:ref "String"]]
    ["NotificationMetadata" {:optional true} [:ref "String"]]
    ["NotificationTargetARN" {:optional true} [:ref "String"]]
    ["RoleARN" {:optional true} [:ref "String"]]]]],
 "AWS::Glue::Table.TableInput"
 [:map
  {:closed :true}
  ["Owner" {:optional true} [:ref "String"]]
  ["PartitionKeys"
   {:optional true}
   [:or [:sequential [:ref "AWS::Glue::Table.Column"]] "Fn::If"]]
  ["Parameters" {:optional true} [:ref "Json"]]
  ["StorageDescriptor"
   {:optional true}
   [:ref "AWS::Glue::Table.StorageDescriptor"]]
  ["ViewOriginalText" {:optional true} [:ref "String"]]
  ["ViewExpandedText" {:optional true} [:ref "String"]]
  ["Retention" {:optional true} [:ref "Integer"]]
  ["TableType" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Description" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::Route.RouteSpec"
 [:map
  {:closed :true}
  ["HttpRoute" {:optional true} [:ref "AWS::AppMesh::Route.HttpRoute"]]
  ["Priority" {:optional true} [:ref "Integer"]]
  ["Http2Route"
   {:optional true}
   [:ref "AWS::AppMesh::Route.HttpRoute"]]
  ["GrpcRoute" {:optional true} [:ref "AWS::AppMesh::Route.GrpcRoute"]]
  ["TcpRoute" {:optional true} [:ref "AWS::AppMesh::Route.TcpRoute"]]],
 "AWS::DirectoryService::MicrosoftAD.VpcSettings"
 [:map
  {:closed :true}
  ["SubnetIds" {:optional true} [:ref "StringList"]]
  ["VpcId" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.RedirectConfig"
 [:map
  {:closed :true}
  ["Host" {:optional true} [:ref "String"]]
  ["Path" {:optional true} [:ref "String"]]
  ["Port" {:optional true} [:ref "String"]]
  ["Protocol" {:optional true} [:ref "String"]]
  ["Query" {:optional true} [:ref "String"]]
  ["StatusCode" {:optional true} [:ref "String"]]],
 "AWS::MSK::Cluster.OpenMonitoring"
 [:map
  {:closed :true}
  ["Prometheus"
   {:optional true}
   [:ref "AWS::MSK::Cluster.Prometheus"]]],
 "AWS::WAF::SizeConstraintSet.FieldToMatch"
 [:map
  {:closed :true}
  ["Data" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.ReplicationConfiguration"
 [:map
  {:closed :true}
  ["Role" {:optional true} [:ref "String"]]
  ["Rules"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::S3::Bucket.ReplicationRule"]]
    "Fn::If"]]],
 "AWS::CodeDeploy::DeploymentGroup.TagFilter"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::IoT::Authorizer.TokenSigningPublicKeys" [:map {:closed :true}],
 "AWS::ElasticLoadBalancing::LoadBalancer.ConnectionDrainingPolicy"
 [:map
  {:closed :true}
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["Timeout" {:optional true} [:ref "Integer"]]],
 "AWS::Amplify::Branch.EnvironmentVariable"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ManagedBlockchain::Member.MemberFrameworkConfiguration"
 [:map
  {:closed :true}
  ["MemberFabricConfiguration"
   {:optional true}
   [:ref "AWS::ManagedBlockchain::Member.MemberFabricConfiguration"]]],
 "AWS::EC2::VPNConnectionRoute"
 [:map
  ["Type" [:= "AWS::EC2::VPNConnectionRoute"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DestinationCidrBlock" {:optional true} [:ref "String"]]
    ["VpnConnectionId" {:optional true} [:ref "String"]]]]],
 "AWS::CodePipeline::Pipeline.InputArtifact"
 [:map {:closed :true} ["Name" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket"
 [:map
  ["Type" [:= "AWS::S3::Bucket"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AccessControl" {:optional true} [:ref "String"]]
    ["AnalyticsConfigurations"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::S3::Bucket.AnalyticsConfiguration"]]
      "Fn::If"]]
    ["AccelerateConfiguration"
     {:optional true}
     [:ref "AWS::S3::Bucket.AccelerateConfiguration"]]
    ["VersioningConfiguration"
     {:optional true}
     [:ref "AWS::S3::Bucket.VersioningConfiguration"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ObjectLockEnabled" {:optional true} [:ref "Boolean"]]
    ["NotificationConfiguration"
     {:optional true}
     [:ref "AWS::S3::Bucket.NotificationConfiguration"]]
    ["MetricsConfigurations"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::S3::Bucket.MetricsConfiguration"]]
      "Fn::If"]]
    ["PublicAccessBlockConfiguration"
     {:optional true}
     [:ref "AWS::S3::Bucket.PublicAccessBlockConfiguration"]]
    ["InventoryConfigurations"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::S3::Bucket.InventoryConfiguration"]]
      "Fn::If"]]
    ["CorsConfiguration"
     {:optional true}
     [:ref "AWS::S3::Bucket.CorsConfiguration"]]
    ["ObjectLockConfiguration"
     {:optional true}
     [:ref "AWS::S3::Bucket.ObjectLockConfiguration"]]
    ["LifecycleConfiguration"
     {:optional true}
     [:ref "AWS::S3::Bucket.LifecycleConfiguration"]]
    ["ReplicationConfiguration"
     {:optional true}
     [:ref "AWS::S3::Bucket.ReplicationConfiguration"]]
    ["LoggingConfiguration"
     {:optional true}
     [:ref "AWS::S3::Bucket.LoggingConfiguration"]]
    ["BucketName" {:optional true} [:ref "String"]]
    ["BucketEncryption"
     {:optional true}
     [:ref "AWS::S3::Bucket.BucketEncryption"]]
    ["WebsiteConfiguration"
     {:optional true}
     [:ref "AWS::S3::Bucket.WebsiteConfiguration"]]]]],
 "AWS::Pinpoint::PushTemplate.APNSPushNotificationTemplate"
 [:map
  {:closed :true}
  ["Action" {:optional true} [:ref "String"]]
  ["MediaUrl" {:optional true} [:ref "String"]]
  ["Title" {:optional true} [:ref "String"]]
  ["Sound" {:optional true} [:ref "String"]]
  ["Body" {:optional true} [:ref "String"]]
  ["Url" {:optional true} [:ref "String"]]],
 "AWS::AppSync::DataSource.DeltaSyncConfig"
 [:map
  {:closed :true}
  ["BaseTableTTL" {:optional true} [:ref "String"]]
  ["DeltaSyncTableTTL" {:optional true} [:ref "String"]]
  ["DeltaSyncTableName" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Segment.Recency"
 [:map
  {:closed :true}
  ["Duration" {:optional true} [:ref "String"]]
  ["RecencyType" {:optional true} [:ref "String"]]],
 "AWS::CloudWatch::AnomalyDetector"
 [:map
  ["Type" [:= "AWS::CloudWatch::AnomalyDetector"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MetricName" {:optional true} [:ref "String"]]
    ["Stat" {:optional true} [:ref "String"]]
    ["Configuration"
     {:optional true}
     [:ref "AWS::CloudWatch::AnomalyDetector.Configuration"]]
    ["Dimensions"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::CloudWatch::AnomalyDetector.Dimension"]]
      "Fn::If"]]
    ["Namespace" {:optional true} [:ref "String"]]]]],
 "AWS::AmazonMQ::ConfigurationAssociation"
 [:map
  ["Type" [:= "AWS::AmazonMQ::ConfigurationAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Broker" {:optional true} [:ref "String"]]
    ["Configuration"
     {:optional true}
     [:ref
      "AWS::AmazonMQ::ConfigurationAssociation.ConfigurationId"]]]]],
 "AWS::WAF::IPSet"
 [:map
  ["Type" [:= "AWS::WAF::IPSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["IPSetDescriptors"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::WAF::IPSet.IPSetDescriptor"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Kendra::DataSource.SalesforceStandardObjectConfigurationList"
 [:map
  {:closed :true}
  ["SalesforceStandardObjectConfigurationList"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::Kendra::DataSource.SalesforceStandardObjectConfiguration"]]
    "Fn::If"]]],
 "AWS::DirectoryService::SimpleAD.VpcSettings"
 [:map
  {:closed :true}
  ["SubnetIds" {:optional true} [:ref "StringList"]]
  ["VpcId" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::InputSecurityGroup.InputWhitelistRuleCidr"
 [:map {:closed :true} ["Cidr" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::FunctionDefinitionVersion.Execution"
 [:map
  {:closed :true}
  ["IsolationMode" {:optional true} [:ref "String"]]
  ["RunAs"
   {:optional true}
   [:ref "AWS::Greengrass::FunctionDefinitionVersion.RunAs"]]],
 "AWS::RDS::OptionGroup"
 [:map
  ["Type" [:= "AWS::RDS::OptionGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EngineName" {:optional true} [:ref "String"]]
    ["MajorEngineVersion" {:optional true} [:ref "String"]]
    ["OptionConfigurations"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::RDS::OptionGroup.OptionConfiguration"]]
      "Fn::If"]]
    ["OptionGroupDescription" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::IoT::TopicRule.KinesisAction"
 [:map
  {:closed :true}
  ["PartitionKey" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["StreamName" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.DeleteMarkerReplication"
 [:map {:closed :true} ["Status" {:optional true} [:ref "String"]]],
 "AWS::DMS::Endpoint"
 [:map
  ["Type" [:= "AWS::DMS::Endpoint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Port" {:optional true} [:ref "Integer"]]
    ["KinesisSettings"
     {:optional true}
     [:ref "AWS::DMS::Endpoint.KinesisSettings"]]
    ["EngineName" {:optional true} [:ref "String"]]
    ["ServerName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["EndpointIdentifier" {:optional true} [:ref "String"]]
    ["NeptuneSettings"
     {:optional true}
     [:ref "AWS::DMS::Endpoint.NeptuneSettings"]]
    ["EndpointType" {:optional true} [:ref "String"]]
    ["S3Settings"
     {:optional true}
     [:ref "AWS::DMS::Endpoint.S3Settings"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["Password" {:optional true} [:ref "String"]]
    ["DynamoDbSettings"
     {:optional true}
     [:ref "AWS::DMS::Endpoint.DynamoDbSettings"]]
    ["MongoDbSettings"
     {:optional true}
     [:ref "AWS::DMS::Endpoint.MongoDbSettings"]]
    ["ElasticsearchSettings"
     {:optional true}
     [:ref "AWS::DMS::Endpoint.ElasticsearchSettings"]]
    ["KafkaSettings"
     {:optional true}
     [:ref "AWS::DMS::Endpoint.KafkaSettings"]]
    ["CertificateArn" {:optional true} [:ref "String"]]
    ["SslMode" {:optional true} [:ref "String"]]
    ["Username" {:optional true} [:ref "String"]]
    ["DatabaseName" {:optional true} [:ref "String"]]
    ["ExtraConnectionAttributes" {:optional true} [:ref "String"]]]]],
 "AWS::FSx::FileSystem.LustreConfiguration"
 [:map
  {:closed :true}
  ["ExportPath" {:optional true} [:ref "String"]]
  ["AutomaticBackupRetentionDays" {:optional true} [:ref "Integer"]]
  ["DeploymentType" {:optional true} [:ref "String"]]
  ["DriveCacheType" {:optional true} [:ref "String"]]
  ["DailyAutomaticBackupStartTime" {:optional true} [:ref "String"]]
  ["AutoImportPolicy" {:optional true} [:ref "String"]]
  ["WeeklyMaintenanceStartTime" {:optional true} [:ref "String"]]
  ["PerUnitStorageThroughput" {:optional true} [:ref "Integer"]]
  ["ImportedFileChunkSize" {:optional true} [:ref "Integer"]]
  ["ImportPath" {:optional true} [:ref "String"]]
  ["CopyTagsToBackups" {:optional true} [:ref "Boolean"]]],
 "AWS::GroundStation::DataflowEndpointGroup"
 [:map
  ["Type" [:= "AWS::GroundStation::DataflowEndpointGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EndpointDetails"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::GroundStation::DataflowEndpointGroup.EndpointDetails"]]
      "Fn::If"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::WAFv2::WebACL.IPSetForwardedIPConfiguration"
 [:map
  {:closed :true}
  ["HeaderName" {:optional true} [:ref "String"]]
  ["FallbackBehavior" {:optional true} [:ref "String"]]
  ["Position" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::Application.InputSchema"
 [:map
  {:closed :true}
  ["RecordEncoding" {:optional true} [:ref "String"]]
  ["RecordColumns"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::KinesisAnalyticsV2::Application.RecordColumn"]]
    "Fn::If"]]
  ["RecordFormat"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::Application.RecordFormat"]]],
 "AWS::MediaLive::Channel.H264FilterSettings"
 [:map
  {:closed :true}
  ["TemporalFilterSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.TemporalFilterSettings"]]],
 "AWS::Pinpoint::Segment.SetDimension"
 [:map
  {:closed :true}
  ["DimensionType" {:optional true} [:ref "String"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::DMS::ReplicationTask"
 [:map
  ["Type" [:= "AWS::DMS::ReplicationTask"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ReplicationInstanceArn" {:optional true} [:ref "String"]]
    ["TaskData" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["TableMappings" {:optional true} [:ref "String"]]
    ["ReplicationTaskSettings" {:optional true} [:ref "String"]]
    ["TargetEndpointArn" {:optional true} [:ref "String"]]
    ["CdcStartTime" {:optional true} [:ref "Double"]]
    ["CdcStopPosition" {:optional true} [:ref "String"]]
    ["SourceEndpointArn" {:optional true} [:ref "String"]]
    ["CdcStartPosition" {:optional true} [:ref "String"]]
    ["ReplicationTaskIdentifier" {:optional true} [:ref "String"]]
    ["MigrationType" {:optional true} [:ref "String"]]]]],
 "AWS::ApplicationInsights::Application.ComponentMonitoringSetting"
 [:map
  {:closed :true}
  ["ComponentName" {:optional true} [:ref "String"]]
  ["ComponentARN" {:optional true} [:ref "String"]]
  ["Tier" {:optional true} [:ref "String"]]
  ["ComponentConfigurationMode" {:optional true} [:ref "String"]]
  ["DefaultOverwriteComponentConfiguration"
   {:optional true}
   [:ref
    "AWS::ApplicationInsights::Application.ComponentConfiguration"]]
  ["CustomComponentConfiguration"
   {:optional true}
   [:ref
    "AWS::ApplicationInsights::Application.ComponentConfiguration"]]],
 "AWS::MediaLive::Channel.KeyProviderSettings"
 [:map
  {:closed :true}
  ["StaticKeySettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.StaticKeySettings"]]],
 "AWS::Greengrass::DeviceDefinitionVersion"
 [:map
  ["Type" [:= "AWS::Greengrass::DeviceDefinitionVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DeviceDefinitionId" {:optional true} [:ref "String"]]
    ["Devices"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Greengrass::DeviceDefinitionVersion.Device"]]
      "Fn::If"]]]]],
 "AWS::AppMesh::VirtualNode.TlsValidationContext"
 [:map
  {:closed :true}
  ["Trust"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.TlsValidationContextTrust"]]],
 "AWS::S3::Bucket.ReplicationTimeValue"
 [:map {:closed :true} ["Minutes" {:optional true} [:ref "Integer"]]],
 "AWS::AppMesh::GatewayRoute"
 [:map
  ["Type" [:= "AWS::AppMesh::GatewayRoute"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MeshName" {:optional true} [:ref "String"]]
    ["VirtualGatewayName" {:optional true} [:ref "String"]]
    ["MeshOwner" {:optional true} [:ref "String"]]
    ["GatewayRouteName" {:optional true} [:ref "String"]]
    ["Spec"
     {:optional true}
     [:ref "AWS::AppMesh::GatewayRoute.GatewayRouteSpec"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EMR::InstanceGroupConfig.EbsConfiguration"
 [:map
  {:closed :true}
  ["EbsBlockDeviceConfigs"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::EMR::InstanceGroupConfig.EbsBlockDeviceConfig"]]
    "Fn::If"]]
  ["EbsOptimized" {:optional true} [:ref "Boolean"]]],
 "AWS::Greengrass::DeviceDefinitionVersion.Device"
 [:map
  {:closed :true}
  ["SyncShadow" {:optional true} [:ref "Boolean"]]
  ["ThingArn" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["CertificateArn" {:optional true} [:ref "String"]]],
 "AWS::Lambda::Function.VpcConfig"
 [:map
  {:closed :true}
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
  ["SubnetIds" {:optional true} [:ref "StringList"]]],
 "AWS::Transfer::Server.Protocol" [:map {:closed :true}],
 "AWS::Batch::JobDefinition.NodeRangeProperty"
 [:map
  {:closed :true}
  ["Container"
   {:optional true}
   [:ref "AWS::Batch::JobDefinition.ContainerProperties"]]
  ["TargetNodes" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::Route.GrpcTimeout"
 [:map
  {:closed :true}
  ["PerRequest" {:optional true} [:ref "AWS::AppMesh::Route.Duration"]]
  ["Idle" {:optional true} [:ref "AWS::AppMesh::Route.Duration"]]],
 "AWS::KinesisAnalyticsV2::Application.PropertyGroup"
 [:map
  {:closed :true}
  ["PropertyMap" {:optional true} [:ref "Json"]]
  ["PropertyGroupId" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Channel.RetentionPeriod"
 [:map
  {:closed :true}
  ["NumberOfDays" {:optional true} [:ref "Integer"]]
  ["Unlimited" {:optional true} [:ref "Boolean"]]],
 "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"
 [:map
  {:closed :true}
  ["DataSourceInclusionsExclusionsStrings"
   {:optional true}
   [:ref "StringList"]]],
 "AWS::ElasticBeanstalk::Application.MaxCountRule"
 [:map
  {:closed :true}
  ["DeleteSourceFromS3" {:optional true} [:ref "Boolean"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["MaxCount" {:optional true} [:ref "Integer"]]],
 "AWS::Redshift::ClusterSecurityGroup"
 [:map
  ["Type" [:= "AWS::Redshift::ClusterSecurityGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Cognito::UserPoolUICustomizationAttachment"
 [:map
  ["Type" [:= "AWS::Cognito::UserPoolUICustomizationAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CSS" {:optional true} [:ref "String"]]
    ["UserPoolId" {:optional true} [:ref "String"]]
    ["ClientId" {:optional true} [:ref "String"]]]]],
 "AWS::GlobalAccelerator::EndpointGroup.EndpointConfiguration"
 [:map
  {:closed :true}
  ["EndpointId" {:optional true} [:ref "String"]]
  ["Weight" {:optional true} [:ref "Integer"]]
  ["ClientIPPreservationEnabled" {:optional true} [:ref "Boolean"]]],
 "AWS::MediaLive::Channel.DvbSdtSettings"
 [:map
  {:closed :true}
  ["ServiceProviderName" {:optional true} [:ref "String"]]
  ["OutputSdt" {:optional true} [:ref "String"]]
  ["ServiceName" {:optional true} [:ref "String"]]
  ["RepInterval" {:optional true} [:ref "Integer"]]],
 "AWS::Athena::WorkGroup.WorkGroupConfiguration"
 [:map
  {:closed :true}
  ["BytesScannedCutoffPerQuery" {:optional true} [:ref "Integer"]]
  ["EnforceWorkGroupConfiguration" {:optional true} [:ref "Boolean"]]
  ["PublishCloudWatchMetricsEnabled" {:optional true} [:ref "Boolean"]]
  ["RequesterPaysEnabled" {:optional true} [:ref "Boolean"]]
  ["ResultConfiguration"
   {:optional true}
   [:ref "AWS::Athena::WorkGroup.ResultConfiguration"]]],
 "AWS::IoTAnalytics::Channel.ServiceManagedS3" [:map {:closed :true}],
 "AWS::AutoScaling::AutoScalingGroup.InstancesDistribution"
 [:map
  {:closed :true}
  ["OnDemandAllocationStrategy" {:optional true} [:ref "String"]]
  ["OnDemandBaseCapacity" {:optional true} [:ref "Integer"]]
  ["OnDemandPercentageAboveBaseCapacity"
   {:optional true}
   [:ref "Integer"]]
  ["SpotAllocationStrategy" {:optional true} [:ref "String"]]
  ["SpotInstancePools" {:optional true} [:ref "Integer"]]
  ["SpotMaxPrice" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Pipeline.Activity"
 [:map
  {:closed :true}
  ["RemoveAttributes"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Pipeline.RemoveAttributes"]]
  ["Filter"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Pipeline.Filter"]]
  ["DeviceRegistryEnrich"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Pipeline.DeviceRegistryEnrich"]]
  ["Lambda"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Pipeline.Lambda"]]
  ["Channel"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Pipeline.Channel"]]
  ["Math" {:optional true} [:ref "AWS::IoTAnalytics::Pipeline.Math"]]
  ["AddAttributes"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Pipeline.AddAttributes"]]
  ["DeviceShadowEnrich"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Pipeline.DeviceShadowEnrich"]]
  ["SelectAttributes"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Pipeline.SelectAttributes"]]
  ["Datastore"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Pipeline.Datastore"]]],
 "AWS::IAM::User.LoginProfile"
 [:map
  {:closed :true}
  ["Password" {:optional true} [:ref "String"]]
  ["PasswordResetRequired" {:optional true} [:ref "Boolean"]]],
 "AWS::NetworkManager::Site.Location"
 [:map
  {:closed :true}
  ["Address" {:optional true} [:ref "String"]]
  ["Latitude" {:optional true} [:ref "String"]]
  ["Longitude" {:optional true} [:ref "String"]]],
 "AWS::SSM::ResourceDataSync.AwsOrganizationsSource"
 [:map
  {:closed :true}
  ["OrganizationSourceType" {:optional true} [:ref "String"]]
  ["OrganizationalUnits" {:optional true} [:ref "StringList"]]],
 "AWS::Glue::Crawler.Targets"
 [:map
  {:closed :true}
  ["S3Targets"
   {:optional true}
   [:or [:sequential [:ref "AWS::Glue::Crawler.S3Target"]] "Fn::If"]]
  ["CatalogTargets"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Glue::Crawler.CatalogTarget"]]
    "Fn::If"]]
  ["JdbcTargets"
   {:optional true}
   [:or [:sequential [:ref "AWS::Glue::Crawler.JdbcTarget"]] "Fn::If"]]
  ["DynamoDBTargets"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Glue::Crawler.DynamoDBTarget"]]
    "Fn::If"]]],
 "AWS::AppMesh::VirtualNode.ListenerTlsCertificate"
 [:map
  {:closed :true}
  ["ACM"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.ListenerTlsAcmCertificate"]]
  ["File"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.ListenerTlsFileCertificate"]]],
 "AWS::Pinpoint::SmsTemplate"
 [:map
  ["Type" [:= "AWS::Pinpoint::SmsTemplate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TemplateName" {:optional true} [:ref "String"]]
    ["TemplateDescription" {:optional true} [:ref "String"]]
    ["DefaultSubstitutions" {:optional true} [:ref "String"]]
    ["Body" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]]]],
 "AWS::MediaLive::Channel.InputSettings"
 [:map
  {:closed :true}
  ["FilterStrength" {:optional true} [:ref "Integer"]]
  ["Smpte2038DataPreference" {:optional true} [:ref "String"]]
  ["DenoiseFilter" {:optional true} [:ref "String"]]
  ["VideoSelector"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.VideoSelector"]]
  ["CaptionSelectors"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaLive::Channel.CaptionSelector"]]
    "Fn::If"]]
  ["AudioSelectors"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaLive::Channel.AudioSelector"]]
    "Fn::If"]]
  ["DeblockFilter" {:optional true} [:ref "String"]]
  ["InputFilter" {:optional true} [:ref "String"]]
  ["SourceEndBehavior" {:optional true} [:ref "String"]]
  ["NetworkInputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.NetworkInputSettings"]]],
 "AWS::MediaLive::Channel.RtmpGroupSettings"
 [:map
  {:closed :true}
  ["AuthenticationScheme" {:optional true} [:ref "String"]]
  ["CacheLength" {:optional true} [:ref "Integer"]]
  ["InputLossAction" {:optional true} [:ref "String"]]
  ["RestartDelay" {:optional true} [:ref "Integer"]]
  ["CaptionData" {:optional true} [:ref "String"]]
  ["CacheFullBehavior" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Pipeline.SelectAttributes"
 [:map
  {:closed :true}
  ["Next" {:optional true} [:ref "String"]]
  ["Attributes" {:optional true} [:ref "StringList"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ApplicationInsights::Application.SubComponentTypeConfiguration"
 [:map
  {:closed :true}
  ["SubComponentType" {:optional true} [:ref "String"]]
  ["SubComponentConfigurationDetails"
   {:optional true}
   [:ref
    "AWS::ApplicationInsights::Application.SubComponentConfigurationDetails"]]],
 "AWS::ElasticBeanstalk::Environment.OptionSetting"
 [:map
  {:closed :true}
  ["Namespace" {:optional true} [:ref "String"]]
  ["OptionName" {:optional true} [:ref "String"]]
  ["ResourceName" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.OnEnter"
 [:map
  {:closed :true}
  ["Events"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoTEvents::DetectorModel.Event"]]
    "Fn::If"]]],
 "AWS::CodeBuild::Project.GitSubmodulesConfig"
 [:map
  {:closed :true}
  ["FetchSubmodules" {:optional true} [:ref "Boolean"]]],
 "AWS::GameLift::GameSessionQueue.Destination"
 [:map
  {:closed :true}
  ["DestinationArn" {:optional true} [:ref "String"]]],
 "AWS::AppSync::Resolver.SyncConfig"
 [:map
  {:closed :true}
  ["ConflictHandler" {:optional true} [:ref "String"]]
  ["ConflictDetection" {:optional true} [:ref "String"]]
  ["LambdaConflictHandlerConfig"
   {:optional true}
   [:ref "AWS::AppSync::Resolver.LambdaConflictHandlerConfig"]]],
 "AWS::Greengrass::Group.GroupVersion"
 [:map
  {:closed :true}
  ["LoggerDefinitionVersionArn" {:optional true} [:ref "String"]]
  ["DeviceDefinitionVersionArn" {:optional true} [:ref "String"]]
  ["FunctionDefinitionVersionArn" {:optional true} [:ref "String"]]
  ["CoreDefinitionVersionArn" {:optional true} [:ref "String"]]
  ["ResourceDefinitionVersionArn" {:optional true} [:ref "String"]]
  ["ConnectorDefinitionVersionArn" {:optional true} [:ref "String"]]
  ["SubscriptionDefinitionVersionArn"
   {:optional true}
   [:ref "String"]]],
 "AWS::ApiGateway::RestApi.EndpointConfiguration"
 [:map
  {:closed :true}
  ["Types" {:optional true} [:ref "StringList"]]
  ["VpcEndpointIds" {:optional true} [:ref "StringList"]]],
 "AWS::AutoScaling::AutoScalingGroup.LaunchTemplate"
 [:map
  {:closed :true}
  ["LaunchTemplateSpecification"
   {:optional true}
   [:ref
    "AWS::AutoScaling::AutoScalingGroup.LaunchTemplateSpecification"]]
  ["Overrides"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::AutoScaling::AutoScalingGroup.LaunchTemplateOverrides"]]
    "Fn::If"]]],
 "AWS::Pinpoint::Segment.Groups"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["SourceType" {:optional true} [:ref "String"]]
  ["Dimensions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Pinpoint::Segment.SegmentDimensions"]]
    "Fn::If"]]
  ["SourceSegments"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Pinpoint::Segment.SourceSegments"]]
    "Fn::If"]]],
 "AWS::Config::OrganizationConformancePack.ConformancePackInputParameter"
 [:map
  {:closed :true}
  ["ParameterName" {:optional true} [:ref "String"]]
  ["ParameterValue" {:optional true} [:ref "String"]]],
 "AWS::ServiceCatalog::PortfolioPrincipalAssociation"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::PortfolioPrincipalAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PrincipalARN" {:optional true} [:ref "String"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["PortfolioId" {:optional true} [:ref "String"]]
    ["PrincipalType" {:optional true} [:ref "String"]]]]],
 "AWS::ECS::TaskDefinition.ContainerDefinition"
 [:map
  {:closed :true}
  ["EnvironmentFiles"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.EnvironmentFile"]]
    "Fn::If"]]
  ["Cpu" {:optional true} [:ref "Integer"]]
  ["Environment"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.KeyValuePair"]]
    "Fn::If"]]
  ["Memory" {:optional true} [:ref "Integer"]]
  ["SystemControls"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.SystemControl"]]
    "Fn::If"]]
  ["LogConfiguration"
   {:optional true}
   [:ref "AWS::ECS::TaskDefinition.LogConfiguration"]]
  ["MountPoints"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.MountPoint"]]
    "Fn::If"]]
  ["EntryPoint" {:optional true} [:ref "StringList"]]
  ["Image" {:optional true} [:ref "String"]]
  ["FirelensConfiguration"
   {:optional true}
   [:ref "AWS::ECS::TaskDefinition.FirelensConfiguration"]]
  ["ReadonlyRootFilesystem" {:optional true} [:ref "Boolean"]]
  ["PseudoTerminal" {:optional true} [:ref "Boolean"]]
  ["Interactive" {:optional true} [:ref "Boolean"]]
  ["ResourceRequirements"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.ResourceRequirement"]]
    "Fn::If"]]
  ["StopTimeout" {:optional true} [:ref "Integer"]]
  ["DisableNetworking" {:optional true} [:ref "Boolean"]]
  ["Hostname" {:optional true} [:ref "String"]]
  ["WorkingDirectory" {:optional true} [:ref "String"]]
  ["DnsServers" {:optional true} [:ref "StringList"]]
  ["DnsSearchDomains" {:optional true} [:ref "StringList"]]
  ["ExtraHosts"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.HostEntry"]]
    "Fn::If"]]
  ["DockerLabels" {:optional true} [:ref "StringMap"]]
  ["MemoryReservation" {:optional true} [:ref "Integer"]]
  ["Command" {:optional true} [:ref "StringList"]]
  ["User" {:optional true} [:ref "String"]]
  ["VolumesFrom"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.VolumeFrom"]]
    "Fn::If"]]
  ["HealthCheck"
   {:optional true}
   [:ref "AWS::ECS::TaskDefinition.HealthCheck"]]
  ["RepositoryCredentials"
   {:optional true}
   [:ref "AWS::ECS::TaskDefinition.RepositoryCredentials"]]
  ["Links" {:optional true} [:ref "StringList"]]
  ["Ulimits"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.Ulimit"]]
    "Fn::If"]]
  ["Secrets"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.Secret"]]
    "Fn::If"]]
  ["DockerSecurityOptions" {:optional true} [:ref "StringList"]]
  ["Name" {:optional true} [:ref "String"]]
  ["PortMappings"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.PortMapping"]]
    "Fn::If"]]
  ["DependsOn"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.ContainerDependency"]]
    "Fn::If"]]
  ["StartTimeout" {:optional true} [:ref "Integer"]]
  ["LinuxParameters"
   {:optional true}
   [:ref "AWS::ECS::TaskDefinition.LinuxParameters"]]
  ["Essential" {:optional true} [:ref "Boolean"]]
  ["Privileged" {:optional true} [:ref "Boolean"]]],
 "AWS::IoTEvents::DetectorModel.Sqs"
 [:map
  {:closed :true}
  ["UseBase64" {:optional true} [:ref "Boolean"]]
  ["Payload"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.Payload"]]
  ["QueueUrl" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.RemixSettings"
 [:map
  {:closed :true}
  ["ChannelsOut" {:optional true} [:ref "Integer"]]
  ["ChannelMappings"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaLive::Channel.AudioChannelMapping"]]
    "Fn::If"]]
  ["ChannelsIn" {:optional true} [:ref "Integer"]]],
 "AWS::CodeBuild::Project.SourceAuth"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Resource" {:optional true} [:ref "String"]]],
 "AWS::Lambda::EventInvokeConfig.OnFailure"
 [:map
  {:closed :true}
  ["Destination" {:optional true} [:ref "String"]]],
 "AWS::Cloud9::EnvironmentEC2"
 [:map
  ["Type" [:= "AWS::Cloud9::EnvironmentEC2"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AutomaticStopTimeMinutes" {:optional true} [:ref "Integer"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["InstanceType" {:optional true} [:ref "String"]]
    ["Repositories"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Cloud9::EnvironmentEC2.Repository"]]
      "Fn::If"]]
    ["ConnectionType" {:optional true} [:ref "String"]]
    ["SubnetId" {:optional true} [:ref "String"]]
    ["OwnerArn" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::Instance.ElasticGpuSpecification"
 [:map {:closed :true} ["Type" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.AndStatementTwo"
 [:map
  {:closed :true}
  ["Statements"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::RuleGroup.StatementThree"]]
    "Fn::If"]]],
 "AWS::EMR::InstanceGroupConfig.MetricDimension"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.EncoderSettings"
 [:map
  {:closed :true}
  ["AvailBlanking"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AvailBlanking"]]
  ["VideoDescriptions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaLive::Channel.VideoDescription"]]
    "Fn::If"]]
  ["BlackoutSlate"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.BlackoutSlate"]]
  ["FeatureActivations"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.FeatureActivations"]]
  ["NielsenConfiguration"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.NielsenConfiguration"]]
  ["CaptionDescriptions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaLive::Channel.CaptionDescription"]]
    "Fn::If"]]
  ["OutputGroups"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaLive::Channel.OutputGroup"]]
    "Fn::If"]]
  ["AudioDescriptions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaLive::Channel.AudioDescription"]]
    "Fn::If"]]
  ["AvailConfiguration"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AvailConfiguration"]]
  ["TimecodeConfig"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.TimecodeConfig"]]
  ["GlobalConfiguration"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.GlobalConfiguration"]]],
 "AWS::WAF::ByteMatchSet"
 [:map
  ["Type" [:= "AWS::WAF::ByteMatchSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ByteMatchTuples"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::WAF::ByteMatchSet.ByteMatchTuple"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::EMR::Cluster.EbsConfiguration"
 [:map
  {:closed :true}
  ["EbsBlockDeviceConfigs"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::Cluster.EbsBlockDeviceConfig"]]
    "Fn::If"]]
  ["EbsOptimized" {:optional true} [:ref "Boolean"]]],
 "AWS::AutoScaling::AutoScalingGroup.LaunchTemplateSpecification"
 [:map
  {:closed :true}
  ["LaunchTemplateId" {:optional true} [:ref "String"]]
  ["LaunchTemplateName" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPoolRiskConfigurationAttachment.NotifyConfigurationType"
 [:map
  {:closed :true}
  ["BlockEmail"
   {:optional true}
   [:ref
    "AWS::Cognito::UserPoolRiskConfigurationAttachment.NotifyEmailType"]]
  ["ReplyTo" {:optional true} [:ref "String"]]
  ["SourceArn" {:optional true} [:ref "String"]]
  ["NoActionEmail"
   {:optional true}
   [:ref
    "AWS::Cognito::UserPoolRiskConfigurationAttachment.NotifyEmailType"]]
  ["From" {:optional true} [:ref "String"]]
  ["MfaEmail"
   {:optional true}
   [:ref
    "AWS::Cognito::UserPoolRiskConfigurationAttachment.NotifyEmailType"]]],
 "AWS::ApiGatewayV2::Authorizer.JWTConfiguration"
 [:map
  {:closed :true}
  ["Issuer" {:optional true} [:ref "String"]]
  ["Audience" {:optional true} [:ref "StringList"]]],
 "AWS::IoTEvents::DetectorModel.Payload"
 [:map
  {:closed :true}
  ["ContentExpression" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinitionVersion.SecretsManagerSecretResourceData"
 [:map
  {:closed :true}
  ["ARN" {:optional true} [:ref "String"]]
  ["AdditionalStagingLabelsToDownload"
   {:optional true}
   [:ref "StringList"]]],
 "AWS::IoTThingsGraph::FlowTemplate.DefinitionDocument"
 [:map
  {:closed :true}
  ["Language" {:optional true} [:ref "String"]]
  ["Text" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::SubscriptionDefinition"
 [:map
  ["Type" [:= "AWS::Greengrass::SubscriptionDefinition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InitialVersion"
     {:optional true}
     [:ref
      "AWS::Greengrass::SubscriptionDefinition.SubscriptionDefinitionVersion"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::WAFRegional::XssMatchSet.FieldToMatch"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Data" {:optional true} [:ref "String"]]],
 "AWS::DataPipeline::Pipeline.ParameterValue"
 [:map
  {:closed :true}
  ["Id" {:optional true} [:ref "String"]]
  ["StringValue" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.ServiceNowServiceCatalogConfiguration"
 [:map
  {:closed :true}
  ["CrawlAttachments" {:optional true} [:ref "Boolean"]]
  ["IncludeAttachmentFilePatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["ExcludeAttachmentFilePatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["DocumentDataFieldName" {:optional true} [:ref "String"]]
  ["DocumentTitleFieldName" {:optional true} [:ref "String"]]
  ["FieldMappings"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"]]],
 "AWS::ElasticLoadBalancingV2::Listener.RedirectConfig"
 [:map
  {:closed :true}
  ["Host" {:optional true} [:ref "String"]]
  ["Path" {:optional true} [:ref "String"]]
  ["Port" {:optional true} [:ref "String"]]
  ["Protocol" {:optional true} [:ref "String"]]
  ["Query" {:optional true} [:ref "String"]]
  ["StatusCode" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.CaptionSelector"
 [:map
  {:closed :true}
  ["LanguageCode" {:optional true} [:ref "String"]]
  ["SelectorSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.CaptionSelectorSettings"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Elasticsearch::Domain.SnapshotOptions"
 [:map
  {:closed :true}
  ["AutomatedSnapshotStartHour" {:optional true} [:ref "Integer"]]],
 "AWS::AppSync::GraphQLApi.LogConfig"
 [:map
  {:closed :true}
  ["CloudWatchLogsRoleArn" {:optional true} [:ref "String"]]
  ["ExcludeVerboseContent" {:optional true} [:ref "Boolean"]]
  ["FieldLogLevel" {:optional true} [:ref "String"]]],
 "AWS::Cloud9::EnvironmentEC2.Repository"
 [:map
  {:closed :true}
  ["PathComponent" {:optional true} [:ref "String"]]
  ["RepositoryUrl" {:optional true} [:ref "String"]]],
 "AWS::OpsWorks::Instance"
 [:map
  ["Type" [:= "AWS::OpsWorks::Instance"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["AgentVersion" {:optional true} [:ref "String"]]
    ["AmiId" {:optional true} [:ref "String"]]
    ["Architecture" {:optional true} [:ref "String"]]
    ["InstanceType" {:optional true} [:ref "String"]]
    ["LayerIds" {:optional true} [:ref "StringList"]]
    ["StackId" {:optional true} [:ref "String"]]
    ["Hostname" {:optional true} [:ref "String"]]
    ["ElasticIps" {:optional true} [:ref "StringList"]]
    ["EbsOptimized" {:optional true} [:ref "Boolean"]]
    ["RootDeviceType" {:optional true} [:ref "String"]]
    ["InstallUpdatesOnBoot" {:optional true} [:ref "Boolean"]]
    ["SubnetId" {:optional true} [:ref "String"]]
    ["AutoScalingType" {:optional true} [:ref "String"]]
    ["VirtualizationType" {:optional true} [:ref "String"]]
    ["Tenancy" {:optional true} [:ref "String"]]
    ["Volumes" {:optional true} [:ref "StringList"]]
    ["BlockDeviceMappings"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::OpsWorks::Instance.BlockDeviceMapping"]]
      "Fn::If"]]
    ["TimeBasedAutoScaling"
     {:optional true}
     [:ref "AWS::OpsWorks::Instance.TimeBasedAutoScaling"]]
    ["Os" {:optional true} [:ref "String"]]
    ["SshKeyName" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::EC2Fleet.CapacityReservationOptionsRequest"
 [:map
  {:closed :true}
  ["UsageStrategy" {:optional true} [:ref "String"]]],
 "AWS::EC2::Instance"
 [:map
  ["Type" [:= "AWS::EC2::Instance"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["ElasticInferenceAccelerators"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::EC2::Instance.ElasticInferenceAccelerator"]]
      "Fn::If"]]
    ["ImageId" {:optional true} [:ref "String"]]
    ["SsmAssociations"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EC2::Instance.SsmAssociation"]]
      "Fn::If"]]
    ["SourceDestCheck" {:optional true} [:ref "Boolean"]]
    ["UserData" {:optional true} [:ref "String"]]
    ["PlacementGroupName" {:optional true} [:ref "String"]]
    ["HibernationOptions"
     {:optional true}
     [:ref "AWS::EC2::Instance.HibernationOptions"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["CreditSpecification"
     {:optional true}
     [:ref "AWS::EC2::Instance.CreditSpecification"]]
    ["PrivateIpAddress" {:optional true} [:ref "String"]]
    ["InstanceType" {:optional true} [:ref "String"]]
    ["RamdiskId" {:optional true} [:ref "String"]]
    ["LaunchTemplate"
     {:optional true}
     [:ref "AWS::EC2::Instance.LaunchTemplateSpecification"]]
    ["ElasticGpuSpecifications"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EC2::Instance.ElasticGpuSpecification"]]
      "Fn::If"]]
    ["LicenseSpecifications"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EC2::Instance.LicenseSpecification"]]
      "Fn::If"]]
    ["HostId" {:optional true} [:ref "String"]]
    ["EbsOptimized" {:optional true} [:ref "Boolean"]]
    ["KernelId" {:optional true} [:ref "String"]]
    ["CpuOptions"
     {:optional true}
     [:ref "AWS::EC2::Instance.CpuOptions"]]
    ["Affinity" {:optional true} [:ref "String"]]
    ["SubnetId" {:optional true} [:ref "String"]]
    ["KeyName" {:optional true} [:ref "String"]]
    ["SecurityGroups" {:optional true} [:ref "StringList"]]
    ["DisableApiTermination" {:optional true} [:ref "Boolean"]]
    ["Ipv6AddressCount" {:optional true} [:ref "Integer"]]
    ["InstanceInitiatedShutdownBehavior"
     {:optional true}
     [:ref "String"]]
    ["Tenancy" {:optional true} [:ref "String"]]
    ["IamInstanceProfile" {:optional true} [:ref "String"]]
    ["Volumes"
     {:optional true}
     [:or [:sequential [:ref "AWS::EC2::Instance.Volume"]] "Fn::If"]]
    ["BlockDeviceMappings"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EC2::Instance.BlockDeviceMapping"]]
      "Fn::If"]]
    ["HostResourceGroupArn" {:optional true} [:ref "String"]]
    ["AdditionalInfo" {:optional true} [:ref "String"]]
    ["Monitoring" {:optional true} [:ref "Boolean"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["NetworkInterfaces"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EC2::Instance.NetworkInterface"]]
      "Fn::If"]]
    ["Ipv6Addresses"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EC2::Instance.InstanceIpv6Address"]]
      "Fn::If"]]]]],
 "AWS::Lambda::Alias"
 [:map
  ["Type" [:= "AWS::Lambda::Alias"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["FunctionName" {:optional true} [:ref "String"]]
    ["FunctionVersion" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["ProvisionedConcurrencyConfig"
     {:optional true}
     [:ref "AWS::Lambda::Alias.ProvisionedConcurrencyConfiguration"]]
    ["RoutingConfig"
     {:optional true}
     [:ref "AWS::Lambda::Alias.AliasRoutingConfiguration"]]]]],
 "AWS::DAX::SubnetGroup"
 [:map
  ["Type" [:= "AWS::DAX::SubnetGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["SubnetGroupName" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]]]],
 "AWS::EC2::EC2Fleet.FleetLaunchTemplateOverridesRequest"
 [:map
  {:closed :true}
  ["WeightedCapacity" {:optional true} [:ref "Double"]]
  ["Placement" {:optional true} [:ref "AWS::EC2::EC2Fleet.Placement"]]
  ["Priority" {:optional true} [:ref "Double"]]
  ["AvailabilityZone" {:optional true} [:ref "String"]]
  ["SubnetId" {:optional true} [:ref "String"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["MaxPrice" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.StatementOne"
 [:map
  {:closed :true}
  ["NotStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.NotStatementOne"]]
  ["SqliMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.SqliMatchStatement"]]
  ["OrStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.OrStatementOne"]]
  ["SizeConstraintStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.SizeConstraintStatement"]]
  ["XssMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.XssMatchStatement"]]
  ["IPSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.IPSetReferenceStatement"]]
  ["RegexPatternSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.RegexPatternSetReferenceStatement"]]
  ["AndStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.AndStatementOne"]]
  ["ByteMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.ByteMatchStatement"]]
  ["RateBasedStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.RateBasedStatementOne"]]
  ["GeoMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.GeoMatchStatement"]]],
 "AWS::ServiceCatalog::TagOption"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::TagOption"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Active" {:optional true} [:ref "Boolean"]]
    ["Value" {:optional true} [:ref "String"]]
    ["Key" {:optional true} [:ref "String"]]]]],
 "AWS::Glue::MLTransform.TransformParameters"
 [:map
  {:closed :true}
  ["TransformType" {:optional true} [:ref "String"]]
  ["FindMatchesParameters"
   {:optional true}
   [:ref "AWS::Glue::MLTransform.FindMatchesParameters"]]],
 "AWS::AppMesh::VirtualService.VirtualRouterServiceProvider"
 [:map
  {:closed :true}
  ["VirtualRouterName" {:optional true} [:ref "String"]]],
 "AWS::OpsWorks::App.EnvironmentVariable"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Secure" {:optional true} [:ref "Boolean"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::AppSync::GraphQLApi.UserPoolConfig"
 [:map
  {:closed :true}
  ["AppIdClientRegex" {:optional true} [:ref "String"]]
  ["UserPoolId" {:optional true} [:ref "String"]]
  ["AwsRegion" {:optional true} [:ref "String"]]
  ["DefaultAction" {:optional true} [:ref "String"]]],
 "AWS::ApiGatewayV2::DomainName"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::DomainName"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DomainName" {:optional true} [:ref "String"]]
    ["DomainNameConfigurations"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ApiGatewayV2::DomainName.DomainNameConfiguration"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:ref "Json"]]]]],
 "AWS::GameLift::Build"
 [:map
  ["Type" [:= "AWS::GameLift::Build"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["OperatingSystem" {:optional true} [:ref "String"]]
    ["StorageLocation"
     {:optional true}
     [:ref "AWS::GameLift::Build.S3Location"]]
    ["Version" {:optional true} [:ref "String"]]]]],
 "AWS::IoTAnalytics::Pipeline.Math"
 [:map
  {:closed :true}
  ["Attribute" {:optional true} [:ref "String"]]
  ["Next" {:optional true} [:ref "String"]]
  ["Math" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ApiGatewayV2::Route.ParameterConstraints"
 [:map {:closed :true} ["Required" {:optional true} [:ref "Boolean"]]],
 "AWS::MediaLive::Channel.UdpContainerSettings"
 [:map
  {:closed :true}
  ["M2tsSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.M2tsSettings"]]],
 "AWS::KinesisAnalytics::ApplicationOutput.KinesisFirehoseOutput"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]],
 "AWS::DLM::LifecyclePolicy.Parameters"
 [:map
  {:closed :true}
  ["ExcludeBootVolume" {:optional true} [:ref "Boolean"]]],
 "AWS::WAFv2::IPSet"
 [:map
  ["Type" [:= "AWS::WAFv2::IPSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Scope" {:optional true} [:ref "String"]]
    ["IPAddressVersion" {:optional true} [:ref "String"]]
    ["Addresses" {:optional true} [:ref "StringList"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayListener"
 [:map
  {:closed :true}
  ["HealthCheck"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualGateway.VirtualGatewayHealthCheckPolicy"]]
  ["TLS"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualGateway.VirtualGatewayListenerTls"]]
  ["PortMapping"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualGateway.VirtualGatewayPortMapping"]]],
 "AWS::AppStream::ImageBuilder.VpcConfig"
 [:map
  {:closed :true}
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
  ["SubnetIds" {:optional true} [:ref "StringList"]]],
 "AWS::ApiGatewayV2::IntegrationResponse"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::IntegrationResponse"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResponseTemplates" {:optional true} [:ref "Json"]]
    ["TemplateSelectionExpression" {:optional true} [:ref "String"]]
    ["ResponseParameters" {:optional true} [:ref "Json"]]
    ["ContentHandlingStrategy" {:optional true} [:ref "String"]]
    ["IntegrationId" {:optional true} [:ref "String"]]
    ["IntegrationResponseKey" {:optional true} [:ref "String"]]
    ["ApiId" {:optional true} [:ref "String"]]]]],
 "AWS::Pinpoint::Campaign.WriteTreatmentResource"
 [:map
  {:closed :true}
  ["TreatmentDescription" {:optional true} [:ref "String"]]
  ["MessageConfiguration"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.MessageConfiguration"]]
  ["Schedule"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.Schedule"]]
  ["SizePercent" {:optional true} [:ref "Integer"]]
  ["TreatmentName" {:optional true} [:ref "String"]]],
 "AWS::AppSync::ApiKey"
 [:map
  ["Type" [:= "AWS::AppSync::ApiKey"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Expires" {:optional true} [:ref "Double"]]
    ["ApiId" {:optional true} [:ref "String"]]]]],
 "AWS::EMR::Cluster.ScalingRule"
 [:map
  {:closed :true}
  ["Action" {:optional true} [:ref "AWS::EMR::Cluster.ScalingAction"]]
  ["Description" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Trigger"
   {:optional true}
   [:ref "AWS::EMR::Cluster.ScalingTrigger"]]],
 "AWS::Budgets::Budget.Notification"
 [:map
  {:closed :true}
  ["ComparisonOperator" {:optional true} [:ref "String"]]
  ["NotificationType" {:optional true} [:ref "String"]]
  ["Threshold" {:optional true} [:ref "Double"]]
  ["ThresholdType" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.Lambda"
 [:map
  {:closed :true}
  ["FunctionArn" {:optional true} [:ref "String"]]
  ["Payload"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.Payload"]]],
 "AWS::CloudFront::Distribution.OriginGroupFailoverCriteria"
 [:map
  {:closed :true}
  ["StatusCodes"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.StatusCodes"]]],
 "AWS::Elasticsearch::Domain.CognitoOptions"
 [:map
  {:closed :true}
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["IdentityPoolId" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["UserPoolId" {:optional true} [:ref "String"]]],
 "AWS::EC2::ClientVpnEndpoint.ClientAuthenticationRequest"
 [:map
  {:closed :true}
  ["MutualAuthentication"
   {:optional true}
   [:ref
    "AWS::EC2::ClientVpnEndpoint.CertificateAuthenticationRequest"]]
  ["Type" {:optional true} [:ref "String"]]
  ["FederatedAuthentication"
   {:optional true}
   [:ref "AWS::EC2::ClientVpnEndpoint.FederatedAuthenticationRequest"]]
  ["ActiveDirectory"
   {:optional true}
   [:ref
    "AWS::EC2::ClientVpnEndpoint.DirectoryServiceAuthenticationRequest"]]],
 "AWS::OpsWorks::Layer.LoadBasedAutoScaling"
 [:map
  {:closed :true}
  ["DownScaling"
   {:optional true}
   [:ref "AWS::OpsWorks::Layer.AutoScalingThresholds"]]
  ["Enable" {:optional true} [:ref "Boolean"]]
  ["UpScaling"
   {:optional true}
   [:ref "AWS::OpsWorks::Layer.AutoScalingThresholds"]]],
 "AWS::EMR::SecurityConfiguration"
 [:map
  ["Type" [:= "AWS::EMR::SecurityConfiguration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["SecurityConfiguration" {:optional true} [:ref "Json"]]]]],
 "AWS::Synthetics::Canary"
 [:map
  ["Type" [:= "AWS::Synthetics::Canary"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Schedule"
     {:optional true}
     [:ref "AWS::Synthetics::Canary.Schedule"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ArtifactS3Location" {:optional true} [:ref "String"]]
    ["RuntimeVersion" {:optional true} [:ref "String"]]
    ["ExecutionRoleArn" {:optional true} [:ref "String"]]
    ["FailureRetentionPeriod" {:optional true} [:ref "Integer"]]
    ["VPCConfig"
     {:optional true}
     [:ref "AWS::Synthetics::Canary.VPCConfig"]]
    ["Code" {:optional true} [:ref "AWS::Synthetics::Canary.Code"]]
    ["StartCanaryAfterCreation" {:optional true} [:ref "Boolean"]]
    ["Name" {:optional true} [:ref "String"]]
    ["SuccessRetentionPeriod" {:optional true} [:ref "Integer"]]
    ["RunConfig"
     {:optional true}
     [:ref "AWS::Synthetics::Canary.RunConfig"]]]]],
 "AWS::MediaLive::Channel.HlsMediaStoreSettings"
 [:map
  {:closed :true}
  ["FilecacheDuration" {:optional true} [:ref "Integer"]]
  ["NumRetries" {:optional true} [:ref "Integer"]]
  ["MediaStoreStorageClass" {:optional true} [:ref "String"]]
  ["RestartDelay" {:optional true} [:ref "Integer"]]
  ["ConnectionRetryInterval" {:optional true} [:ref "Integer"]]],
 "AWS::Batch::JobQueue.ComputeEnvironmentOrder"
 [:map
  {:closed :true}
  ["ComputeEnvironment" {:optional true} [:ref "String"]]
  ["Order" {:optional true} [:ref "Integer"]]],
 "AWS::Neptune::DBCluster.DBClusterRole"
 [:map
  {:closed :true}
  ["RoleArn" {:optional true} [:ref "String"]]
  ["FeatureName" {:optional true} [:ref "String"]]],
 "AWS::GameLift::Script"
 [:map
  ["Type" [:= "AWS::GameLift::Script"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Version" {:optional true} [:ref "String"]]
    ["StorageLocation"
     {:optional true}
     [:ref "AWS::GameLift::Script.S3Location"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::ApiGateway::Method.Integration"
 [:map
  {:closed :true}
  ["TimeoutInMillis" {:optional true} [:ref "Integer"]]
  ["ContentHandling" {:optional true} [:ref "String"]]
  ["RequestParameters" {:optional true} [:ref "StringMap"]]
  ["CacheKeyParameters" {:optional true} [:ref "StringList"]]
  ["RequestTemplates" {:optional true} [:ref "StringMap"]]
  ["IntegrationResponses"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ApiGateway::Method.IntegrationResponse"]]
    "Fn::If"]]
  ["ConnectionType" {:optional true} [:ref "String"]]
  ["CacheNamespace" {:optional true} [:ref "String"]]
  ["Credentials" {:optional true} [:ref "String"]]
  ["ConnectionId" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["PassthroughBehavior" {:optional true} [:ref "String"]]
  ["Uri" {:optional true} [:ref "String"]]
  ["IntegrationHttpMethod" {:optional true} [:ref "String"]]],
 "AWS::StepFunctions::StateMachine.LoggingConfiguration"
 [:map
  {:closed :true}
  ["IncludeExecutionData" {:optional true} [:ref "Boolean"]]
  ["Destinations"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::StepFunctions::StateMachine.LogDestination"]]
    "Fn::If"]]
  ["Level" {:optional true} [:ref "String"]]],
 "AWS::WAFRegional::ByteMatchSet.ByteMatchTuple"
 [:map
  {:closed :true}
  ["TargetString" {:optional true} [:ref "String"]]
  ["TargetStringBase64" {:optional true} [:ref "String"]]
  ["PositionalConstraint" {:optional true} [:ref "String"]]
  ["TextTransformation" {:optional true} [:ref "String"]]
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFRegional::ByteMatchSet.FieldToMatch"]]],
 "AWS::Greengrass::SubscriptionDefinition.Subscription"
 [:map
  {:closed :true}
  ["Target" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Source" {:optional true} [:ref "String"]]
  ["Subject" {:optional true} [:ref "String"]]],
 "AWS::DynamoDB::Table.KeySchema"
 [:map
  {:closed :true}
  ["AttributeName" {:optional true} [:ref "String"]]
  ["KeyType" {:optional true} [:ref "String"]]],
 "AWS::ECS::Service.LoadBalancer"
 [:map
  {:closed :true}
  ["ContainerName" {:optional true} [:ref "String"]]
  ["ContainerPort" {:optional true} [:ref "Integer"]]
  ["LoadBalancerName" {:optional true} [:ref "String"]]
  ["TargetGroupArn" {:optional true} [:ref "String"]]],
 "AWS::SSM::MaintenanceWindowTask.NotificationConfig"
 [:map
  {:closed :true}
  ["NotificationArn" {:optional true} [:ref "String"]]
  ["NotificationType" {:optional true} [:ref "String"]]
  ["NotificationEvents" {:optional true} [:ref "StringList"]]],
 "AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSet"
 [:map
  {:closed :true}
  ["OnPremisesTagSetList"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::CodeDeploy::DeploymentGroup.OnPremisesTagSetListObject"]]
    "Fn::If"]]],
 "AWS::ApiGateway::Stage.MethodSetting"
 [:map
  {:closed :true}
  ["DataTraceEnabled" {:optional true} [:ref "Boolean"]]
  ["MetricsEnabled" {:optional true} [:ref "Boolean"]]
  ["HttpMethod" {:optional true} [:ref "String"]]
  ["CachingEnabled" {:optional true} [:ref "Boolean"]]
  ["CacheTtlInSeconds" {:optional true} [:ref "Integer"]]
  ["LoggingLevel" {:optional true} [:ref "String"]]
  ["ThrottlingRateLimit" {:optional true} [:ref "Double"]]
  ["ResourcePath" {:optional true} [:ref "String"]]
  ["ThrottlingBurstLimit" {:optional true} [:ref "Integer"]]
  ["CacheDataEncrypted" {:optional true} [:ref "Boolean"]]],
 "AWS::Amplify::App"
 [:map
  ["Type" [:= "AWS::Amplify::App"]]
  ["Properties"
   [:map
    {:closed :true}
    ["OauthToken" {:optional true} [:ref "String"]]
    ["BuildSpec" {:optional true} [:ref "String"]]
    ["AutoBranchCreationConfig"
     {:optional true}
     [:ref "AWS::Amplify::App.AutoBranchCreationConfig"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["AccessToken" {:optional true} [:ref "String"]]
    ["EnableBranchAutoDeletion" {:optional true} [:ref "Boolean"]]
    ["BasicAuthConfig"
     {:optional true}
     [:ref "AWS::Amplify::App.BasicAuthConfig"]]
    ["EnvironmentVariables"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Amplify::App.EnvironmentVariable"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]
    ["CustomRules"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Amplify::App.CustomRule"]]
      "Fn::If"]]
    ["Description" {:optional true} [:ref "String"]]
    ["IAMServiceRole" {:optional true} [:ref "String"]]
    ["Repository" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption"
 [:map
  ["Type"
   [:= "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["CloudWatchLoggingOption"
     {:optional true}
     [:ref
      "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption.CloudWatchLoggingOption"]]]]],
 "AWS::Events::EventBusPolicy.Condition"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.AclConfiguration"
 [:map
  {:closed :true}
  ["AllowedGroupsColumnName" {:optional true} [:ref "String"]]],
 "AWS::EC2::TransitGatewayRouteTableAssociation"
 [:map
  ["Type" [:= "AWS::EC2::TransitGatewayRouteTableAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TransitGatewayRouteTableId" {:optional true} [:ref "String"]]
    ["TransitGatewayAttachmentId" {:optional true} [:ref "String"]]]]],
 "AWS::IoTAnalytics::Dataset.Schedule"
 [:map
  {:closed :true}
  ["ScheduleExpression" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.JSONMappingParameters"
 [:map
  {:closed :true}
  ["RecordRowPath" {:optional true} [:ref "String"]]],
 "AWS::DMS::Endpoint.KinesisSettings"
 [:map
  {:closed :true}
  ["MessageFormat" {:optional true} [:ref "String"]]
  ["StreamArn" {:optional true} [:ref "String"]]
  ["ServiceAccessRoleArn" {:optional true} [:ref "String"]]],
 "AWS::EC2::SpotFleet.InstanceIpv6Address"
 [:map
  {:closed :true}
  ["Ipv6Address" {:optional true} [:ref "String"]]],
 "AWS::CloudWatch::AnomalyDetector.Configuration"
 [:map
  {:closed :true}
  ["MetricTimeZone" {:optional true} [:ref "String"]]
  ["ExcludedTimeRanges"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CloudWatch::AnomalyDetector.Range"]]
    "Fn::If"]]],
 "AWS::LakeFormation::Resource"
 [:map
  ["Type" [:= "AWS::LakeFormation::Resource"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResourceArn" {:optional true} [:ref "String"]]
    ["UseServiceLinkedRole" {:optional true} [:ref "Boolean"]]
    ["RoleArn" {:optional true} [:ref "String"]]]]],
 "AWS::ServiceCatalog::Portfolio"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::Portfolio"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ProviderName" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["DisplayName" {:optional true} [:ref "String"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Greengrass::FunctionDefinitionVersion.ResourceAccessPolicy"
 [:map
  {:closed :true}
  ["ResourceId" {:optional true} [:ref "String"]]
  ["Permission" {:optional true} [:ref "String"]]],
 "AWS::IAM::AccessKey"
 [:map
  ["Type" [:= "AWS::IAM::AccessKey"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Serial" {:optional true} [:ref "Integer"]]
    ["Status" {:optional true} [:ref "String"]]
    ["UserName" {:optional true} [:ref "String"]]]]],
 "AWS::FSx::FileSystem.WindowsConfiguration"
 [:map
  {:closed :true}
  ["SelfManagedActiveDirectoryConfiguration"
   {:optional true}
   [:ref
    "AWS::FSx::FileSystem.SelfManagedActiveDirectoryConfiguration"]]
  ["AutomaticBackupRetentionDays" {:optional true} [:ref "Integer"]]
  ["PreferredSubnetId" {:optional true} [:ref "String"]]
  ["DeploymentType" {:optional true} [:ref "String"]]
  ["ThroughputCapacity" {:optional true} [:ref "Integer"]]
  ["DailyAutomaticBackupStartTime" {:optional true} [:ref "String"]]
  ["WeeklyMaintenanceStartTime" {:optional true} [:ref "String"]]
  ["CopyTagsToBackups" {:optional true} [:ref "Boolean"]]
  ["ActiveDirectoryId" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.MetricDimension"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::EC2::GatewayRouteTableAssociation"
 [:map
  ["Type" [:= "AWS::EC2::GatewayRouteTableAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RouteTableId" {:optional true} [:ref "String"]]
    ["GatewayId" {:optional true} [:ref "String"]]]]],
 "AWS::ECS::CapacityProvider.AutoScalingGroupProvider"
 [:map
  {:closed :true}
  ["AutoScalingGroupArn" {:optional true} [:ref "String"]]
  ["ManagedScaling"
   {:optional true}
   [:ref "AWS::ECS::CapacityProvider.ManagedScaling"]]
  ["ManagedTerminationProtection" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.RedshiftRetryOptions"
 [:map
  {:closed :true}
  ["DurationInSeconds" {:optional true} [:ref "Integer"]]],
 "AWS::PinpointEmail::ConfigurationSetEventDestination.DimensionConfiguration"
 [:map
  {:closed :true}
  ["DimensionValueSource" {:optional true} [:ref "String"]]
  ["DefaultDimensionValue" {:optional true} [:ref "String"]]
  ["DimensionName" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.EmbeddedDestinationSettings"
 [:map {:closed :true}],
 "AWS::IoTAnalytics::Dataset.DatasetContentVersionValue"
 [:map
  {:closed :true}
  ["DatasetName" {:optional true} [:ref "String"]]],
 "AWS::SSM::MaintenanceWindowTask.MaintenanceWindowAutomationParameters"
 [:map
  {:closed :true}
  ["Parameters" {:optional true} [:ref "Json"]]
  ["DocumentVersion" {:optional true} [:ref "String"]]],
 "AWS::CodeDeploy::DeploymentGroup.Deployment"
 [:map
  {:closed :true}
  ["Description" {:optional true} [:ref "String"]]
  ["IgnoreApplicationStopFailures" {:optional true} [:ref "Boolean"]]
  ["Revision"
   {:optional true}
   [:ref "AWS::CodeDeploy::DeploymentGroup.RevisionLocation"]]],
 "AWS::Cognito::UserPool.AccountRecoverySetting"
 [:map
  {:closed :true}
  ["RecoveryMechanisms"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Cognito::UserPool.RecoveryOption"]]
    "Fn::If"]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayClientPolicyTls"
 [:map
  {:closed :true}
  ["Validation"
   {:optional true}
   [:ref
    "AWS::AppMesh::VirtualGateway.VirtualGatewayTlsValidationContext"]]
  ["Enforce" {:optional true} [:ref "Boolean"]]
  ["Ports" {:optional true} [:ref "IntegerList"]]],
 "AWS::Greengrass::FunctionDefinition"
 [:map
  ["Type" [:= "AWS::Greengrass::FunctionDefinition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InitialVersion"
     {:optional true}
     [:ref
      "AWS::Greengrass::FunctionDefinition.FunctionDefinitionVersion"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::CloudFront::RealtimeLogConfig.KinesisStreamConfig"
 [:map
  {:closed :true}
  ["RoleArn" {:optional true} [:ref "String"]]
  ["StreamArn" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinition.GroupOwnerSetting"
 [:map
  {:closed :true}
  ["AutoAddGroupOwner" {:optional true} [:ref "Boolean"]]
  ["GroupOwner" {:optional true} [:ref "String"]]],
 "AWS::EventSchemas::Registry"
 [:map
  ["Type" [:= "AWS::EventSchemas::Registry"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["RegistryName" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EventSchemas::Registry.TagsEntry"]]
      "Fn::If"]]]]],
 "AWS::ECS::TaskSet.AwsVpcConfiguration"
 [:map
  {:closed :true}
  ["AssignPublicIp" {:optional true} [:ref "String"]]
  ["SecurityGroups" {:optional true} [:ref "StringList"]]
  ["Subnets" {:optional true} [:ref "StringList"]]],
 "AWS::WAFv2::WebACL.OrStatementOne"
 [:map
  {:closed :true}
  ["Statements"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.StatementTwo"]]
    "Fn::If"]]],
 "AWS::IAM::Group.Policy"
 [:map
  {:closed :true}
  ["PolicyDocument" {:optional true} [:ref "Json"]]
  ["PolicyName" {:optional true} [:ref "String"]]],
 "AWS::Cassandra::Table.ClusteringKeyColumn"
 [:map
  {:closed :true}
  ["Column" {:optional true} [:ref "AWS::Cassandra::Table.Column"]]
  ["OrderBy" {:optional true} [:ref "String"]]],
 "AWS::CodeBuild::Project.Environment"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["EnvironmentVariables"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CodeBuild::Project.EnvironmentVariable"]]
    "Fn::If"]]
  ["PrivilegedMode" {:optional true} [:ref "Boolean"]]
  ["ImagePullCredentialsType" {:optional true} [:ref "String"]]
  ["Image" {:optional true} [:ref "String"]]
  ["RegistryCredential"
   {:optional true}
   [:ref "AWS::CodeBuild::Project.RegistryCredential"]]
  ["ComputeType" {:optional true} [:ref "String"]]
  ["Certificate" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.TagFilter"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::EMR::InstanceGroupConfig.ScalingConstraints"
 [:map
  {:closed :true}
  ["MaxCapacity" {:optional true} [:ref "Integer"]]
  ["MinCapacity" {:optional true} [:ref "Integer"]]],
 "AWS::EMR::Step.HadoopJarStepConfig"
 [:map
  {:closed :true}
  ["Args" {:optional true} [:ref "StringList"]]
  ["Jar" {:optional true} [:ref "String"]]
  ["MainClass" {:optional true} [:ref "String"]]
  ["StepProperties"
   {:optional true}
   [:or [:sequential [:ref "AWS::EMR::Step.KeyValue"]] "Fn::If"]]],
 "AWS::KinesisAnalytics::Application.KinesisStreamsInput"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]],
 "AWS::AmazonMQ::Broker.LogList"
 [:map
  {:closed :true}
  ["Audit" {:optional true} [:ref "Boolean"]]
  ["General" {:optional true} [:ref "Boolean"]]],
 "AWS::ElasticLoadBalancing::LoadBalancer.LBCookieStickinessPolicy"
 [:map
  {:closed :true}
  ["CookieExpirationPeriod" {:optional true} [:ref "String"]]
  ["PolicyName" {:optional true} [:ref "String"]]],
 "AWS::EC2::TrafficMirrorSession"
 [:map
  ["Type" [:= "AWS::EC2::TrafficMirrorSession"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TrafficMirrorTargetId" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["SessionNumber" {:optional true} [:ref "Integer"]]
    ["VirtualNetworkId" {:optional true} [:ref "Integer"]]
    ["PacketLength" {:optional true} [:ref "Integer"]]
    ["NetworkInterfaceId" {:optional true} [:ref "String"]]
    ["TrafficMirrorFilterId" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::KinesisAnalytics::Application.RecordColumn"
 [:map
  {:closed :true}
  ["Mapping" {:optional true} [:ref "String"]]
  ["SqlType" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::IoT::TopicRule.SqsAction"
 [:map
  {:closed :true}
  ["QueueUrl" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["UseBase64" {:optional true} [:ref "Boolean"]]],
 "AWS::CodeBuild::Project.BatchRestrictions"
 [:map
  {:closed :true}
  ["ComputeTypesAllowed" {:optional true} [:ref "StringList"]]
  ["MaximumBuildsAllowed" {:optional true} [:ref "Integer"]]],
 "AWS::EC2::ClientVpnRoute"
 [:map
  ["Type" [:= "AWS::EC2::ClientVpnRoute"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ClientVpnEndpointId" {:optional true} [:ref "String"]]
    ["TargetVpcSubnetId" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["DestinationCidrBlock" {:optional true} [:ref "String"]]]]],
 "AWS::WAFv2::RuleGroup.GeoMatchStatement"
 [:map
  {:closed :true}
  ["CountryCodes" {:optional true} [:ref "StringList"]]
  ["ForwardedIPConfig"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.ForwardedIPConfiguration"]]],
 "AWS::KinesisAnalyticsV2::Application.CodeContent"
 [:map
  {:closed :true}
  ["ZipFileContent" {:optional true} [:ref "String"]]
  ["S3ContentLocation"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::Application.S3ContentLocation"]]
  ["TextContent" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::Stage.AccessLogSetting"
 [:map
  {:closed :true}
  ["DestinationArn" {:optional true} [:ref "String"]]
  ["Format" {:optional true} [:ref "String"]]],
 "AWS::ElastiCache::SubnetGroup"
 [:map
  ["Type" [:= "AWS::ElastiCache::SubnetGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CacheSubnetGroupName" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]]]],
 "AWS::EC2::LaunchTemplate.LaunchTemplateData"
 [:map
  {:closed :true}
  ["InstanceMarketOptions"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.InstanceMarketOptions"]]
  ["ElasticInferenceAccelerators"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::EC2::LaunchTemplate.LaunchTemplateElasticInferenceAccelerator"]]
    "Fn::If"]]
  ["MetadataOptions"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.MetadataOptions"]]
  ["ImageId" {:optional true} [:ref "String"]]
  ["UserData" {:optional true} [:ref "String"]]
  ["HibernationOptions"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.HibernationOptions"]]
  ["CreditSpecification"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.CreditSpecification"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["ElasticGpuSpecifications"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::EC2::LaunchTemplate.ElasticGpuSpecification"]]
    "Fn::If"]]
  ["LicenseSpecifications"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::EC2::LaunchTemplate.LicenseSpecification"]]
    "Fn::If"]]
  ["EbsOptimized" {:optional true} [:ref "Boolean"]]
  ["Placement"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.Placement"]]
  ["KernelId" {:optional true} [:ref "String"]]
  ["CpuOptions"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.CpuOptions"]]
  ["KeyName" {:optional true} [:ref "String"]]
  ["SecurityGroups" {:optional true} [:ref "StringList"]]
  ["DisableApiTermination" {:optional true} [:ref "Boolean"]]
  ["InstanceInitiatedShutdownBehavior"
   {:optional true}
   [:ref "String"]]
  ["TagSpecifications"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::LaunchTemplate.TagSpecification"]]
    "Fn::If"]]
  ["IamInstanceProfile"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.IamInstanceProfile"]]
  ["BlockDeviceMappings"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::LaunchTemplate.BlockDeviceMapping"]]
    "Fn::If"]]
  ["RamDiskId" {:optional true} [:ref "String"]]
  ["Monitoring"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.Monitoring"]]
  ["CapacityReservationSpecification"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.CapacityReservationSpecification"]]
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
  ["NetworkInterfaces"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::LaunchTemplate.NetworkInterface"]]
    "Fn::If"]]],
 "AWS::SSO::PermissionSet"
 [:map
  ["Type" [:= "AWS::SSO::PermissionSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["InstanceArn" {:optional true} [:ref "String"]]
    ["SessionDuration" {:optional true} [:ref "String"]]
    ["RelayStateType" {:optional true} [:ref "String"]]
    ["ManagedPolicies" {:optional true} [:ref "StringList"]]
    ["InlinePolicy" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::IoTEvents::Input"
 [:map
  ["Type" [:= "AWS::IoTEvents::Input"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InputDefinition"
     {:optional true}
     [:ref "AWS::IoTEvents::Input.InputDefinition"]]
    ["InputName" {:optional true} [:ref "String"]]
    ["InputDescription" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::AppSync::GraphQLApi.AdditionalAuthenticationProvider"
 [:map
  {:closed :true}
  ["OpenIDConnectConfig"
   {:optional true}
   [:ref "AWS::AppSync::GraphQLApi.OpenIDConnectConfig"]]
  ["UserPoolConfig"
   {:optional true}
   [:ref "AWS::AppSync::GraphQLApi.CognitoUserPoolConfig"]]
  ["AuthenticationType" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::MonitoringSchedule.ClusterConfig"
 [:map
  {:closed :true}
  ["InstanceCount" {:optional true} [:ref "Integer"]]
  ["InstanceType" {:optional true} [:ref "String"]]
  ["VolumeKmsKeyId" {:optional true} [:ref "String"]]
  ["VolumeSizeInGB" {:optional true} [:ref "Integer"]]],
 "AWS::MediaLive::Channel.H264ColorSpaceSettings"
 [:map
  {:closed :true}
  ["Rec601Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Rec601Settings"]]
  ["Rec709Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Rec709Settings"]]
  ["ColorSpacePassthroughSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.ColorSpacePassthroughSettings"]]],
 "AWS::ElasticLoadBalancingV2::LoadBalancer.LoadBalancerAttribute"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::Model"
 [:map
  ["Type" [:= "AWS::SageMaker::Model"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ExecutionRoleArn" {:optional true} [:ref "String"]]
    ["EnableNetworkIsolation" {:optional true} [:ref "Boolean"]]
    ["PrimaryContainer"
     {:optional true}
     [:ref "AWS::SageMaker::Model.ContainerDefinition"]]
    ["ModelName" {:optional true} [:ref "String"]]
    ["VpcConfig"
     {:optional true}
     [:ref "AWS::SageMaker::Model.VpcConfig"]]
    ["Containers"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::SageMaker::Model.ContainerDefinition"]]
      "Fn::If"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::KMS::Alias"
 [:map
  ["Type" [:= "AWS::KMS::Alias"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AliasName" {:optional true} [:ref "String"]]
    ["TargetKeyId" {:optional true} [:ref "String"]]]]],
 "AWS::S3::Bucket.RedirectRule"
 [:map
  {:closed :true}
  ["HostName" {:optional true} [:ref "String"]]
  ["HttpRedirectCode" {:optional true} [:ref "String"]]
  ["Protocol" {:optional true} [:ref "String"]]
  ["ReplaceKeyPrefixWith" {:optional true} [:ref "String"]]
  ["ReplaceKeyWith" {:optional true} [:ref "String"]]],
 "AWS::ApiGatewayV2::Model"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::Model"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["ContentType" {:optional true} [:ref "String"]]
    ["Schema" {:optional true} [:ref "Json"]]
    ["ApiId" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::OpsWorks::Stack.ChefConfiguration"
 [:map
  {:closed :true}
  ["BerkshelfVersion" {:optional true} [:ref "String"]]
  ["ManageBerkshelf" {:optional true} [:ref "Boolean"]]],
 "AWS::ApplicationInsights::Application.Alarm"
 [:map
  {:closed :true}
  ["AlarmName" {:optional true} [:ref "String"]]
  ["Severity" {:optional true} [:ref "String"]]],
 "AWS::IoT::Certificate"
 [:map
  ["Type" [:= "AWS::IoT::Certificate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CACertificatePem" {:optional true} [:ref "String"]]
    ["CertificatePem" {:optional true} [:ref "String"]]
    ["CertificateSigningRequest" {:optional true} [:ref "String"]]
    ["CertificateMode" {:optional true} [:ref "String"]]
    ["Status" {:optional true} [:ref "String"]]]]],
 "AWS::EFS::MountTarget"
 [:map
  ["Type" [:= "AWS::EFS::MountTarget"]]
  ["Properties"
   [:map
    {:closed :true}
    ["FileSystemId" {:optional true} [:ref "String"]]
    ["IpAddress" {:optional true} [:ref "String"]]
    ["SecurityGroups" {:optional true} [:ref "StringList"]]
    ["SubnetId" {:optional true} [:ref "String"]]]]],
 "AWS::Events::Rule"
 [:map
  ["Type" [:= "AWS::Events::Rule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["EventBusName" {:optional true} [:ref "String"]]
    ["EventPattern" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["ScheduleExpression" {:optional true} [:ref "String"]]
    ["State" {:optional true} [:ref "String"]]
    ["Targets"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Events::Rule.Target"]]
      "Fn::If"]]]]],
 "AWS::MediaLive::Channel.TtmlDestinationSettings"
 [:map
  {:closed :true}
  ["StyleControl" {:optional true} [:ref "String"]]],
 "AWS::Events::Rule.AwsVpcConfiguration"
 [:map
  {:closed :true}
  ["AssignPublicIp" {:optional true} [:ref "String"]]
  ["SecurityGroups" {:optional true} [:ref "StringList"]]
  ["Subnets" {:optional true} [:ref "StringList"]]],
 "AWS::Events::Rule.BatchParameters"
 [:map
  {:closed :true}
  ["ArrayProperties"
   {:optional true}
   [:ref "AWS::Events::Rule.BatchArrayProperties"]]
  ["JobDefinition" {:optional true} [:ref "String"]]
  ["JobName" {:optional true} [:ref "String"]]
  ["RetryStrategy"
   {:optional true}
   [:ref "AWS::Events::Rule.BatchRetryStrategy"]]],
 "AWS::Backup::BackupPlan.LifecycleResourceType"
 [:map
  {:closed :true}
  ["DeleteAfterDays" {:optional true} [:ref "Double"]]
  ["MoveToColdStorageAfterDays" {:optional true} [:ref "Double"]]],
 "AWS::EC2::SpotFleet.EbsBlockDevice"
 [:map
  {:closed :true}
  ["DeleteOnTermination" {:optional true} [:ref "Boolean"]]
  ["Encrypted" {:optional true} [:ref "Boolean"]]
  ["Iops" {:optional true} [:ref "Integer"]]
  ["SnapshotId" {:optional true} [:ref "String"]]
  ["VolumeSize" {:optional true} [:ref "Integer"]]
  ["VolumeType" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualService.VirtualNodeServiceProvider"
 [:map
  {:closed :true}
  ["VirtualNodeName" {:optional true} [:ref "String"]]],
 "AWS::WAF::XssMatchSet"
 [:map
  ["Type" [:= "AWS::WAF::XssMatchSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["XssMatchTuples"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::WAF::XssMatchSet.XssMatchTuple"]]
      "Fn::If"]]]]],
 "AWS::MediaLive::Channel.ArchiveGroupSettings"
 [:map
  {:closed :true}
  ["Destination"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.OutputLocationRef"]]
  ["RolloverInterval" {:optional true} [:ref "Integer"]]],
 "AWS::MediaLive::Channel.AudioPidSelection"
 [:map {:closed :true} ["Pid" {:optional true} [:ref "Integer"]]],
 "AWS::MediaLive::Channel.FecOutputSettings"
 [:map
  {:closed :true}
  ["RowLength" {:optional true} [:ref "Integer"]]
  ["ColumnDepth" {:optional true} [:ref "Integer"]]
  ["IncludeFec" {:optional true} [:ref "String"]]],
 "AWS::CodeGuruProfiler::ProfilingGroup"
 [:map
  ["Type" [:= "AWS::CodeGuruProfiler::ProfilingGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ProfilingGroupName" {:optional true} [:ref "String"]]
    ["ComputePlatform" {:optional true} [:ref "String"]]
    ["AgentPermissions" {:optional true} [:ref "Json"]]
    ["AnomalyDetectionNotificationConfiguration"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodeGuruProfiler::ProfilingGroup.Channel"]]
      "Fn::If"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::CloudFront::StreamingDistribution.Logging"
 [:map
  {:closed :true}
  ["Bucket" {:optional true} [:ref "String"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["Prefix" {:optional true} [:ref "String"]]],
 "AWS::EC2::NetworkInterface.InstanceIpv6Address"
 [:map
  {:closed :true}
  ["Ipv6Address" {:optional true} [:ref "String"]]],
 "AWS::Macie::CustomDataIdentifier"
 [:map
  ["Type" [:= "AWS::Macie::CustomDataIdentifier"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Regex" {:optional true} [:ref "String"]]
    ["MaximumMatchDistance" {:optional true} [:ref "Integer"]]
    ["Keywords" {:optional true} [:ref "StringList"]]
    ["IgnoreWords" {:optional true} [:ref "StringList"]]]]],
 "AWS::EC2::TransitGatewayRouteTable"
 [:map
  ["Type" [:= "AWS::EC2::TransitGatewayRouteTable"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TransitGatewayId" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::ECS::TaskDefinition.EnvironmentFile"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::MonitoringSchedule.EndpointInput"
 [:map
  {:closed :true}
  ["EndpointName" {:optional true} [:ref "String"]]
  ["LocalPath" {:optional true} [:ref "String"]]
  ["S3DataDistributionType" {:optional true} [:ref "String"]]
  ["S3InputMode" {:optional true} [:ref "String"]]],
 "AWS::CodeDeploy::DeploymentGroup.ELBInfo"
 [:map {:closed :true} ["Name" {:optional true} [:ref "String"]]],
 "AWS::CertificateManager::Certificate.DomainValidationOption"
 [:map
  {:closed :true}
  ["DomainName" {:optional true} [:ref "String"]]
  ["HostedZoneId" {:optional true} [:ref "String"]]
  ["ValidationDomain" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::EndpointConfig"
 [:map
  ["Type" [:= "AWS::SageMaker::EndpointConfig"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DataCaptureConfig"
     {:optional true}
     [:ref "AWS::SageMaker::EndpointConfig.DataCaptureConfig"]]
    ["ProductionVariants"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::SageMaker::EndpointConfig.ProductionVariant"]]
      "Fn::If"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["EndpointConfigName" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EC2::LaunchTemplate.Ipv6Add"
 [:map
  {:closed :true}
  ["Ipv6Address" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::CloudFrontOriginAccessIdentity.CloudFrontOriginAccessIdentityConfig"
 [:map {:closed :true} ["Comment" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.OutputDestinationSettings"
 [:map
  {:closed :true}
  ["StreamName" {:optional true} [:ref "String"]]
  ["Username" {:optional true} [:ref "String"]]
  ["PasswordParam" {:optional true} [:ref "String"]]
  ["Url" {:optional true} [:ref "String"]]],
 "AWS::ElastiCache::SecurityGroupIngress"
 [:map
  ["Type" [:= "AWS::ElastiCache::SecurityGroupIngress"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CacheSecurityGroupName" {:optional true} [:ref "String"]]
    ["EC2SecurityGroupName" {:optional true} [:ref "String"]]
    ["EC2SecurityGroupOwnerId" {:optional true} [:ref "String"]]]]],
 "AWS::CodeBuild::Project.Artifacts"
 [:map
  {:closed :true}
  ["Path" {:optional true} [:ref "String"]]
  ["NamespaceType" {:optional true} [:ref "String"]]
  ["ArtifactIdentifier" {:optional true} [:ref "String"]]
  ["OverrideArtifactName" {:optional true} [:ref "Boolean"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["EncryptionDisabled" {:optional true} [:ref "Boolean"]]
  ["Location" {:optional true} [:ref "String"]]
  ["Packaging" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.ContainerDependency"
 [:map
  {:closed :true}
  ["ContainerName" {:optional true} [:ref "String"]]
  ["Condition" {:optional true} [:ref "String"]]],
 "AWS::ServiceDiscovery::Service.DnsConfig"
 [:map
  {:closed :true}
  ["DnsRecords"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ServiceDiscovery::Service.DnsRecord"]]
    "Fn::If"]]
  ["RoutingPolicy" {:optional true} [:ref "String"]]
  ["NamespaceId" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.MultiplexProgramChannelDestinationSettings"
 [:map
  {:closed :true}
  ["MultiplexId" {:optional true} [:ref "String"]]
  ["ProgramName" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Campaign.QuietTime"
 [:map
  {:closed :true}
  ["Start" {:optional true} [:ref "String"]]
  ["End" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.SqlConfiguration"
 [:map
  {:closed :true}
  ["QueryIdentifiersEnclosingOption"
   {:optional true}
   [:ref "String"]]],
 "AWS::ResourceGroups::Group"
 [:map
  ["Type" [:= "AWS::ResourceGroups::Group"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["ResourceQuery"
     {:optional true}
     [:ref "AWS::ResourceGroups::Group.ResourceQuery"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Route53Resolver::ResolverEndpoint.IpAddressRequest"
 [:map
  {:closed :true}
  ["Ip" {:optional true} [:ref "String"]]
  ["SubnetId" {:optional true} [:ref "String"]]],
 "AWS::Glue::Crawler.S3Target"
 [:map
  {:closed :true}
  ["Path" {:optional true} [:ref "String"]]
  ["Exclusions" {:optional true} [:ref "StringList"]]],
 "AWS::EventSchemas::Schema"
 [:map
  ["Type" [:= "AWS::EventSchemas::Schema"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Type" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Content" {:optional true} [:ref "String"]]
    ["RegistryName" {:optional true} [:ref "String"]]
    ["SchemaName" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EventSchemas::Schema.TagsEntry"]]
      "Fn::If"]]]]],
 "AWS::S3::Bucket.LifecycleConfiguration"
 [:map
  {:closed :true}
  ["Rules"
   {:optional true}
   [:or [:sequential [:ref "AWS::S3::Bucket.Rule"]] "Fn::If"]]],
 "AWS::ImageBuilder::ImageRecipe"
 [:map
  ["Type" [:= "AWS::ImageBuilder::ImageRecipe"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Version" {:optional true} [:ref "String"]]
    ["Components"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ImageBuilder::ImageRecipe.ComponentConfiguration"]]
      "Fn::If"]]
    ["BlockDeviceMappings"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ImageBuilder::ImageRecipe.InstanceBlockDeviceMapping"]]
      "Fn::If"]]
    ["ParentImage" {:optional true} [:ref "String"]]
    ["WorkingDirectory" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "StringMap"]]]]],
 "AWS::Kendra::Index.Search"
 [:map
  {:closed :true}
  ["Facetable" {:optional true} [:ref "Boolean"]]
  ["Searchable" {:optional true} [:ref "Boolean"]]
  ["Displayable" {:optional true} [:ref "Boolean"]]
  ["Sortable" {:optional true} [:ref "Boolean"]]],
 "AWS::RDS::DBClusterParameterGroup"
 [:map
  ["Type" [:= "AWS::RDS::DBClusterParameterGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Family" {:optional true} [:ref "String"]]
    ["Parameters" {:optional true} [:ref "Json"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::MediaLive::Channel.MediaPackageOutputDestinationSettings"
 [:map {:closed :true} ["ChannelId" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.SizeConstraintStatement"
 [:map
  {:closed :true}
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.FieldToMatch"]]
  ["ComparisonOperator" {:optional true} [:ref "String"]]
  ["Size" {:optional true} [:ref "Integer"]]
  ["TextTransformations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::RuleGroup.TextTransformation"]]
    "Fn::If"]]],
 "AWS::ElasticLoadBalancingV2::TargetGroup"
 [:map
  ["Type" [:= "AWS::ElasticLoadBalancingV2::TargetGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Port" {:optional true} [:ref "Integer"]]
    ["TargetGroupAttributes"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ElasticLoadBalancingV2::TargetGroup.TargetGroupAttribute"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["HealthCheckPath" {:optional true} [:ref "String"]]
    ["TargetType" {:optional true} [:ref "String"]]
    ["Targets"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ElasticLoadBalancingV2::TargetGroup.TargetDescription"]]
      "Fn::If"]]
    ["UnhealthyThresholdCount" {:optional true} [:ref "Integer"]]
    ["HealthCheckPort" {:optional true} [:ref "String"]]
    ["HealthCheckTimeoutSeconds" {:optional true} [:ref "Integer"]]
    ["Name" {:optional true} [:ref "String"]]
    ["HealthyThresholdCount" {:optional true} [:ref "Integer"]]
    ["Protocol" {:optional true} [:ref "String"]]
    ["Matcher"
     {:optional true}
     [:ref "AWS::ElasticLoadBalancingV2::TargetGroup.Matcher"]]
    ["HealthCheckProtocol" {:optional true} [:ref "String"]]
    ["HealthCheckIntervalSeconds" {:optional true} [:ref "Integer"]]
    ["HealthCheckEnabled" {:optional true} [:ref "Boolean"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayAccessLog"
 [:map
  {:closed :true}
  ["File"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualGateway.VirtualGatewayFileAccessLog"]]],
 "AWS::OpsWorks::Layer.Recipes"
 [:map
  {:closed :true}
  ["Configure" {:optional true} [:ref "StringList"]]
  ["Deploy" {:optional true} [:ref "StringList"]]
  ["Setup" {:optional true} [:ref "StringList"]]
  ["Shutdown" {:optional true} [:ref "StringList"]]
  ["Undeploy" {:optional true} [:ref "StringList"]]],
 "AWS::SageMaker::MonitoringSchedule.MonitoringScheduleConfig"
 [:map
  {:closed :true}
  ["MonitoringJobDefinition"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.MonitoringJobDefinition"]]
  ["ScheduleConfig"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.ScheduleConfig"]]],
 "AWS::Elasticsearch::Domain"
 [:map
  ["Type" [:= "AWS::Elasticsearch::Domain"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DomainName" {:optional true} [:ref "String"]]
    ["ElasticsearchClusterConfig"
     {:optional true}
     [:ref "AWS::Elasticsearch::Domain.ElasticsearchClusterConfig"]]
    ["AdvancedOptions" {:optional true} [:ref "StringMap"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ElasticsearchVersion" {:optional true} [:ref "String"]]
    ["EBSOptions"
     {:optional true}
     [:ref "AWS::Elasticsearch::Domain.EBSOptions"]]
    ["NodeToNodeEncryptionOptions"
     {:optional true}
     [:ref "AWS::Elasticsearch::Domain.NodeToNodeEncryptionOptions"]]
    ["EncryptionAtRestOptions"
     {:optional true}
     [:ref "AWS::Elasticsearch::Domain.EncryptionAtRestOptions"]]
    ["AdvancedSecurityOptions"
     {:optional true}
     [:ref "AWS::Elasticsearch::Domain.AdvancedSecurityOptionsInput"]]
    ["AccessPolicies" {:optional true} [:ref "Json"]]
    ["VPCOptions"
     {:optional true}
     [:ref "AWS::Elasticsearch::Domain.VPCOptions"]]
    ["DomainEndpointOptions"
     {:optional true}
     [:ref "AWS::Elasticsearch::Domain.DomainEndpointOptions"]]
    ["SnapshotOptions"
     {:optional true}
     [:ref "AWS::Elasticsearch::Domain.SnapshotOptions"]]
    ["CognitoOptions"
     {:optional true}
     [:ref "AWS::Elasticsearch::Domain.CognitoOptions"]]
    ["LogPublishingOptions"
     {:optional true}
     [:map-of [:ref "String"] [:ref "LogPublishingOption"]]]]]],
 "AWS::S3::Bucket.WebsiteConfiguration"
 [:map
  {:closed :true}
  ["ErrorDocument" {:optional true} [:ref "String"]]
  ["IndexDocument" {:optional true} [:ref "String"]]
  ["RedirectAllRequestsTo"
   {:optional true}
   [:ref "AWS::S3::Bucket.RedirectAllRequestsTo"]]
  ["RoutingRules"
   {:optional true}
   [:or [:sequential [:ref "AWS::S3::Bucket.RoutingRule"]] "Fn::If"]]],
 "AWS::ApiGatewayV2::Deployment"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::Deployment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["StageName" {:optional true} [:ref "String"]]
    ["ApiId" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::Route.GrpcRouteMetadataMatchMethod"
 [:map
  {:closed :true}
  ["Suffix" {:optional true} [:ref "String"]]
  ["Regex" {:optional true} [:ref "String"]]
  ["Exact" {:optional true} [:ref "String"]]
  ["Prefix" {:optional true} [:ref "String"]]
  ["Range" {:optional true} [:ref "AWS::AppMesh::Route.MatchRange"]]],
 "AWS::SES::ConfigurationSetEventDestination"
 [:map
  ["Type" [:= "AWS::SES::ConfigurationSetEventDestination"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ConfigurationSetName" {:optional true} [:ref "String"]]
    ["EventDestination"
     {:optional true}
     [:ref
      "AWS::SES::ConfigurationSetEventDestination.EventDestination"]]]]],
 "AWS::CloudFront::OriginRequestPolicy.OriginRequestPolicyConfig"
 [:map
  {:closed :true}
  ["Comment" {:optional true} [:ref "String"]]
  ["CookiesConfig"
   {:optional true}
   [:ref "AWS::CloudFront::OriginRequestPolicy.CookiesConfig"]]
  ["HeadersConfig"
   {:optional true}
   [:ref "AWS::CloudFront::OriginRequestPolicy.HeadersConfig"]]
  ["Name" {:optional true} [:ref "String"]]
  ["QueryStringsConfig"
   {:optional true}
   [:ref "AWS::CloudFront::OriginRequestPolicy.QueryStringsConfig"]]],
 "AWS::S3::Bucket.ReplicationRuleFilter"
 [:map
  {:closed :true}
  ["And"
   {:optional true}
   [:ref "AWS::S3::Bucket.ReplicationRuleAndOperator"]]
  ["Prefix" {:optional true} [:ref "String"]]
  ["TagFilter" {:optional true} [:ref "AWS::S3::Bucket.TagFilter"]]],
 "AWS::DynamoDB::Table.TimeToLiveSpecification"
 [:map
  {:closed :true}
  ["AttributeName" {:optional true} [:ref "String"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.SourceIpConfig"
 [:map
  {:closed :true}
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::MSK::Cluster.Sasl"
 [:map
  {:closed :true}
  ["Scram" {:optional true} [:ref "AWS::MSK::Cluster.Scram"]]],
 "AWS::KinesisAnalytics::Application.MappingParameters"
 [:map
  {:closed :true}
  ["JSONMappingParameters"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::Application.JSONMappingParameters"]]
  ["CSVMappingParameters"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::Application.CSVMappingParameters"]]],
 "AWS::IoT::TopicRule.CloudwatchMetricAction"
 [:map
  {:closed :true}
  ["MetricName" {:optional true} [:ref "String"]]
  ["MetricNamespace" {:optional true} [:ref "String"]]
  ["MetricTimestamp" {:optional true} [:ref "String"]]
  ["MetricUnit" {:optional true} [:ref "String"]]
  ["MetricValue" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::GuardDuty::Detector"
 [:map
  ["Type" [:= "AWS::GuardDuty::Detector"]]
  ["Properties"
   [:map
    {:closed :true}
    ["FindingPublishingFrequency" {:optional true} [:ref "String"]]
    ["DataSources"
     {:optional true}
     [:ref "AWS::GuardDuty::Detector.CFNDataSourceConfigurations"]]
    ["Enable" {:optional true} [:ref "Boolean"]]]]],
 "AWS::EC2::SecurityGroup.Ingress"
 [:map
  {:closed :true}
  ["SourceSecurityGroupOwnerId" {:optional true} [:ref "String"]]
  ["CidrIpv6" {:optional true} [:ref "String"]]
  ["IpProtocol" {:optional true} [:ref "String"]]
  ["CidrIp" {:optional true} [:ref "String"]]
  ["ToPort" {:optional true} [:ref "Integer"]]
  ["SourceSecurityGroupName" {:optional true} [:ref "String"]]
  ["SourceSecurityGroupId" {:optional true} [:ref "String"]]
  ["SourcePrefixListId" {:optional true} [:ref "String"]]
  ["Description" {:optional true} [:ref "String"]]
  ["FromPort" {:optional true} [:ref "Integer"]]],
 "AWS::SSM::MaintenanceWindowTask.MaintenanceWindowStepFunctionsParameters"
 [:map
  {:closed :true}
  ["Input" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::DataPipeline::Pipeline.ParameterObject"
 [:map
  {:closed :true}
  ["Attributes"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::DataPipeline::Pipeline.ParameterAttribute"]]
    "Fn::If"]]
  ["Id" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.DockerVolumeConfiguration"
 [:map
  {:closed :true}
  ["Autoprovision" {:optional true} [:ref "Boolean"]]
  ["Driver" {:optional true} [:ref "String"]]
  ["DriverOpts" {:optional true} [:ref "StringMap"]]
  ["Labels" {:optional true} [:ref "StringMap"]]
  ["Scope" {:optional true} [:ref "String"]]],
 "AWS::IoT1Click::Device"
 [:map
  ["Type" [:= "AWS::IoT1Click::Device"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DeviceId" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]]]],
 "AWS::RDS::DBProxyTargetGroup"
 [:map
  ["Type" [:= "AWS::RDS::DBProxyTargetGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DBProxyName" {:optional true} [:ref "String"]]
    ["TargetGroupName" {:optional true} [:ref "String"]]
    ["ConnectionPoolConfigurationInfo"
     {:optional true}
     [:ref
      "AWS::RDS::DBProxyTargetGroup.ConnectionPoolConfigurationInfoFormat"]]
    ["DBInstanceIdentifiers" {:optional true} [:ref "StringList"]]
    ["DBClusterIdentifiers" {:optional true} [:ref "StringList"]]]]],
 "AWS::MediaLive::Channel.OutputGroupSettings"
 [:map
  {:closed :true}
  ["HlsGroupSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.HlsGroupSettings"]]
  ["FrameCaptureGroupSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.FrameCaptureGroupSettings"]]
  ["MultiplexGroupSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.MultiplexGroupSettings"]]
  ["ArchiveGroupSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.ArchiveGroupSettings"]]
  ["MediaPackageGroupSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.MediaPackageGroupSettings"]]
  ["UdpGroupSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.UdpGroupSettings"]]
  ["MsSmoothGroupSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.MsSmoothGroupSettings"]]
  ["RtmpGroupSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.RtmpGroupSettings"]]],
 "AWS::Glue::Job.NotificationProperty"
 [:map
  {:closed :true}
  ["NotifyDelayAfter" {:optional true} [:ref "Integer"]]],
 "AWS::ApiGateway::UsagePlanKey"
 [:map
  ["Type" [:= "AWS::ApiGateway::UsagePlanKey"]]
  ["Properties"
   [:map
    {:closed :true}
    ["KeyId" {:optional true} [:ref "String"]]
    ["KeyType" {:optional true} [:ref "String"]]
    ["UsagePlanId" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisFirehose::DeliveryStream.ElasticsearchDestinationConfiguration"
 [:map
  {:closed :true}
  ["IndexRotationPeriod" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]
  ["VpcConfiguration"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.VpcConfiguration"]]
  ["CloudWatchLoggingOptions"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions"]]
  ["TypeName" {:optional true} [:ref "String"]]
  ["DomainARN" {:optional true} [:ref "String"]]
  ["ProcessingConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration"]]
  ["ClusterEndpoint" {:optional true} [:ref "String"]]
  ["RetryOptions"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.ElasticsearchRetryOptions"]]
  ["S3Configuration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration"]]
  ["BufferingHints"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.ElasticsearchBufferingHints"]]
  ["S3BackupMode" {:optional true} [:ref "String"]]
  ["IndexName" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.AudioTrackSelection"
 [:map
  {:closed :true}
  ["Tracks"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::MediaLive::Channel.AudioTrack"]]
    "Fn::If"]]],
 "AWS::Kendra::DataSource.S3DataSourceConfiguration"
 [:map
  {:closed :true}
  ["BucketName" {:optional true} [:ref "String"]]
  ["InclusionPrefixes"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["ExclusionPatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["DocumentsMetadataConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.DocumentsMetadataConfiguration"]]
  ["AccessControlListConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.AccessControlListConfiguration"]]],
 "AWS::Batch::JobDefinition.LinuxParameters"
 [:map
  {:closed :true}
  ["Devices"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Batch::JobDefinition.Device"]]
    "Fn::If"]]],
 "AWS::ServiceCatalog::PortfolioProductAssociation"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::PortfolioProductAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SourcePortfolioId" {:optional true} [:ref "String"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["PortfolioId" {:optional true} [:ref "String"]]
    ["ProductId" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::Instance.NetworkInterface"
 [:map
  {:closed :true}
  ["DeleteOnTermination" {:optional true} [:ref "Boolean"]]
  ["GroupSet" {:optional true} [:ref "StringList"]]
  ["PrivateIpAddress" {:optional true} [:ref "String"]]
  ["PrivateIpAddresses"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::EC2::Instance.PrivateIpAddressSpecification"]]
    "Fn::If"]]
  ["SubnetId" {:optional true} [:ref "String"]]
  ["AssociatePublicIpAddress" {:optional true} [:ref "Boolean"]]
  ["Ipv6AddressCount" {:optional true} [:ref "Integer"]]
  ["Description" {:optional true} [:ref "String"]]
  ["DeviceIndex" {:optional true} [:ref "String"]]
  ["SecondaryPrivateIpAddressCount" {:optional true} [:ref "Integer"]]
  ["Ipv6Addresses"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::Instance.InstanceIpv6Address"]]
    "Fn::If"]]
  ["NetworkInterfaceId" {:optional true} [:ref "String"]]],
 "AWS::MediaStore::Container"
 [:map
  ["Type" [:= "AWS::MediaStore::Container"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Policy" {:optional true} [:ref "String"]]
    ["MetricPolicy"
     {:optional true}
     [:ref "AWS::MediaStore::Container.MetricPolicy"]]
    ["ContainerName" {:optional true} [:ref "String"]]
    ["CorsPolicy"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::MediaStore::Container.CorsRule"]]
      "Fn::If"]]
    ["LifecyclePolicy" {:optional true} [:ref "String"]]
    ["AccessLoggingEnabled" {:optional true} [:ref "Boolean"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Glue::DevEndpoint"
 [:map
  ["Type" [:= "AWS::Glue::DevEndpoint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EndpointName" {:optional true} [:ref "String"]]
    ["NumberOfNodes" {:optional true} [:ref "Integer"]]
    ["NumberOfWorkers" {:optional true} [:ref "Integer"]]
    ["SecurityConfiguration" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Arguments" {:optional true} [:ref "Json"]]
    ["PublicKeys" {:optional true} [:ref "StringList"]]
    ["PublicKey" {:optional true} [:ref "String"]]
    ["WorkerType" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["SubnetId" {:optional true} [:ref "String"]]
    ["ExtraJarsS3Path" {:optional true} [:ref "String"]]
    ["ExtraPythonLibsS3Path" {:optional true} [:ref "String"]]
    ["GlueVersion" {:optional true} [:ref "String"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]]]],
 "AWS::EC2::LaunchTemplate.CapacityReservationSpecification"
 [:map
  {:closed :true}
  ["CapacityReservationPreference" {:optional true} [:ref "String"]]
  ["CapacityReservationTarget"
   {:optional true}
   [:ref "AWS::EC2::LaunchTemplate.CapacityReservationTarget"]]],
 "AWS::MediaLive::Channel.EbuTtDDestinationSettings"
 [:map
  {:closed :true}
  ["FontFamily" {:optional true} [:ref "String"]]
  ["FillLineGap" {:optional true} [:ref "String"]]
  ["StyleControl" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.TaskDefinitionPlacementConstraint"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Expression" {:optional true} [:ref "String"]]],
 "AWS::AppConfig::HostedConfigurationVersion"
 [:map
  ["Type" [:= "AWS::AppConfig::HostedConfigurationVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ConfigurationProfileId" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["ContentType" {:optional true} [:ref "String"]]
    ["LatestVersionNumber" {:optional true} [:ref "Double"]]
    ["Content" {:optional true} [:ref "String"]]
    ["ApplicationId" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisAnalyticsV2::Application.ParallelismConfiguration"
 [:map
  {:closed :true}
  ["ConfigurationType" {:optional true} [:ref "String"]]
  ["ParallelismPerKPU" {:optional true} [:ref "Integer"]]
  ["AutoScalingEnabled" {:optional true} [:ref "Boolean"]]
  ["Parallelism" {:optional true} [:ref "Integer"]]],
 "AWS::EC2::EC2Fleet.FleetLaunchTemplateSpecificationRequest"
 [:map
  {:closed :true}
  ["LaunchTemplateName" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]
  ["LaunchTemplateId" {:optional true} [:ref "String"]]],
 "AWS::SES::ConfigurationSet"
 [:map
  ["Type" [:= "AWS::SES::ConfigurationSet"]]
  ["Properties"
   [:map {:closed :true} ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::CloudFront::StreamingDistribution.S3Origin"
 [:map
  {:closed :true}
  ["DomainName" {:optional true} [:ref "String"]]
  ["OriginAccessIdentity" {:optional true} [:ref "String"]]],
 "AWS::ServiceCatalog::CloudFormationProduct"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::CloudFormationProduct"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SupportUrl" {:optional true} [:ref "String"]]
    ["Owner" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Distributor" {:optional true} [:ref "String"]]
    ["SupportDescription" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["ProvisioningArtifactParameters"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ServiceCatalog::CloudFormationProduct.ProvisioningArtifactProperties"]]
      "Fn::If"]]
    ["ReplaceProvisioningArtifacts" {:optional true} [:ref "Boolean"]]
    ["SupportEmail" {:optional true} [:ref "String"]]]]],
 "AWS::AutoScalingPlans::ScalingPlan.PredefinedLoadMetricSpecification"
 [:map
  {:closed :true}
  ["PredefinedLoadMetricType" {:optional true} [:ref "String"]]
  ["ResourceLabel" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.FileAccessLog"
 [:map {:closed :true} ["Path" {:optional true} [:ref "String"]]],
 "AWS::ServiceDiscovery::Instance"
 [:map
  ["Type" [:= "AWS::ServiceDiscovery::Instance"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InstanceAttributes" {:optional true} [:ref "Json"]]
    ["InstanceId" {:optional true} [:ref "String"]]
    ["ServiceId" {:optional true} [:ref "String"]]]]],
 "AWS::DynamoDB::Table.Projection"
 [:map
  {:closed :true}
  ["NonKeyAttributes" {:optional true} [:ref "StringList"]]
  ["ProjectionType" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::ApplicationSettings.QuietTime"
 [:map
  {:closed :true}
  ["Start" {:optional true} [:ref "String"]]
  ["End" {:optional true} [:ref "String"]]],
 "AWS::IoT::TopicRule.SnsAction"
 [:map
  {:closed :true}
  ["MessageFormat" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["TargetArn" {:optional true} [:ref "String"]]],
 "AWS::ImageBuilder::ImagePipeline.Schedule"
 [:map
  {:closed :true}
  ["ScheduleExpression" {:optional true} [:ref "String"]]
  ["PipelineExecutionStartCondition"
   {:optional true}
   [:ref "String"]]],
 "AWS::EC2::LaunchTemplate.Placement"
 [:map
  {:closed :true}
  ["GroupName" {:optional true} [:ref "String"]]
  ["Tenancy" {:optional true} [:ref "String"]]
  ["SpreadDomain" {:optional true} [:ref "String"]]
  ["PartitionNumber" {:optional true} [:ref "Integer"]]
  ["AvailabilityZone" {:optional true} [:ref "String"]]
  ["Affinity" {:optional true} [:ref "String"]]
  ["HostId" {:optional true} [:ref "String"]]
  ["HostResourceGroupArn" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.KinesisStreamSourceConfiguration"
 [:map
  {:closed :true}
  ["KinesisStreamARN" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::Resource"
 [:map
  ["Type" [:= "AWS::ApiGateway::Resource"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ParentId" {:optional true} [:ref "String"]]
    ["PathPart" {:optional true} [:ref "String"]]
    ["RestApiId" {:optional true} [:ref "String"]]]]],
 "AWS::IoTEvents::DetectorModel.SetTimer"
 [:map
  {:closed :true}
  ["Seconds" {:optional true} [:ref "Integer"]]
  ["TimerName" {:optional true} [:ref "String"]]
  ["DurationExpression" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualRouter.PortMapping"
 [:map
  {:closed :true}
  ["Port" {:optional true} [:ref "Integer"]]
  ["Protocol" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Campaign.Schedule"
 [:map
  {:closed :true}
  ["TimeZone" {:optional true} [:ref "String"]]
  ["QuietTime"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.QuietTime"]]
  ["EndTime" {:optional true} [:ref "String"]]
  ["StartTime" {:optional true} [:ref "String"]]
  ["Frequency" {:optional true} [:ref "String"]]
  ["EventFilter"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.CampaignEventFilter"]]
  ["IsLocalTime" {:optional true} [:ref "Boolean"]]],
 "AWS::WAFv2::WebACL.SizeConstraintStatement"
 [:map
  {:closed :true}
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.FieldToMatch"]]
  ["ComparisonOperator" {:optional true} [:ref "String"]]
  ["Size" {:optional true} [:ref "Integer"]]
  ["TextTransformations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.TextTransformation"]]
    "Fn::If"]]],
 "AWS::MediaLive::Channel.CaptionDestinationSettings"
 [:map
  {:closed :true}
  ["AribDestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AribDestinationSettings"]]
  ["EmbeddedDestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.EmbeddedDestinationSettings"]]
  ["DvbSubDestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.DvbSubDestinationSettings"]]
  ["BurnInDestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.BurnInDestinationSettings"]]
  ["EbuTtDDestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.EbuTtDDestinationSettings"]]
  ["TeletextDestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.TeletextDestinationSettings"]]
  ["SmpteTtDestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.SmpteTtDestinationSettings"]]
  ["WebvttDestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.WebvttDestinationSettings"]]
  ["Scte20PlusEmbeddedDestinationSettings"
   {:optional true}
   [:ref
    "AWS::MediaLive::Channel.Scte20PlusEmbeddedDestinationSettings"]]
  ["TtmlDestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.TtmlDestinationSettings"]]
  ["EmbeddedPlusScte20DestinationSettings"
   {:optional true}
   [:ref
    "AWS::MediaLive::Channel.EmbeddedPlusScte20DestinationSettings"]]
  ["Scte27DestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.Scte27DestinationSettings"]]
  ["RtmpCaptionInfoDestinationSettings"
   {:optional true}
   [:ref
    "AWS::MediaLive::Channel.RtmpCaptionInfoDestinationSettings"]]],
 "AWS::DMS::Endpoint.NeptuneSettings"
 [:map
  {:closed :true}
  ["MaxRetryCount" {:optional true} [:ref "Integer"]]
  ["MaxFileSize" {:optional true} [:ref "Integer"]]
  ["S3BucketFolder" {:optional true} [:ref "String"]]
  ["ErrorRetryDuration" {:optional true} [:ref "Integer"]]
  ["IamAuthEnabled" {:optional true} [:ref "Boolean"]]
  ["S3BucketName" {:optional true} [:ref "String"]]
  ["ServiceAccessRoleArn" {:optional true} [:ref "String"]]],
 "AWS::EC2::NetworkInterface"
 [:map
  ["Type" [:= "AWS::EC2::NetworkInterface"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GroupSet" {:optional true} [:ref "StringList"]]
    ["SourceDestCheck" {:optional true} [:ref "Boolean"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["PrivateIpAddress" {:optional true} [:ref "String"]]
    ["PrivateIpAddresses"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::EC2::NetworkInterface.PrivateIpAddressSpecification"]]
      "Fn::If"]]
    ["SubnetId" {:optional true} [:ref "String"]]
    ["Ipv6AddressCount" {:optional true} [:ref "Integer"]]
    ["Description" {:optional true} [:ref "String"]]
    ["SecondaryPrivateIpAddressCount"
     {:optional true}
     [:ref "Integer"]]
    ["InterfaceType" {:optional true} [:ref "String"]]
    ["Ipv6Addresses"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::EC2::NetworkInterface.InstanceIpv6Address"]]
      "Fn::If"]]]]],
 "AWS::IoT::ThingPrincipalAttachment"
 [:map
  ["Type" [:= "AWS::IoT::ThingPrincipalAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Principal" {:optional true} [:ref "String"]]
    ["ThingName" {:optional true} [:ref "String"]]]]],
 "AWS::CodePipeline::Webhook.WebhookFilterRule"
 [:map
  {:closed :true}
  ["JsonPath" {:optional true} [:ref "String"]]
  ["MatchEquals" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::Route.GrpcRouteMetadata"
 [:map
  {:closed :true}
  ["Invert" {:optional true} [:ref "Boolean"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Match"
   {:optional true}
   [:ref "AWS::AppMesh::Route.GrpcRouteMetadataMatchMethod"]]],
 "AWS::AppStream::ImageBuilder"
 [:map
  ["Type" [:= "AWS::AppStream::ImageBuilder"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DomainJoinInfo"
     {:optional true}
     [:ref "AWS::AppStream::ImageBuilder.DomainJoinInfo"]]
    ["VpcConfig"
     {:optional true}
     [:ref "AWS::AppStream::ImageBuilder.VpcConfig"]]
    ["ImageArn" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["InstanceType" {:optional true} [:ref "String"]]
    ["EnableDefaultInternetAccess" {:optional true} [:ref "Boolean"]]
    ["AppstreamAgentVersion" {:optional true} [:ref "String"]]
    ["DisplayName" {:optional true} [:ref "String"]]
    ["ImageName" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["AccessEndpoints"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::AppStream::ImageBuilder.AccessEndpoint"]]
      "Fn::If"]]]]],
 "AWS::EFS::FileSystem.LifecyclePolicy"
 [:map
  {:closed :true}
  ["TransitionToIA" {:optional true} [:ref "String"]]],
 "AWS::EC2::VPCCidrBlock"
 [:map
  ["Type" [:= "AWS::EC2::VPCCidrBlock"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AmazonProvidedIpv6CidrBlock" {:optional true} [:ref "Boolean"]]
    ["CidrBlock" {:optional true} [:ref "String"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::ApiGateway::UsagePlan"
 [:map
  ["Type" [:= "AWS::ApiGateway::UsagePlan"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApiStages"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ApiGateway::UsagePlan.ApiStage"]]
      "Fn::If"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Quota"
     {:optional true}
     [:ref "AWS::ApiGateway::UsagePlan.QuotaSettings"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Throttle"
     {:optional true}
     [:ref "AWS::ApiGateway::UsagePlan.ThrottleSettings"]]
    ["UsagePlanName" {:optional true} [:ref "String"]]]]],
 "AWS::DataPipeline::Pipeline"
 [:map
  ["Type" [:= "AWS::DataPipeline::Pipeline"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Activate" {:optional true} [:ref "Boolean"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["ParameterObjects"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::DataPipeline::Pipeline.ParameterObject"]]
      "Fn::If"]]
    ["ParameterValues"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::DataPipeline::Pipeline.ParameterValue"]]
      "Fn::If"]]
    ["PipelineObjects"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::DataPipeline::Pipeline.PipelineObject"]]
      "Fn::If"]]
    ["PipelineTags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::DataPipeline::Pipeline.PipelineTag"]]
      "Fn::If"]]]]],
 "AWS::OpsWorksCM::Server"
 [:map
  ["Type" [:= "AWS::OpsWorksCM::Server"]]
  ["Properties"
   [:map
    {:closed :true}
    ["BackupId" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]
    ["CustomPrivateKey" {:optional true} [:ref "String"]]
    ["PreferredBackupWindow" {:optional true} [:ref "String"]]
    ["ServerName" {:optional true} [:ref "String"]]
    ["CustomDomain" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["InstanceType" {:optional true} [:ref "String"]]
    ["EngineAttributes"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::OpsWorksCM::Server.EngineAttribute"]]
      "Fn::If"]]
    ["KeyPair" {:optional true} [:ref "String"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["BackupRetentionCount" {:optional true} [:ref "Integer"]]
    ["DisableAutomatedBackup" {:optional true} [:ref "Boolean"]]
    ["ServiceRoleArn" {:optional true} [:ref "String"]]
    ["EngineVersion" {:optional true} [:ref "String"]]
    ["AssociatePublicIpAddress" {:optional true} [:ref "Boolean"]]
    ["EngineModel" {:optional true} [:ref "String"]]
    ["InstanceProfileArn" {:optional true} [:ref "String"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["CustomCertificate" {:optional true} [:ref "String"]]
    ["Engine" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualNode.GrpcTimeout"
 [:map
  {:closed :true}
  ["PerRequest"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.Duration"]]
  ["Idle"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.Duration"]]],
 "AWS::S3::Bucket.ReplicationDestination"
 [:map
  {:closed :true}
  ["AccessControlTranslation"
   {:optional true}
   [:ref "AWS::S3::Bucket.AccessControlTranslation"]]
  ["Account" {:optional true} [:ref "String"]]
  ["Bucket" {:optional true} [:ref "String"]]
  ["EncryptionConfiguration"
   {:optional true}
   [:ref "AWS::S3::Bucket.EncryptionConfiguration"]]
  ["Metrics" {:optional true} [:ref "AWS::S3::Bucket.Metrics"]]
  ["ReplicationTime"
   {:optional true}
   [:ref "AWS::S3::Bucket.ReplicationTime"]]
  ["StorageClass" {:optional true} [:ref "String"]]],
 "AWS::ManagedBlockchain::Node"
 [:map
  ["Type" [:= "AWS::ManagedBlockchain::Node"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MemberId" {:optional true} [:ref "String"]]
    ["NetworkId" {:optional true} [:ref "String"]]
    ["NodeConfiguration"
     {:optional true}
     [:ref "AWS::ManagedBlockchain::Node.NodeConfiguration"]]]]],
 "AWS::Greengrass::FunctionDefinitionVersion.RunAs"
 [:map
  {:closed :true}
  ["Uid" {:optional true} [:ref "Integer"]]
  ["Gid" {:optional true} [:ref "Integer"]]],
 "AWS::MediaLive::Channel.HlsCdnSettings"
 [:map
  {:closed :true}
  ["HlsWebdavSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.HlsWebdavSettings"]]
  ["HlsAkamaiSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.HlsAkamaiSettings"]]
  ["HlsBasicPutSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.HlsBasicPutSettings"]]
  ["HlsMediaStoreSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.HlsMediaStoreSettings"]]],
 "AWS::ECS::Service.PlacementStrategy"
 [:map
  {:closed :true}
  ["Field" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.HlsOutputSettings"
 [:map
  {:closed :true}
  ["NameModifier" {:optional true} [:ref "String"]]
  ["HlsSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.HlsSettings"]]
  ["H265PackagingType" {:optional true} [:ref "String"]]
  ["SegmentModifier" {:optional true} [:ref "String"]]],
 "AWS::EC2::SpotFleet.BlockDeviceMapping"
 [:map
  {:closed :true}
  ["DeviceName" {:optional true} [:ref "String"]]
  ["Ebs" {:optional true} [:ref "AWS::EC2::SpotFleet.EbsBlockDevice"]]
  ["NoDevice" {:optional true} [:ref "String"]]
  ["VirtualName" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.VpcConfiguration"
 [:map
  {:closed :true}
  ["RoleARN" {:optional true} [:ref "String"]]
  ["SubnetIds" {:optional true} [:ref "StringList"]]
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]],
 "AWS::AppMesh::VirtualRouter.VirtualRouterSpec"
 [:map
  {:closed :true}
  ["Listeners"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::AppMesh::VirtualRouter.VirtualRouterListener"]]
    "Fn::If"]]],
 "AWS::EFS::FileSystem"
 [:map
  ["Type" [:= "AWS::EFS::FileSystem"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PerformanceMode" {:optional true} [:ref "String"]]
    ["ThroughputMode" {:optional true} [:ref "String"]]
    ["LifecyclePolicies"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EFS::FileSystem.LifecyclePolicy"]]
      "Fn::If"]]
    ["Encrypted" {:optional true} [:ref "Boolean"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["BackupPolicy"
     {:optional true}
     [:ref "AWS::EFS::FileSystem.BackupPolicy"]]
    ["FileSystemPolicy" {:optional true} [:ref "Json"]]
    ["ProvisionedThroughputInMibps" {:optional true} [:ref "Double"]]
    ["FileSystemTags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EFS::FileSystem.ElasticFileSystemTag"]]
      "Fn::If"]]]]],
 "AWS::Pinpoint::PushTemplate.DefaultPushNotificationTemplate"
 [:map
  {:closed :true}
  ["Action" {:optional true} [:ref "String"]]
  ["Title" {:optional true} [:ref "String"]]
  ["Sound" {:optional true} [:ref "String"]]
  ["Body" {:optional true} [:ref "String"]]
  ["Url" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::Application.KinesisFirehoseInput"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.HttpHeaderConfig"
 [:map
  {:closed :true}
  ["HttpHeaderName" {:optional true} [:ref "String"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::KinesisAnalyticsV2::Application.FlinkApplicationConfiguration"
 [:map
  {:closed :true}
  ["CheckpointConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::Application.CheckpointConfiguration"]]
  ["ParallelismConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::Application.ParallelismConfiguration"]]
  ["MonitoringConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::Application.MonitoringConfiguration"]]],
 "AWS::KinesisAnalyticsV2::ApplicationOutput.Output"
 [:map
  {:closed :true}
  ["DestinationSchema"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::ApplicationOutput.DestinationSchema"]]
  ["LambdaOutput"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::ApplicationOutput.LambdaOutput"]]
  ["KinesisFirehoseOutput"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::ApplicationOutput.KinesisFirehoseOutput"]]
  ["KinesisStreamsOutput"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::ApplicationOutput.KinesisStreamsOutput"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::WAFRegional::SqlInjectionMatchSet"
 [:map
  ["Type" [:= "AWS::WAFRegional::SqlInjectionMatchSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SqlInjectionMatchTuples"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::WAFRegional::SqlInjectionMatchSet.SqlInjectionMatchTuple"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Config::ConfigurationAggregator"
 [:map
  ["Type" [:= "AWS::Config::ConfigurationAggregator"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AccountAggregationSources"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::Config::ConfigurationAggregator.AccountAggregationSource"]]
      "Fn::If"]]
    ["ConfigurationAggregatorName" {:optional true} [:ref "String"]]
    ["OrganizationAggregationSource"
     {:optional true}
     [:ref
      "AWS::Config::ConfigurationAggregator.OrganizationAggregationSource"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Lambda::EventSourceMapping.DestinationConfig"
 [:map
  {:closed :true}
  ["OnFailure"
   {:optional true}
   [:ref "AWS::Lambda::EventSourceMapping.OnFailure"]]],
 "AWS::AppSync::ApiCache"
 [:map
  ["Type" [:= "AWS::AppSync::ApiCache"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Type" {:optional true} [:ref "String"]]
    ["TransitEncryptionEnabled" {:optional true} [:ref "Boolean"]]
    ["AtRestEncryptionEnabled" {:optional true} [:ref "Boolean"]]
    ["ApiId" {:optional true} [:ref "String"]]
    ["ApiCachingBehavior" {:optional true} [:ref "String"]]
    ["Ttl" {:optional true} [:ref "Double"]]]]],
 "AWS::Athena::NamedQuery"
 [:map
  ["Type" [:= "AWS::Athena::NamedQuery"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Database" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["QueryString" {:optional true} [:ref "String"]]]]],
 "AWS::Kendra::DataSource.SalesforceStandardObjectAttachmentConfiguration"
 [:map
  {:closed :true}
  ["DocumentTitleFieldName" {:optional true} [:ref "String"]]
  ["FieldMappings"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"]]],
 "AWS::EFS::FileSystem.ElasticFileSystemTag"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::OpsWorksCM::Server.EngineAttribute"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ACMPCA::Certificate.Validity"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "Integer"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::AccessAnalyzer::Analyzer.ArchiveRule"
 [:map
  {:closed :true}
  ["Filter"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::AccessAnalyzer::Analyzer.Filter"]]
    "Fn::If"]]
  ["RuleName" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::InputSecurityGroup"
 [:map
  ["Type" [:= "AWS::MediaLive::InputSecurityGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["WhitelistRules"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::MediaLive::InputSecurityGroup.InputWhitelistRuleCidr"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:ref "Json"]]]]],
 "AWS::Glue::DataCatalogEncryptionSettings"
 [:map
  ["Type" [:= "AWS::Glue::DataCatalogEncryptionSettings"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DataCatalogEncryptionSettings"
     {:optional true}
     [:ref
      "AWS::Glue::DataCatalogEncryptionSettings.DataCatalogEncryptionSettings"]]
    ["CatalogId" {:optional true} [:ref "String"]]]]],
 "AWS::Cognito::IdentityPool.CognitoStreams"
 [:map
  {:closed :true}
  ["StreamingStatus" {:optional true} [:ref "String"]]
  ["StreamName" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::EC2::SpotFleet.InstanceNetworkInterfaceSpecification"
 [:map
  {:closed :true}
  ["Groups" {:optional true} [:ref "StringList"]]
  ["DeleteOnTermination" {:optional true} [:ref "Boolean"]]
  ["PrivateIpAddresses"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::EC2::SpotFleet.PrivateIpAddressSpecification"]]
    "Fn::If"]]
  ["SubnetId" {:optional true} [:ref "String"]]
  ["AssociatePublicIpAddress" {:optional true} [:ref "Boolean"]]
  ["Ipv6AddressCount" {:optional true} [:ref "Integer"]]
  ["Description" {:optional true} [:ref "String"]]
  ["DeviceIndex" {:optional true} [:ref "Integer"]]
  ["SecondaryPrivateIpAddressCount" {:optional true} [:ref "Integer"]]
  ["Ipv6Addresses"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::SpotFleet.InstanceIpv6Address"]]
    "Fn::If"]]
  ["NetworkInterfaceId" {:optional true} [:ref "String"]]],
 "AWS::GameLift::Fleet.IpPermission"
 [:map
  {:closed :true}
  ["FromPort" {:optional true} [:ref "Integer"]]
  ["IpRange" {:optional true} [:ref "String"]]
  ["Protocol" {:optional true} [:ref "String"]]
  ["ToPort" {:optional true} [:ref "Integer"]]],
 "AWS::MediaLive::Channel.AvailConfiguration"
 [:map
  {:closed :true}
  ["AvailSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.AvailSettings"]]],
 "AWS::EKS::Nodegroup.RemoteAccess"
 [:map
  {:closed :true}
  ["SourceSecurityGroups" {:optional true} [:ref "StringList"]]
  ["Ec2SshKey" {:optional true} [:ref "String"]]],
 "AWS::ServiceCatalog::CloudFormationProvisionedProduct.ProvisioningParameter"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::SES::ReceiptRule.Rule"
 [:map
  {:closed :true}
  ["ScanEnabled" {:optional true} [:ref "Boolean"]]
  ["Recipients" {:optional true} [:ref "StringList"]]
  ["Actions"
   {:optional true}
   [:or [:sequential [:ref "AWS::SES::ReceiptRule.Action"]] "Fn::If"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["Name" {:optional true} [:ref "String"]]
  ["TlsPolicy" {:optional true} [:ref "String"]]],
 "AWS::Config::RemediationConfiguration.ResourceValue"
 [:map {:closed :true} ["Value" {:optional true} [:ref "String"]]],
 "AWS::Events::Rule.HttpParameters"
 [:map
  {:closed :true}
  ["HeaderParameters" {:optional true} [:ref "StringMap"]]
  ["PathParameterValues" {:optional true} [:ref "StringList"]]
  ["QueryStringParameters" {:optional true} [:ref "StringMap"]]],
 "AWS::AppStream::Stack.AccessEndpoint"
 [:map
  {:closed :true}
  ["EndpointType" {:optional true} [:ref "String"]]
  ["VpceId" {:optional true} [:ref "String"]]],
 "AWS::Detective::Graph"
 [:map
  ["Type" [:= "AWS::Detective::Graph"]]
  ["Properties" [:map {:closed :true}]]],
 "AWS::Synthetics::Canary.VPCConfig"
 [:map
  {:closed :true}
  ["VpcId" {:optional true} [:ref "String"]]
  ["SubnetIds" {:optional true} [:ref "StringList"]]
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]],
 "AWS::EC2::TransitGateway"
 [:map
  ["Type" [:= "AWS::EC2::TransitGateway"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MulticastSupport" {:optional true} [:ref "String"]]
    ["AmazonSideAsn" {:optional true} [:ref "Integer"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["DefaultRouteTableAssociation" {:optional true} [:ref "String"]]
    ["DefaultRouteTablePropagation" {:optional true} [:ref "String"]]
    ["VpnEcmpSupport" {:optional true} [:ref "String"]]
    ["DnsSupport" {:optional true} [:ref "String"]]
    ["AutoAcceptSharedAttachments" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]]]],
 "AWS::Batch::JobDefinition.RetryStrategy"
 [:map {:closed :true} ["Attempts" {:optional true} [:ref "Integer"]]],
 "AWS::IoTAnalytics::Pipeline.Filter"
 [:map
  {:closed :true}
  ["Filter" {:optional true} [:ref "String"]]
  ["Next" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskSet.LoadBalancer"
 [:map
  {:closed :true}
  ["ContainerName" {:optional true} [:ref "String"]]
  ["ContainerPort" {:optional true} [:ref "Integer"]]
  ["LoadBalancerName" {:optional true} [:ref "String"]]
  ["TargetGroupArn" {:optional true} [:ref "String"]]],
 "AWS::EC2::Instance.CpuOptions"
 [:map
  {:closed :true}
  ["CoreCount" {:optional true} [:ref "Integer"]]
  ["ThreadsPerCore" {:optional true} [:ref "Integer"]]],
 "AWS::CloudWatch::AnomalyDetector.Dimension"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::WAFRegional::SizeConstraintSet.FieldToMatch"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Data" {:optional true} [:ref "String"]]],
 "AWS::FMS::Policy.PolicyTag"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::SecretsManager::ResourcePolicy"
 [:map
  ["Type" [:= "AWS::SecretsManager::ResourcePolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SecretId" {:optional true} [:ref "String"]]
    ["ResourcePolicy" {:optional true} [:ref "Json"]]]]],
 "AWS::ApiGatewayV2::RouteResponse"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::RouteResponse"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RouteResponseKey" {:optional true} [:ref "String"]]
    ["ResponseParameters" {:optional true} [:ref "Json"]]
    ["RouteId" {:optional true} [:ref "String"]]
    ["ModelSelectionExpression" {:optional true} [:ref "String"]]
    ["ApiId" {:optional true} [:ref "String"]]
    ["ResponseModels" {:optional true} [:ref "Json"]]]]],
 "AWS::Config::ConfigurationAggregator.OrganizationAggregationSource"
 [:map
  {:closed :true}
  ["AllAwsRegions" {:optional true} [:ref "Boolean"]]
  ["AwsRegions" {:optional true} [:ref "StringList"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::Route53Resolver::ResolverEndpoint"
 [:map
  ["Type" [:= "AWS::Route53Resolver::ResolverEndpoint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["IpAddresses"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::Route53Resolver::ResolverEndpoint.IpAddressRequest"]]
      "Fn::If"]]
    ["Direction" {:optional true} [:ref "String"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::CapacityReservation"
 [:map
  ["Type" [:= "AWS::EC2::CapacityReservation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InstancePlatform" {:optional true} [:ref "String"]]
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["EphemeralStorage" {:optional true} [:ref "Boolean"]]
    ["InstanceType" {:optional true} [:ref "String"]]
    ["EbsOptimized" {:optional true} [:ref "Boolean"]]
    ["EndDateType" {:optional true} [:ref "String"]]
    ["Tenancy" {:optional true} [:ref "String"]]
    ["TagSpecifications"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::EC2::CapacityReservation.TagSpecification"]]
      "Fn::If"]]
    ["InstanceMatchCriteria" {:optional true} [:ref "String"]]
    ["EndDate" {:optional true} [:ref "String"]]
    ["InstanceCount" {:optional true} [:ref "Integer"]]]]],
 "AWS::Pinpoint::PushTemplate"
 [:map
  ["Type" [:= "AWS::Pinpoint::PushTemplate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GCM"
     {:optional true}
     [:ref
      "AWS::Pinpoint::PushTemplate.AndroidPushNotificationTemplate"]]
    ["APNS"
     {:optional true}
     [:ref "AWS::Pinpoint::PushTemplate.APNSPushNotificationTemplate"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["TemplateDescription" {:optional true} [:ref "String"]]
    ["Baidu"
     {:optional true}
     [:ref
      "AWS::Pinpoint::PushTemplate.AndroidPushNotificationTemplate"]]
    ["TemplateName" {:optional true} [:ref "String"]]
    ["Default"
     {:optional true}
     [:ref
      "AWS::Pinpoint::PushTemplate.DefaultPushNotificationTemplate"]]
    ["DefaultSubstitutions" {:optional true} [:ref "String"]]
    ["ADM"
     {:optional true}
     [:ref
      "AWS::Pinpoint::PushTemplate.AndroidPushNotificationTemplate"]]]]],
 "AWS::EFS::AccessPoint.AccessPointTag"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::Inspector::ResourceGroup"
 [:map
  ["Type" [:= "AWS::Inspector::ResourceGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResourceGroupTags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::CloudFront::CachePolicy.QueryStringsConfig"
 [:map
  {:closed :true}
  ["QueryStringBehavior" {:optional true} [:ref "String"]]
  ["QueryStrings" {:optional true} [:ref "StringList"]]],
 "AWS::CodeDeploy::DeploymentGroup.AlarmConfiguration"
 [:map
  {:closed :true}
  ["Alarms"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CodeDeploy::DeploymentGroup.Alarm"]]
    "Fn::If"]]
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["IgnorePollAlarmFailure" {:optional true} [:ref "Boolean"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.AuthenticateCognitoConfig"
 [:map
  {:closed :true}
  ["AuthenticationRequestExtraParams"
   {:optional true}
   [:ref "StringMap"]]
  ["OnUnauthenticatedRequest" {:optional true} [:ref "String"]]
  ["Scope" {:optional true} [:ref "String"]]
  ["SessionCookieName" {:optional true} [:ref "String"]]
  ["SessionTimeout" {:optional true} [:ref "Long"]]
  ["UserPoolArn" {:optional true} [:ref "String"]]
  ["UserPoolClientId" {:optional true} [:ref "String"]]
  ["UserPoolDomain" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::ApplicationReferenceDataSource.ReferenceDataSource"
 [:map
  {:closed :true}
  ["ReferenceSchema"
   {:optional true}
   [:ref
    "AWS::KinesisAnalytics::ApplicationReferenceDataSource.ReferenceSchema"]]
  ["TableName" {:optional true} [:ref "String"]]
  ["S3ReferenceDataSource"
   {:optional true}
   [:ref
    "AWS::KinesisAnalytics::ApplicationReferenceDataSource.S3ReferenceDataSource"]]],
 "AWS::RDS::DBProxyTargetGroup.ConnectionPoolConfigurationInfoFormat"
 [:map
  {:closed :true}
  ["MaxConnectionsPercent" {:optional true} [:ref "Integer"]]
  ["MaxIdleConnectionsPercent" {:optional true} [:ref "Integer"]]
  ["ConnectionBorrowTimeout" {:optional true} [:ref "Integer"]]
  ["SessionPinningFilters" {:optional true} [:ref "StringList"]]
  ["InitQuery" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Channel.ChannelStorage"
 [:map
  {:closed :true}
  ["CustomerManagedS3"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Channel.CustomerManagedS3"]]
  ["ServiceManagedS3"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Channel.ServiceManagedS3"]]],
 "AWS::ApiGateway::Deployment.MethodSetting"
 [:map
  {:closed :true}
  ["DataTraceEnabled" {:optional true} [:ref "Boolean"]]
  ["MetricsEnabled" {:optional true} [:ref "Boolean"]]
  ["HttpMethod" {:optional true} [:ref "String"]]
  ["CachingEnabled" {:optional true} [:ref "Boolean"]]
  ["CacheTtlInSeconds" {:optional true} [:ref "Integer"]]
  ["LoggingLevel" {:optional true} [:ref "String"]]
  ["ThrottlingRateLimit" {:optional true} [:ref "Double"]]
  ["ResourcePath" {:optional true} [:ref "String"]]
  ["ThrottlingBurstLimit" {:optional true} [:ref "Integer"]]
  ["CacheDataEncrypted" {:optional true} [:ref "Boolean"]]],
 "AWS::Batch::JobQueue"
 [:map
  ["Type" [:= "AWS::Batch::JobQueue"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ComputeEnvironmentOrder"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Batch::JobQueue.ComputeEnvironmentOrder"]]
      "Fn::If"]]
    ["Priority" {:optional true} [:ref "Integer"]]
    ["State" {:optional true} [:ref "String"]]
    ["JobQueueName" {:optional true} [:ref "String"]]]]],
 "AWS::SageMaker::MonitoringSchedule.MonitoringExecutionSummary"
 [:map
  {:closed :true}
  ["CreationTime" {:optional true} [:ref "String"]]
  ["EndpointName" {:optional true} [:ref "String"]]
  ["FailureReason" {:optional true} [:ref "String"]]
  ["LastModifiedTime" {:optional true} [:ref "String"]]
  ["MonitoringExecutionStatus" {:optional true} [:ref "String"]]
  ["MonitoringScheduleName" {:optional true} [:ref "String"]]
  ["ProcessingJobArn" {:optional true} [:ref "String"]]
  ["ScheduledTime" {:optional true} [:ref "String"]]],
 "AWS::WAF::SqlInjectionMatchSet"
 [:map
  ["Type" [:= "AWS::WAF::SqlInjectionMatchSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["SqlInjectionMatchTuples"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::WAF::SqlInjectionMatchSet.SqlInjectionMatchTuple"]]
      "Fn::If"]]]]],
 "AWS::AppMesh::GatewayRoute.GrpcGatewayRouteAction"
 [:map
  {:closed :true}
  ["Target"
   {:optional true}
   [:ref "AWS::AppMesh::GatewayRoute.GatewayRouteTarget"]]],
 "AWS::EC2::SubnetCidrBlock"
 [:map
  ["Type" [:= "AWS::EC2::SubnetCidrBlock"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Ipv6CidrBlock" {:optional true} [:ref "String"]]
    ["SubnetId" {:optional true} [:ref "String"]]]]],
 "AWS::SES::ReceiptRule.AddHeaderAction"
 [:map
  {:closed :true}
  ["HeaderValue" {:optional true} [:ref "String"]]
  ["HeaderName" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::NotebookInstance"
 [:map
  ["Type" [:= "AWS::SageMaker::NotebookInstance"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AdditionalCodeRepositories" {:optional true} [:ref "StringList"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["InstanceType" {:optional true} [:ref "String"]]
    ["AcceleratorTypes" {:optional true} [:ref "StringList"]]
    ["DirectInternetAccess" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["NotebookInstanceName" {:optional true} [:ref "String"]]
    ["SubnetId" {:optional true} [:ref "String"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["RootAccess" {:optional true} [:ref "String"]]
    ["LifecycleConfigName" {:optional true} [:ref "String"]]
    ["DefaultCodeRepository" {:optional true} [:ref "String"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["VolumeSizeInGB" {:optional true} [:ref "Integer"]]]]],
 "AWS::CloudFront::Distribution.OriginGroupMember"
 [:map {:closed :true} ["OriginId" {:optional true} [:ref "String"]]],
 "AWS::Macie::Session"
 [:map
  ["Type" [:= "AWS::Macie::Session"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Status" {:optional true} [:ref "String"]]
    ["FindingPublishingFrequency" {:optional true} [:ref "String"]]]]],
 "AWS::CodeDeploy::DeploymentGroup.DeploymentStyle"
 [:map
  {:closed :true}
  ["DeploymentOption" {:optional true} [:ref "String"]]
  ["DeploymentType" {:optional true} [:ref "String"]]],
 "AWS::SDB::Domain"
 [:map
  ["Type" [:= "AWS::SDB::Domain"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::Mesh.EgressFilter"
 [:map {:closed :true} ["Type" {:optional true} [:ref "String"]]],
 "AWS::AutoScalingPlans::ScalingPlan.ApplicationSource"
 [:map
  {:closed :true}
  ["CloudFormationStackARN" {:optional true} [:ref "String"]]
  ["TagFilters"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::AutoScalingPlans::ScalingPlan.TagFilter"]]
    "Fn::If"]]],
 "AWS::S3::Bucket.ObjectLockRule"
 [:map
  {:closed :true}
  ["DefaultRetention"
   {:optional true}
   [:ref "AWS::S3::Bucket.DefaultRetention"]]],
 "AWS::AmazonMQ::Broker.ServerMetadata"
 [:map
  {:closed :true}
  ["RoleSearchSubtree" {:optional true} [:ref "Boolean"]]
  ["RoleBase" {:optional true} [:ref "String"]]
  ["UserSearchSubtree" {:optional true} [:ref "Boolean"]]
  ["RoleName" {:optional true} [:ref "String"]]
  ["ServiceAccountUsername" {:optional true} [:ref "String"]]
  ["Hosts" {:optional true} [:ref "StringList"]]
  ["RoleSearchMatching" {:optional true} [:ref "String"]]
  ["ServiceAccountPassword" {:optional true} [:ref "String"]]
  ["UserRoleName" {:optional true} [:ref "String"]]
  ["UserSearchMatching" {:optional true} [:ref "String"]]
  ["UserBase" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.InputLossBehavior"
 [:map
  {:closed :true}
  ["InputLossImageColor" {:optional true} [:ref "String"]]
  ["BlackFrameMsec" {:optional true} [:ref "Integer"]]
  ["InputLossImageType" {:optional true} [:ref "String"]]
  ["InputLossImageSlate"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.InputLocation"]]
  ["RepeatFrameMsec" {:optional true} [:ref "Integer"]]],
 "AWS::EC2::SpotFleet.IamInstanceProfileSpecification"
 [:map {:closed :true} ["Arn" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.ByteMatchStatement"
 [:map
  {:closed :true}
  ["SearchString" {:optional true} [:ref "String"]]
  ["SearchStringBase64" {:optional true} [:ref "String"]]
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.FieldToMatch"]]
  ["TextTransformations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.TextTransformation"]]
    "Fn::If"]]
  ["PositionalConstraint" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition"
 [:map
  ["Type" [:= "AWS::ECS::TaskDefinition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ContainerDefinitions"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ECS::TaskDefinition.ContainerDefinition"]]
      "Fn::If"]]
    ["Cpu" {:optional true} [:ref "String"]]
    ["NetworkMode" {:optional true} [:ref "String"]]
    ["PlacementConstraints"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::ECS::TaskDefinition.TaskDefinitionPlacementConstraint"]]
      "Fn::If"]]
    ["Memory" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["IpcMode" {:optional true} [:ref "String"]]
    ["ExecutionRoleArn" {:optional true} [:ref "String"]]
    ["InferenceAccelerators"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ECS::TaskDefinition.InferenceAccelerator"]]
      "Fn::If"]]
    ["PidMode" {:optional true} [:ref "String"]]
    ["Family" {:optional true} [:ref "String"]]
    ["RequiresCompatibilities" {:optional true} [:ref "StringList"]]
    ["TaskRoleArn" {:optional true} [:ref "String"]]
    ["Volumes"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ECS::TaskDefinition.Volume"]]
      "Fn::If"]]
    ["ProxyConfiguration"
     {:optional true}
     [:ref "AWS::ECS::TaskDefinition.ProxyConfiguration"]]]]],
 "AWS::NetworkManager::Device"
 [:map
  ["Type" [:= "AWS::NetworkManager::Device"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SerialNumber" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["GlobalNetworkId" {:optional true} [:ref "String"]]
    ["Model" {:optional true} [:ref "String"]]
    ["Vendor" {:optional true} [:ref "String"]]
    ["SiteId" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]
    ["Location"
     {:optional true}
     [:ref "AWS::NetworkManager::Device.Location"]]]]],
 "AWS::Glue::Trigger.Action"
 [:map
  {:closed :true}
  ["NotificationProperty"
   {:optional true}
   [:ref "AWS::Glue::Trigger.NotificationProperty"]]
  ["CrawlerName" {:optional true} [:ref "String"]]
  ["Timeout" {:optional true} [:ref "Integer"]]
  ["JobName" {:optional true} [:ref "String"]]
  ["Arguments" {:optional true} [:ref "Json"]]
  ["SecurityConfiguration" {:optional true} [:ref "String"]]],
 "AWS::ElasticBeanstalk::Application.ApplicationVersionLifecycleConfig"
 [:map
  {:closed :true}
  ["MaxAgeRule"
   {:optional true}
   [:ref "AWS::ElasticBeanstalk::Application.MaxAgeRule"]]
  ["MaxCountRule"
   {:optional true}
   [:ref "AWS::ElasticBeanstalk::Application.MaxCountRule"]]],
 "AWS::EMR::InstanceFleetConfig.InstanceFleetProvisioningSpecifications"
 [:map
  {:closed :true}
  ["SpotSpecification"
   {:optional true}
   [:ref
    "AWS::EMR::InstanceFleetConfig.SpotProvisioningSpecification"]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayPortMapping"
 [:map
  {:closed :true}
  ["Port" {:optional true} [:ref "Integer"]]
  ["Protocol" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.ForwardedIPConfiguration"
 [:map
  {:closed :true}
  ["HeaderName" {:optional true} [:ref "String"]]
  ["FallbackBehavior" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Segment"
 [:map
  ["Type" [:= "AWS::Pinpoint::Segment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SegmentGroups"
     {:optional true}
     [:ref "AWS::Pinpoint::Segment.SegmentGroups"]]
    ["Dimensions"
     {:optional true}
     [:ref "AWS::Pinpoint::Segment.SegmentDimensions"]]
    ["ApplicationId" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::DLM::LifecyclePolicy.CreateRule"
 [:map
  {:closed :true}
  ["IntervalUnit" {:optional true} [:ref "String"]]
  ["Times" {:optional true} [:ref "StringList"]]
  ["CronExpression" {:optional true} [:ref "String"]]
  ["Interval" {:optional true} [:ref "Integer"]]],
 "AWS::Athena::WorkGroup.ResultConfiguration"
 [:map
  {:closed :true}
  ["EncryptionConfiguration"
   {:optional true}
   [:ref "AWS::Athena::WorkGroup.EncryptionConfiguration"]]
  ["OutputLocation" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::ApplicationReferenceDataSource.RecordFormat"
 [:map
  {:closed :true}
  ["MappingParameters"
   {:optional true}
   [:ref
    "AWS::KinesisAnalytics::ApplicationReferenceDataSource.MappingParameters"]]
  ["RecordFormatType" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinitionVersion.S3MachineLearningModelResourceData"
 [:map
  {:closed :true}
  ["OwnerSetting"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinitionVersion.ResourceDownloadOwnerSetting"]]
  ["DestinationPath" {:optional true} [:ref "String"]]
  ["S3Uri" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualService.VirtualServiceSpec"
 [:map
  {:closed :true}
  ["Provider"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualService.VirtualServiceProvider"]]],
 "AWS::Glue::Partition.Order"
 [:map
  {:closed :true}
  ["Column" {:optional true} [:ref "String"]]
  ["SortOrder" {:optional true} [:ref "Integer"]]],
 "AWS::KinesisAnalytics::ApplicationReferenceDataSource.JSONMappingParameters"
 [:map
  {:closed :true}
  ["RecordRowPath" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::Authorizer"
 [:map
  ["Type" [:= "AWS::ApiGateway::Authorizer"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AuthorizerUri" {:optional true} [:ref "String"]]
    ["RestApiId" {:optional true} [:ref "String"]]
    ["AuthType" {:optional true} [:ref "String"]]
    ["IdentitySource" {:optional true} [:ref "String"]]
    ["AuthorizerResultTtlInSeconds" {:optional true} [:ref "Integer"]]
    ["IdentityValidationExpression" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]
    ["AuthorizerCredentials" {:optional true} [:ref "String"]]
    ["ProviderARNs" {:optional true} [:ref "StringList"]]]]],
 "AWS::AppStream::ImageBuilder.AccessEndpoint"
 [:map
  {:closed :true}
  ["EndpointType" {:optional true} [:ref "String"]]
  ["VpceId" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.OutputDestination"
 [:map
  {:closed :true}
  ["MultiplexSettings"
   {:optional true}
   [:ref
    "AWS::MediaLive::Channel.MultiplexProgramChannelDestinationSettings"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Settings"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::MediaLive::Channel.OutputDestinationSettings"]]
    "Fn::If"]]
  ["MediaPackageSettings"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::MediaLive::Channel.MediaPackageOutputDestinationSettings"]]
    "Fn::If"]]],
 "AWS::Kendra::Index.ValueImportanceItems"
 [:map
  {:closed :true}
  ["ValueImportanceItems"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Kendra::Index.ValueImportanceItem"]]
    "Fn::If"]]],
 "AWS::S3::Bucket.NoncurrentVersionTransition"
 [:map
  {:closed :true}
  ["StorageClass" {:optional true} [:ref "String"]]
  ["TransitionInDays" {:optional true} [:ref "Integer"]]],
 "AWS::EC2::Instance.NoDevice" [:map {:closed :true}],
 "AWS::CodeStar::GitHubRepository.Code"
 [:map
  {:closed :true}
  ["S3" {:optional true} [:ref "AWS::CodeStar::GitHubRepository.S3"]]],
 "AWS::Greengrass::FunctionDefinition.FunctionConfiguration"
 [:map
  {:closed :true}
  ["MemorySize" {:optional true} [:ref "Integer"]]
  ["Pinned" {:optional true} [:ref "Boolean"]]
  ["ExecArgs" {:optional true} [:ref "String"]]
  ["Timeout" {:optional true} [:ref "Integer"]]
  ["EncodingType" {:optional true} [:ref "String"]]
  ["Environment"
   {:optional true}
   [:ref "AWS::Greengrass::FunctionDefinition.Environment"]]
  ["Executable" {:optional true} [:ref "String"]]],
 "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation"
 [:map
  ["Type"
   [:= "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResolverQueryLogConfigId" {:optional true} [:ref "String"]]
    ["ResourceId" {:optional true} [:ref "String"]]]]],
 "AWS::EMR::InstanceFleetConfig.Configuration"
 [:map
  {:closed :true}
  ["Classification" {:optional true} [:ref "String"]]
  ["ConfigurationProperties" {:optional true} [:ref "StringMap"]]
  ["Configurations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::InstanceFleetConfig.Configuration"]]
    "Fn::If"]]],
 "AWS::EC2::Host"
 [:map
  ["Type" [:= "AWS::EC2::Host"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AutoPlacement" {:optional true} [:ref "String"]]
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["HostRecovery" {:optional true} [:ref "String"]]
    ["InstanceType" {:optional true} [:ref "String"]]]]],
 "AWS::S3::Bucket.VersioningConfiguration"
 [:map {:closed :true} ["Status" {:optional true} [:ref "String"]]],
 "AWS::Logs::Destination"
 [:map
  ["Type" [:= "AWS::Logs::Destination"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DestinationName" {:optional true} [:ref "String"]]
    ["DestinationPolicy" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["TargetArn" {:optional true} [:ref "String"]]]]],
 "AWS::CodePipeline::Pipeline.ActionDeclaration"
 [:map
  {:closed :true}
  ["InputArtifacts"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CodePipeline::Pipeline.InputArtifact"]]
    "Fn::If"]]
  ["RunOrder" {:optional true} [:ref "Integer"]]
  ["OutputArtifacts"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CodePipeline::Pipeline.OutputArtifact"]]
    "Fn::If"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["Region" {:optional true} [:ref "String"]]
  ["Namespace" {:optional true} [:ref "String"]]
  ["ActionTypeId"
   {:optional true}
   [:ref "AWS::CodePipeline::Pipeline.ActionTypeId"]]
  ["Name" {:optional true} [:ref "String"]]
  ["Configuration" {:optional true} [:ref "Json"]]],
 "AWS::GameLift::GameServerGroup.LaunchTemplate"
 [:map
  {:closed :true}
  ["LaunchTemplateId" {:optional true} [:ref "String"]]
  ["LaunchTemplateName" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]],
 "AWS::CloudWatch::Dashboard"
 [:map
  ["Type" [:= "AWS::CloudWatch::Dashboard"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DashboardName" {:optional true} [:ref "String"]]
    ["DashboardBody" {:optional true} [:ref "String"]]]]],
 "AWS::LakeFormation::Permissions.TableResource"
 [:map
  {:closed :true}
  ["DatabaseName" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::EMR::InstanceGroupConfig.Configuration"
 [:map
  {:closed :true}
  ["Classification" {:optional true} [:ref "String"]]
  ["ConfigurationProperties" {:optional true} [:ref "StringMap"]]
  ["Configurations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::InstanceGroupConfig.Configuration"]]
    "Fn::If"]]],
 "AWS::AppMesh::Route.TcpRouteAction"
 [:map
  {:closed :true}
  ["WeightedTargets"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::AppMesh::Route.WeightedTarget"]]
    "Fn::If"]]],
 "AWS::DynamoDB::Table.PointInTimeRecoverySpecification"
 [:map
  {:closed :true}
  ["PointInTimeRecoveryEnabled" {:optional true} [:ref "Boolean"]]],
 "AWS::Batch::ComputeEnvironment.LaunchTemplateSpecification"
 [:map
  {:closed :true}
  ["LaunchTemplateName" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]
  ["LaunchTemplateId" {:optional true} [:ref "String"]]],
 "AWS::DLM::LifecyclePolicy"
 [:map
  ["Type" [:= "AWS::DLM::LifecyclePolicy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ExecutionRoleArn" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["State" {:optional true} [:ref "String"]]
    ["PolicyDetails"
     {:optional true}
     [:ref "AWS::DLM::LifecyclePolicy.PolicyDetails"]]]]],
 "AWS::WAFRegional::WebACLAssociation"
 [:map
  ["Type" [:= "AWS::WAFRegional::WebACLAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResourceArn" {:optional true} [:ref "String"]]
    ["WebACLId" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualNode.HttpTimeout"
 [:map
  {:closed :true}
  ["PerRequest"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.Duration"]]
  ["Idle"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.Duration"]]],
 "AWS::AppSync::GraphQLApi.CognitoUserPoolConfig"
 [:map
  {:closed :true}
  ["AppIdClientRegex" {:optional true} [:ref "String"]]
  ["UserPoolId" {:optional true} [:ref "String"]]
  ["AwsRegion" {:optional true} [:ref "String"]]],
 "AWS::CodePipeline::Pipeline.ArtifactStore"
 [:map
  {:closed :true}
  ["EncryptionKey"
   {:optional true}
   [:ref "AWS::CodePipeline::Pipeline.EncryptionKey"]]
  ["Location" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.StatementThree"
 [:map
  {:closed :true}
  ["ByteMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.ByteMatchStatement"]]
  ["SqliMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.SqliMatchStatement"]]
  ["XssMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.XssMatchStatement"]]
  ["SizeConstraintStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.SizeConstraintStatement"]]
  ["GeoMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.GeoMatchStatement"]]
  ["IPSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.IPSetReferenceStatement"]]
  ["RegexPatternSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.RegexPatternSetReferenceStatement"]]],
 "AWS::PinpointEmail::ConfigurationSet.Tags"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::Events::EventBus"
 [:map
  ["Type" [:= "AWS::Events::EventBus"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EventSourceName" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::ServiceCatalog::LaunchNotificationConstraint"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::LaunchNotificationConstraint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["NotificationArns" {:optional true} [:ref "StringList"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["PortfolioId" {:optional true} [:ref "String"]]
    ["ProductId" {:optional true} [:ref "String"]]]]],
 "AWS::CloudFront::CachePolicy.HeadersConfig"
 [:map
  {:closed :true}
  ["HeaderBehavior" {:optional true} [:ref "String"]]
  ["Headers" {:optional true} [:ref "StringList"]]],
 "AWS::WAFRegional::RegexPatternSet"
 [:map
  ["Type" [:= "AWS::WAFRegional::RegexPatternSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RegexPatternStrings" {:optional true} [:ref "StringList"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::CodeBuild::ReportGroup"
 [:map
  ["Type" [:= "AWS::CodeBuild::ReportGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Type" {:optional true} [:ref "String"]]
    ["ExportConfig"
     {:optional true}
     [:ref "AWS::CodeBuild::ReportGroup.ReportExportConfig"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::LaunchTemplate.TagSpecification"
 [:map
  {:closed :true}
  ["ResourceType" {:optional true} [:ref "String"]]
  ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::MSK::Cluster.EncryptionInTransit"
 [:map
  {:closed :true}
  ["ClientBroker" {:optional true} [:ref "String"]]
  ["InCluster" {:optional true} [:ref "Boolean"]]],
 "AWS::WAFRegional::RateBasedRule"
 [:map
  ["Type" [:= "AWS::WAFRegional::RateBasedRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MetricName" {:optional true} [:ref "String"]]
    ["RateLimit" {:optional true} [:ref "Integer"]]
    ["MatchPredicates"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::WAFRegional::RateBasedRule.Predicate"]]
      "Fn::If"]]
    ["RateKey" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::MSK::Cluster.StorageInfo"
 [:map
  {:closed :true}
  ["EBSStorageInfo"
   {:optional true}
   [:ref "AWS::MSK::Cluster.EBSStorageInfo"]]],
 "AWS::CodeDeploy::DeploymentGroup.LoadBalancerInfo"
 [:map
  {:closed :true}
  ["ElbInfoList"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CodeDeploy::DeploymentGroup.ELBInfo"]]
    "Fn::If"]]
  ["TargetGroupInfoList"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::CodeDeploy::DeploymentGroup.TargetGroupInfo"]]
    "Fn::If"]]],
 "Tag"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::ApiGatewayV2::Integration"
 [:map
  ["Type" [:= "AWS::ApiGatewayV2::Integration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["IntegrationMethod" {:optional true} [:ref "String"]]
    ["TimeoutInMillis" {:optional true} [:ref "Integer"]]
    ["ApiId" {:optional true} [:ref "String"]]
    ["IntegrationType" {:optional true} [:ref "String"]]
    ["CredentialsArn" {:optional true} [:ref "String"]]
    ["TemplateSelectionExpression" {:optional true} [:ref "String"]]
    ["RequestParameters" {:optional true} [:ref "Json"]]
    ["IntegrationUri" {:optional true} [:ref "String"]]
    ["RequestTemplates" {:optional true} [:ref "Json"]]
    ["ConnectionType" {:optional true} [:ref "String"]]
    ["ConnectionId" {:optional true} [:ref "String"]]
    ["PayloadFormatVersion" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["ContentHandlingStrategy" {:optional true} [:ref "String"]]
    ["PassthroughBehavior" {:optional true} [:ref "String"]]
    ["IntegrationSubtype" {:optional true} [:ref "String"]]
    ["TlsConfig"
     {:optional true}
     [:ref "AWS::ApiGatewayV2::Integration.TlsConfig"]]]]],
 "AWS::Redshift::ClusterParameterGroup.Parameter"
 [:map
  {:closed :true}
  ["ParameterName" {:optional true} [:ref "String"]]
  ["ParameterValue" {:optional true} [:ref "String"]]],
 "AWS::CodeBuild::Project"
 [:map
  ["Type" [:= "AWS::CodeBuild::Project"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Environment"
     {:optional true}
     [:ref "AWS::CodeBuild::Project.Environment"]]
    ["SecondarySourceVersions"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodeBuild::Project.ProjectSourceVersion"]]
      "Fn::If"]]
    ["VpcConfig"
     {:optional true}
     [:ref "AWS::CodeBuild::Project.VpcConfig"]]
    ["LogsConfig"
     {:optional true}
     [:ref "AWS::CodeBuild::Project.LogsConfig"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["SourceVersion" {:optional true} [:ref "String"]]
    ["EncryptionKey" {:optional true} [:ref "String"]]
    ["FileSystemLocations"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodeBuild::Project.ProjectFileSystemLocation"]]
      "Fn::If"]]
    ["SecondarySources"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::CodeBuild::Project.Source"]]
      "Fn::If"]]
    ["QueuedTimeoutInMinutes" {:optional true} [:ref "Integer"]]
    ["Cache"
     {:optional true}
     [:ref "AWS::CodeBuild::Project.ProjectCache"]]
    ["ServiceRole" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["BuildBatchConfig"
     {:optional true}
     [:ref "AWS::CodeBuild::Project.ProjectBuildBatchConfig"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Triggers"
     {:optional true}
     [:ref "AWS::CodeBuild::Project.ProjectTriggers"]]
    ["BadgeEnabled" {:optional true} [:ref "Boolean"]]
    ["Artifacts"
     {:optional true}
     [:ref "AWS::CodeBuild::Project.Artifacts"]]
    ["Source" {:optional true} [:ref "AWS::CodeBuild::Project.Source"]]
    ["SecondaryArtifacts"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::CodeBuild::Project.Artifacts"]]
      "Fn::If"]]
    ["TimeoutInMinutes" {:optional true} [:ref "Integer"]]]]],
 "AWS::KinesisAnalytics::Application.InputSchema"
 [:map
  {:closed :true}
  ["RecordEncoding" {:optional true} [:ref "String"]]
  ["RecordColumns"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::KinesisAnalytics::Application.RecordColumn"]]
    "Fn::If"]]
  ["RecordFormat"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::Application.RecordFormat"]]],
 "AWS::MediaConvert::JobTemplate.AccelerationSettings"
 [:map {:closed :true} ["Mode" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::RuleGroup.OrStatementTwo"
 [:map
  {:closed :true}
  ["Statements"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::RuleGroup.StatementThree"]]
    "Fn::If"]]],
 "AWS::AppMesh::VirtualRouter.VirtualRouterListener"
 [:map
  {:closed :true}
  ["PortMapping"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualRouter.PortMapping"]]],
 "AWS::MediaLive::Channel.FeatureActivations"
 [:map
  {:closed :true}
  ["InputPrepareScheduleActions" {:optional true} [:ref "String"]]],
 "AWS::NetworkManager::Site"
 [:map
  ["Type" [:= "AWS::NetworkManager::Site"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["GlobalNetworkId" {:optional true} [:ref "String"]]
    ["Location"
     {:optional true}
     [:ref "AWS::NetworkManager::Site.Location"]]]]],
 "AWS::ApiGateway::Stage"
 [:map
  ["Type" [:= "AWS::ApiGateway::Stage"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CacheClusterSize" {:optional true} [:ref "String"]]
    ["MethodSettings"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ApiGateway::Stage.MethodSetting"]]
      "Fn::If"]]
    ["DeploymentId" {:optional true} [:ref "String"]]
    ["CanarySetting"
     {:optional true}
     [:ref "AWS::ApiGateway::Stage.CanarySetting"]]
    ["CacheClusterEnabled" {:optional true} [:ref "Boolean"]]
    ["RestApiId" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ClientCertificateId" {:optional true} [:ref "String"]]
    ["DocumentationVersion" {:optional true} [:ref "String"]]
    ["AccessLogSetting"
     {:optional true}
     [:ref "AWS::ApiGateway::Stage.AccessLogSetting"]]
    ["Variables" {:optional true} [:ref "StringMap"]]
    ["Description" {:optional true} [:ref "String"]]
    ["StageName" {:optional true} [:ref "String"]]
    ["TracingEnabled" {:optional true} [:ref "Boolean"]]]]],
 "AWS::SageMaker::Workteam.CognitoMemberDefinition"
 [:map
  {:closed :true}
  ["CognitoUserPool" {:optional true} [:ref "String"]]
  ["CognitoClientId" {:optional true} [:ref "String"]]
  ["CognitoUserGroup" {:optional true} [:ref "String"]]],
 "AWS::Glue::Job"
 [:map
  ["Type" [:= "AWS::Glue::Job"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MaxRetries" {:optional true} [:ref "Double"]]
    ["AllocatedCapacity" {:optional true} [:ref "Double"]]
    ["Timeout" {:optional true} [:ref "Integer"]]
    ["NumberOfWorkers" {:optional true} [:ref "Integer"]]
    ["SecurityConfiguration" {:optional true} [:ref "String"]]
    ["MaxCapacity" {:optional true} [:ref "Double"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["NotificationProperty"
     {:optional true}
     [:ref "AWS::Glue::Job.NotificationProperty"]]
    ["LogUri" {:optional true} [:ref "String"]]
    ["WorkerType" {:optional true} [:ref "String"]]
    ["DefaultArguments" {:optional true} [:ref "Json"]]
    ["Command" {:optional true} [:ref "AWS::Glue::Job.JobCommand"]]
    ["ExecutionProperty"
     {:optional true}
     [:ref "AWS::Glue::Job.ExecutionProperty"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["GlueVersion" {:optional true} [:ref "String"]]
    ["Connections"
     {:optional true}
     [:ref "AWS::Glue::Job.ConnectionsList"]]
    ["Role" {:optional true} [:ref "String"]]]]],
 "AWS::ApiGateway::RestApi"
 [:map
  ["Type" [:= "AWS::ApiGateway::RestApi"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EndpointConfiguration"
     {:optional true}
     [:ref "AWS::ApiGateway::RestApi.EndpointConfiguration"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Parameters" {:optional true} [:ref "StringMap"]]
    ["BinaryMediaTypes" {:optional true} [:ref "StringList"]]
    ["Body" {:optional true} [:ref "Json"]]
    ["BodyS3Location"
     {:optional true}
     [:ref "AWS::ApiGateway::RestApi.S3Location"]]
    ["FailOnWarnings" {:optional true} [:ref "Boolean"]]
    ["MinimumCompressionSize" {:optional true} [:ref "Integer"]]
    ["ApiKeySourceType" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["CloneFrom" {:optional true} [:ref "String"]]
    ["Policy" {:optional true} [:ref "Json"]]]]],
 "AWS::ApplicationAutoScaling::ScalingPolicy.MetricDimension"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::EC2::VPNConnection.VpnTunnelOptionsSpecification"
 [:map
  {:closed :true}
  ["PreSharedKey" {:optional true} [:ref "String"]]
  ["TunnelInsideCidr" {:optional true} [:ref "String"]]],
 "AWS::ImageBuilder::ImageRecipe.InstanceBlockDeviceMapping"
 [:map
  {:closed :true}
  ["DeviceName" {:optional true} [:ref "String"]]
  ["VirtualName" {:optional true} [:ref "String"]]
  ["NoDevice" {:optional true} [:ref "String"]]
  ["Ebs"
   {:optional true}
   [:ref
    "AWS::ImageBuilder::ImageRecipe.EbsInstanceBlockDeviceSpecification"]]],
 "AWS::CodePipeline::CustomActionType"
 [:map
  ["Type" [:= "AWS::CodePipeline::CustomActionType"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Category" {:optional true} [:ref "String"]]
    ["ConfigurationProperties"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::CodePipeline::CustomActionType.ConfigurationProperties"]]
      "Fn::If"]]
    ["InputArtifactDetails"
     {:optional true}
     [:ref "AWS::CodePipeline::CustomActionType.ArtifactDetails"]]
    ["OutputArtifactDetails"
     {:optional true}
     [:ref "AWS::CodePipeline::CustomActionType.ArtifactDetails"]]
    ["Provider" {:optional true} [:ref "String"]]
    ["Settings"
     {:optional true}
     [:ref "AWS::CodePipeline::CustomActionType.Settings"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Version" {:optional true} [:ref "String"]]]]],
 "AWS::AutoScaling::AutoScalingGroup.LaunchTemplateOverrides"
 [:map
  {:closed :true}
  ["InstanceType" {:optional true} [:ref "String"]]
  ["WeightedCapacity" {:optional true} [:ref "String"]]],
 "AWS::NetworkManager::Device.Location"
 [:map
  {:closed :true}
  ["Address" {:optional true} [:ref "String"]]
  ["Latitude" {:optional true} [:ref "String"]]
  ["Longitude" {:optional true} [:ref "String"]]],
 "AWS::Cognito::IdentityPoolRoleAttachment"
 [:map
  ["Type" [:= "AWS::Cognito::IdentityPoolRoleAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RoleMappings" {:optional true} [:ref "Json"]]
    ["IdentityPoolId" {:optional true} [:ref "String"]]
    ["Roles" {:optional true} [:ref "Json"]]]]],
 "AWS::S3::Bucket.LoggingConfiguration"
 [:map
  {:closed :true}
  ["DestinationBucketName" {:optional true} [:ref "String"]]
  ["LogFilePrefix" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.SalesforceKnowledgeArticleStateList"
 [:map
  {:closed :true}
  ["SalesforceKnowledgeArticleStateList"
   {:optional true}
   [:ref "StringList"]]],
 "AWS::WAFv2::WebACL.Rule"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Priority" {:optional true} [:ref "Integer"]]
  ["Statement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.StatementOne"]]
  ["Action" {:optional true} [:ref "AWS::WAFv2::WebACL.RuleAction"]]
  ["OverrideAction"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.OverrideAction"]]
  ["VisibilityConfig"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.VisibilityConfig"]]],
 "AWS::KinesisFirehose::DeliveryStream.ElasticsearchRetryOptions"
 [:map
  {:closed :true}
  ["DurationInSeconds" {:optional true} [:ref "Integer"]]],
 "AWS::IoT1Click::Placement"
 [:map
  ["Type" [:= "AWS::IoT1Click::Placement"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PlacementName" {:optional true} [:ref "String"]]
    ["ProjectName" {:optional true} [:ref "String"]]
    ["AssociatedDevices" {:optional true} [:ref "Json"]]
    ["Attributes" {:optional true} [:ref "Json"]]]]],
 "AWS::AutoScaling::AutoScalingGroup"
 [:map
  ["Type" [:= "AWS::AutoScaling::AutoScalingGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MinSize" {:optional true} [:ref "String"]]
    ["TargetGroupARNs" {:optional true} [:ref "StringList"]]
    ["MetricsCollection"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::AutoScaling::AutoScalingGroup.MetricsCollection"]]
      "Fn::If"]]
    ["DesiredCapacity" {:optional true} [:ref "String"]]
    ["Cooldown" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::AutoScaling::AutoScalingGroup.TagProperty"]]
      "Fn::If"]]
    ["InstanceId" {:optional true} [:ref "String"]]
    ["VPCZoneIdentifier" {:optional true} [:ref "StringList"]]
    ["MaxInstanceLifetime" {:optional true} [:ref "Integer"]]
    ["HealthCheckType" {:optional true} [:ref "String"]]
    ["AutoScalingGroupName" {:optional true} [:ref "String"]]
    ["ServiceLinkedRoleARN" {:optional true} [:ref "String"]]
    ["LaunchTemplate"
     {:optional true}
     [:ref
      "AWS::AutoScaling::AutoScalingGroup.LaunchTemplateSpecification"]]
    ["MaxSize" {:optional true} [:ref "String"]]
    ["NotificationConfigurations"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::AutoScaling::AutoScalingGroup.NotificationConfiguration"]]
      "Fn::If"]]
    ["HealthCheckGracePeriod" {:optional true} [:ref "Integer"]]
    ["MixedInstancesPolicy"
     {:optional true}
     [:ref "AWS::AutoScaling::AutoScalingGroup.MixedInstancesPolicy"]]
    ["NewInstancesProtectedFromScaleIn"
     {:optional true}
     [:ref "Boolean"]]
    ["AvailabilityZones" {:optional true} [:ref "StringList"]]
    ["LoadBalancerNames" {:optional true} [:ref "StringList"]]
    ["LifecycleHookSpecificationList"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::AutoScaling::AutoScalingGroup.LifecycleHookSpecification"]]
      "Fn::If"]]
    ["LaunchConfigurationName" {:optional true} [:ref "String"]]
    ["PlacementGroup" {:optional true} [:ref "String"]]
    ["TerminationPolicies" {:optional true} [:ref "StringList"]]]]],
 "AWS::Events::Rule.EcsParameters"
 [:map
  {:closed :true}
  ["Group" {:optional true} [:ref "String"]]
  ["LaunchType" {:optional true} [:ref "String"]]
  ["NetworkConfiguration"
   {:optional true}
   [:ref "AWS::Events::Rule.NetworkConfiguration"]]
  ["PlatformVersion" {:optional true} [:ref "String"]]
  ["TaskCount" {:optional true} [:ref "Integer"]]
  ["TaskDefinitionArn" {:optional true} [:ref "String"]]],
 "AWS::Cassandra::Keyspace"
 [:map
  ["Type" [:= "AWS::Cassandra::Keyspace"]]
  ["Properties"
   [:map
    {:closed :true}
    ["KeyspaceName" {:optional true} [:ref "String"]]]]],
 "AWS::Greengrass::DeviceDefinition.Device"
 [:map
  {:closed :true}
  ["SyncShadow" {:optional true} [:ref "Boolean"]]
  ["ThingArn" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["CertificateArn" {:optional true} [:ref "String"]]],
 "AWS::S3::AccessPoint.VpcConfiguration"
 [:map {:closed :true} ["VpcId" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.Scte35SpliceInsert"
 [:map
  {:closed :true}
  ["AdAvailOffset" {:optional true} [:ref "Integer"]]
  ["WebDeliveryAllowedFlag" {:optional true} [:ref "String"]]
  ["NoRegionalBlackoutFlag" {:optional true} [:ref "String"]]],
 "AWS::CodePipeline::Pipeline"
 [:map
  ["Type" [:= "AWS::CodePipeline::Pipeline"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ArtifactStore"
     {:optional true}
     [:ref "AWS::CodePipeline::Pipeline.ArtifactStore"]]
    ["ArtifactStores"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodePipeline::Pipeline.ArtifactStoreMap"]]
      "Fn::If"]]
    ["DisableInboundStageTransitions"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodePipeline::Pipeline.StageTransition"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]
    ["RestartExecutionOnUpdate" {:optional true} [:ref "Boolean"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["Stages"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodePipeline::Pipeline.StageDeclaration"]]
      "Fn::If"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::StepFunctions::StateMachine.S3Location"
 [:map
  {:closed :true}
  ["Bucket" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::Budgets::Budget"
 [:map
  ["Type" [:= "AWS::Budgets::Budget"]]
  ["Properties"
   [:map
    {:closed :true}
    ["NotificationsWithSubscribers"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Budgets::Budget.NotificationWithSubscribers"]]
      "Fn::If"]]
    ["Budget"
     {:optional true}
     [:ref "AWS::Budgets::Budget.BudgetData"]]]]],
 "AWS::Kendra::Index.DocumentMetadataConfiguration"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Relevance" {:optional true} [:ref "AWS::Kendra::Index.Relevance"]]
  ["Search" {:optional true} [:ref "AWS::Kendra::Index.Search"]]],
 "AWS::CloudFront::Distribution.Logging"
 [:map
  {:closed :true}
  ["IncludeCookies" {:optional true} [:ref "Boolean"]]
  ["Bucket" {:optional true} [:ref "String"]]
  ["Prefix" {:optional true} [:ref "String"]]],
 "AWS::EC2::VPCGatewayAttachment"
 [:map
  ["Type" [:= "AWS::EC2::VPCGatewayAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InternetGatewayId" {:optional true} [:ref "String"]]
    ["VpcId" {:optional true} [:ref "String"]]
    ["VpnGatewayId" {:optional true} [:ref "String"]]]]],
 "AWS::Batch::JobDefinition.NodeProperties"
 [:map
  {:closed :true}
  ["MainNode" {:optional true} [:ref "Integer"]]
  ["NodeRangeProperties"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Batch::JobDefinition.NodeRangeProperty"]]
    "Fn::If"]]
  ["NumNodes" {:optional true} [:ref "Integer"]]],
 "AWS::MediaLive::Channel.UdpGroupSettings"
 [:map
  {:closed :true}
  ["TimedMetadataId3Frame" {:optional true} [:ref "String"]]
  ["TimedMetadataId3Period" {:optional true} [:ref "Integer"]]
  ["InputLossAction" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::MonitoringSchedule.MonitoringAppSpecification"
 [:map
  {:closed :true}
  ["ContainerArguments" {:optional true} [:ref "StringList"]]
  ["ContainerEntrypoint" {:optional true} [:ref "StringList"]]
  ["ImageUri" {:optional true} [:ref "String"]]
  ["PostAnalyticsProcessorSourceUri" {:optional true} [:ref "String"]]
  ["RecordPreprocessorSourceUri" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.CorsRule"
 [:map
  {:closed :true}
  ["AllowedHeaders" {:optional true} [:ref "StringList"]]
  ["AllowedMethods" {:optional true} [:ref "StringList"]]
  ["AllowedOrigins" {:optional true} [:ref "StringList"]]
  ["ExposedHeaders" {:optional true} [:ref "StringList"]]
  ["Id" {:optional true} [:ref "String"]]
  ["MaxAge" {:optional true} [:ref "Integer"]]],
 "AWS::CloudFormation::Stack"
 [:map
  ["Type" [:= "AWS::CloudFormation::Stack"]]
  ["Properties"
   [:map
    {:closed :true}
    ["NotificationARNs" {:optional true} [:ref "StringList"]]
    ["Parameters" {:optional true} [:ref "StringMap"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["TemplateURL" {:optional true} [:ref "String"]]
    ["TimeoutInMinutes" {:optional true} [:ref "Integer"]]]]],
 "AWS::Greengrass::FunctionDefinition.FunctionDefinitionVersion"
 [:map
  {:closed :true}
  ["DefaultConfig"
   {:optional true}
   [:ref "AWS::Greengrass::FunctionDefinition.DefaultConfig"]]
  ["Functions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Greengrass::FunctionDefinition.Function"]]
    "Fn::If"]]],
 "AWS::SES::ReceiptRule.Action"
 [:map
  {:closed :true}
  ["BounceAction"
   {:optional true}
   [:ref "AWS::SES::ReceiptRule.BounceAction"]]
  ["S3Action" {:optional true} [:ref "AWS::SES::ReceiptRule.S3Action"]]
  ["StopAction"
   {:optional true}
   [:ref "AWS::SES::ReceiptRule.StopAction"]]
  ["SNSAction"
   {:optional true}
   [:ref "AWS::SES::ReceiptRule.SNSAction"]]
  ["WorkmailAction"
   {:optional true}
   [:ref "AWS::SES::ReceiptRule.WorkmailAction"]]
  ["AddHeaderAction"
   {:optional true}
   [:ref "AWS::SES::ReceiptRule.AddHeaderAction"]]
  ["LambdaAction"
   {:optional true}
   [:ref "AWS::SES::ReceiptRule.LambdaAction"]]],
 "AWS::CloudFront::Distribution.LambdaFunctionAssociation"
 [:map
  {:closed :true}
  ["IncludeBody" {:optional true} [:ref "Boolean"]]
  ["EventType" {:optional true} [:ref "String"]]
  ["LambdaFunctionARN" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::MonitoringSchedule"
 [:map
  ["Type" [:= "AWS::SageMaker::MonitoringSchedule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MonitoringScheduleArn" {:optional true} [:ref "String"]]
    ["EndpointName" {:optional true} [:ref "String"]]
    ["LastModifiedTime" {:optional true} [:ref "String"]]
    ["MonitoringScheduleName" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["LastMonitoringExecutionSummary"
     {:optional true}
     [:ref
      "AWS::SageMaker::MonitoringSchedule.MonitoringExecutionSummary"]]
    ["CreationTime" {:optional true} [:ref "String"]]
    ["MonitoringScheduleStatus" {:optional true} [:ref "String"]]
    ["MonitoringScheduleConfig"
     {:optional true}
     [:ref
      "AWS::SageMaker::MonitoringSchedule.MonitoringScheduleConfig"]]
    ["FailureReason" {:optional true} [:ref "String"]]]]],
 "AWS::GroundStation::DataflowEndpointGroup.SocketAddress"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Port" {:optional true} [:ref "Integer"]]],
 "AWS::Chatbot::SlackChannelConfiguration"
 [:map
  ["Type" [:= "AWS::Chatbot::SlackChannelConfiguration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SlackWorkspaceId" {:optional true} [:ref "String"]]
    ["SlackChannelId" {:optional true} [:ref "String"]]
    ["ConfigurationName" {:optional true} [:ref "String"]]
    ["IamRoleArn" {:optional true} [:ref "String"]]
    ["SnsTopicArns" {:optional true} [:ref "StringList"]]
    ["LoggingLevel" {:optional true} [:ref "String"]]]]],
 "AWS::ServiceDiscovery::Service.DnsRecord"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["TTL" {:optional true} [:ref "Double"]]],
 "AWS::DataPipeline::Pipeline.Field"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["RefValue" {:optional true} [:ref "String"]]
  ["StringValue" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.VolumeFrom"
 [:map
  {:closed :true}
  ["ReadOnly" {:optional true} [:ref "Boolean"]]
  ["SourceContainer" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.HlsGroupSettings"
 [:map
  {:closed :true}
  ["IndexNSegments" {:optional true} [:ref "Integer"]]
  ["ManifestDurationFormat" {:optional true} [:ref "String"]]
  ["CodecSpecification" {:optional true} [:ref "String"]]
  ["BaseUrlContent" {:optional true} [:ref "String"]]
  ["ProgramDateTime" {:optional true} [:ref "String"]]
  ["AdMarkers" {:optional true} [:ref "StringList"]]
  ["BaseUrlManifest1" {:optional true} [:ref "String"]]
  ["StreamInfResolution" {:optional true} [:ref "String"]]
  ["Destination"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.OutputLocationRef"]]
  ["Mode" {:optional true} [:ref "String"]]
  ["IvInManifest" {:optional true} [:ref "String"]]
  ["ConstantIv" {:optional true} [:ref "String"]]
  ["SegmentLength" {:optional true} [:ref "Integer"]]
  ["TimedMetadataId3Period" {:optional true} [:ref "Integer"]]
  ["HlsId3SegmentTagging" {:optional true} [:ref "String"]]
  ["EncryptionType" {:optional true} [:ref "String"]]
  ["BaseUrlManifest" {:optional true} [:ref "String"]]
  ["IvSource" {:optional true} [:ref "String"]]
  ["RedundantManifest" {:optional true} [:ref "String"]]
  ["HlsCdnSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.HlsCdnSettings"]]
  ["TimedMetadataId3Frame" {:optional true} [:ref "String"]]
  ["ProgramDateTimePeriod" {:optional true} [:ref "Integer"]]
  ["KeyProviderSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.KeyProviderSettings"]]
  ["KeepSegments" {:optional true} [:ref "Integer"]]
  ["CaptionLanguageSetting" {:optional true} [:ref "String"]]
  ["ClientCache" {:optional true} [:ref "String"]]
  ["IFrameOnlyPlaylists" {:optional true} [:ref "String"]]
  ["MinSegmentLength" {:optional true} [:ref "Integer"]]
  ["SegmentationMode" {:optional true} [:ref "String"]]
  ["KeyFormatVersions" {:optional true} [:ref "String"]]
  ["CaptionLanguageMappings"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::MediaLive::Channel.CaptionLanguageMapping"]]
    "Fn::If"]]
  ["BaseUrlContent1" {:optional true} [:ref "String"]]
  ["SegmentsPerSubdirectory" {:optional true} [:ref "Integer"]]
  ["ManifestCompression" {:optional true} [:ref "String"]]
  ["TsFileMode" {:optional true} [:ref "String"]]
  ["TimestampDeltaMilliseconds" {:optional true} [:ref "Integer"]]
  ["KeyFormat" {:optional true} [:ref "String"]]
  ["DirectoryStructure" {:optional true} [:ref "String"]]
  ["OutputSelection" {:optional true} [:ref "String"]]
  ["InputLossAction" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.Metrics"
 [:map
  {:closed :true}
  ["EventThreshold"
   {:optional true}
   [:ref "AWS::S3::Bucket.ReplicationTimeValue"]]
  ["Status" {:optional true} [:ref "String"]]],
 "AWS::Route53Resolver::ResolverRuleAssociation"
 [:map
  ["Type" [:= "AWS::Route53Resolver::ResolverRuleAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["VPCId" {:optional true} [:ref "String"]]
    ["ResolverRuleId" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Backup::BackupVault.NotificationObjectType"
 [:map
  {:closed :true}
  ["SNSTopicArn" {:optional true} [:ref "String"]]
  ["BackupVaultEvents" {:optional true} [:ref "StringList"]]],
 "AWS::EC2::Instance.PrivateIpAddressSpecification"
 [:map
  {:closed :true}
  ["Primary" {:optional true} [:ref "Boolean"]]
  ["PrivateIpAddress" {:optional true} [:ref "String"]]],
 "AWS::EC2::LaunchTemplate.PrivateIpAdd"
 [:map
  {:closed :true}
  ["PrivateIpAddress" {:optional true} [:ref "String"]]
  ["Primary" {:optional true} [:ref "Boolean"]]],
 "AWS::SageMaker::MonitoringSchedule.StatisticsResource"
 [:map {:closed :true} ["S3Uri" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.ReplicationRuleAndOperator"
 [:map
  {:closed :true}
  ["Prefix" {:optional true} [:ref "String"]]
  ["TagFilters"
   {:optional true}
   [:or [:sequential [:ref "AWS::S3::Bucket.TagFilter"]] "Fn::If"]]],
 "AWS::Greengrass::CoreDefinition.CoreDefinitionVersion"
 [:map
  {:closed :true}
  ["Cores"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::Greengrass::CoreDefinition.Core"]]
    "Fn::If"]]],
 "AWS::GuardDuty::IPSet"
 [:map
  ["Type" [:= "AWS::GuardDuty::IPSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Format" {:optional true} [:ref "String"]]
    ["Activate" {:optional true} [:ref "Boolean"]]
    ["DetectorId" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Location" {:optional true} [:ref "String"]]]]],
 "AWS::Elasticsearch::Domain.AdvancedSecurityOptionsInput"
 [:map
  {:closed :true}
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["InternalUserDatabaseEnabled" {:optional true} [:ref "Boolean"]]
  ["MasterUserOptions"
   {:optional true}
   [:ref "AWS::Elasticsearch::Domain.MasterUserOptions"]]],
 "AWS::ApiGateway::VpcLink"
 [:map
  ["Type" [:= "AWS::ApiGateway::VpcLink"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["TargetArns" {:optional true} [:ref "StringList"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::ACMPCA::CertificateAuthority.Subject"
 [:map
  {:closed :true}
  ["GenerationQualifier" {:optional true} [:ref "String"]]
  ["DistinguishedNameQualifier" {:optional true} [:ref "String"]]
  ["SerialNumber" {:optional true} [:ref "String"]]
  ["Title" {:optional true} [:ref "String"]]
  ["GivenName" {:optional true} [:ref "String"]]
  ["CommonName" {:optional true} [:ref "String"]]
  ["Initials" {:optional true} [:ref "String"]]
  ["Surname" {:optional true} [:ref "String"]]
  ["OrganizationalUnit" {:optional true} [:ref "String"]]
  ["Locality" {:optional true} [:ref "String"]]
  ["Pseudonym" {:optional true} [:ref "String"]]
  ["State" {:optional true} [:ref "String"]]
  ["Country" {:optional true} [:ref "String"]]
  ["Organization" {:optional true} [:ref "String"]]],
 "AWS::Macie::FindingsFilter"
 [:map
  ["Type" [:= "AWS::Macie::FindingsFilter"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["FindingCriteria"
     {:optional true}
     [:ref "AWS::Macie::FindingsFilter.FindingCriteria"]]
    ["Action" {:optional true} [:ref "String"]]
    ["Position" {:optional true} [:ref "Integer"]]]]],
 "AWS::Pinpoint::ADMChannel"
 [:map
  ["Type" [:= "AWS::Pinpoint::ADMChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ClientSecret" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ClientId" {:optional true} [:ref "String"]]
    ["ApplicationId" {:optional true} [:ref "String"]]]]],
 "AWS::WAFRegional::SqlInjectionMatchSet.FieldToMatch"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Data" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinitionVersion.ResourceDataContainer"
 [:map
  {:closed :true}
  ["SecretsManagerSecretResourceData"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinitionVersion.SecretsManagerSecretResourceData"]]
  ["SageMakerMachineLearningModelResourceData"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinitionVersion.SageMakerMachineLearningModelResourceData"]]
  ["LocalVolumeResourceData"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinitionVersion.LocalVolumeResourceData"]]
  ["LocalDeviceResourceData"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinitionVersion.LocalDeviceResourceData"]]
  ["S3MachineLearningModelResourceData"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinitionVersion.S3MachineLearningModelResourceData"]]],
 "AWS::CodeBuild::Project.ProjectSourceVersion"
 [:map
  {:closed :true}
  ["SourceIdentifier" {:optional true} [:ref "String"]]
  ["SourceVersion" {:optional true} [:ref "String"]]],
 "AWS::EC2::Volume"
 [:map
  ["Type" [:= "AWS::EC2::Volume"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["AutoEnableIO" {:optional true} [:ref "Boolean"]]
    ["Size" {:optional true} [:ref "Integer"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["OutpostArn" {:optional true} [:ref "String"]]
    ["VolumeType" {:optional true} [:ref "String"]]
    ["MultiAttachEnabled" {:optional true} [:ref "Boolean"]]
    ["Encrypted" {:optional true} [:ref "Boolean"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["Iops" {:optional true} [:ref "Integer"]]
    ["SnapshotId" {:optional true} [:ref "String"]]]]],
 "AWS::EFS::AccessPoint.RootDirectory"
 [:map
  {:closed :true}
  ["Path" {:optional true} [:ref "String"]]
  ["CreationInfo"
   {:optional true}
   [:ref "AWS::EFS::AccessPoint.CreationInfo"]]],
 "AWS::SNS::Topic.Subscription"
 [:map
  {:closed :true}
  ["Endpoint" {:optional true} [:ref "String"]]
  ["Protocol" {:optional true} [:ref "String"]]],
 "AWS::Redshift::Cluster"
 [:map
  ["Type" [:= "AWS::Redshift::Cluster"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Port" {:optional true} [:ref "Integer"]]
    ["AvailabilityZone" {:optional true} [:ref "String"]]
    ["NumberOfNodes" {:optional true} [:ref "Integer"]]
    ["HsmClientCertificateIdentifier" {:optional true} [:ref "String"]]
    ["ClusterSecurityGroups" {:optional true} [:ref "StringList"]]
    ["PubliclyAccessible" {:optional true} [:ref "Boolean"]]
    ["MasterUsername" {:optional true} [:ref "String"]]
    ["NodeType" {:optional true} [:ref "String"]]
    ["ClusterVersion" {:optional true} [:ref "String"]]
    ["LoggingProperties"
     {:optional true}
     [:ref "AWS::Redshift::Cluster.LoggingProperties"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["DBName" {:optional true} [:ref "String"]]
    ["HsmConfigurationIdentifier" {:optional true} [:ref "String"]]
    ["SnapshotClusterIdentifier" {:optional true} [:ref "String"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["ElasticIp" {:optional true} [:ref "String"]]
    ["ClusterSubnetGroupName" {:optional true} [:ref "String"]]
    ["ClusterIdentifier" {:optional true} [:ref "String"]]
    ["Encrypted" {:optional true} [:ref "Boolean"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["ClusterParameterGroupName" {:optional true} [:ref "String"]]
    ["IamRoles" {:optional true} [:ref "StringList"]]
    ["AutomatedSnapshotRetentionPeriod"
     {:optional true}
     [:ref "Integer"]]
    ["VpcSecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["ClusterType" {:optional true} [:ref "String"]]
    ["OwnerAccount" {:optional true} [:ref "String"]]
    ["SnapshotIdentifier" {:optional true} [:ref "String"]]
    ["MasterUserPassword" {:optional true} [:ref "String"]]
    ["AllowVersionUpgrade" {:optional true} [:ref "Boolean"]]]]],
 "AWS::PinpointEmail::ConfigurationSet.DeliveryOptions"
 [:map
  {:closed :true}
  ["SendingPoolName" {:optional true} [:ref "String"]]],
 "AWS::RoboMaker::SimulationApplication.RenderingEngine"
 [:map
  {:closed :true}
  ["Version" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinitionVersion.SageMakerMachineLearningModelResourceData"
 [:map
  {:closed :true}
  ["OwnerSetting"
   {:optional true}
   [:ref
    "AWS::Greengrass::ResourceDefinitionVersion.ResourceDownloadOwnerSetting"]]
  ["DestinationPath" {:optional true} [:ref "String"]]
  ["SageMakerJobArn" {:optional true} [:ref "String"]]],
 "AWS::Neptune::DBParameterGroup"
 [:map
  ["Type" [:= "AWS::Neptune::DBParameterGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Parameters" {:optional true} [:ref "Json"]]
    ["Family" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::RoboMaker::RobotApplication.SourceConfig"
 [:map
  {:closed :true}
  ["S3Bucket" {:optional true} [:ref "String"]]
  ["Architecture" {:optional true} [:ref "String"]]
  ["S3Key" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.NotStatementOne"
 [:map
  {:closed :true}
  ["Statement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.StatementTwo"]]],
 "AWS::Pinpoint::Campaign.MessageConfiguration"
 [:map
  {:closed :true}
  ["APNSMessage"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.Message"]]
  ["BaiduMessage"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.Message"]]
  ["DefaultMessage"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.Message"]]
  ["EmailMessage"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.CampaignEmailMessage"]]
  ["GCMMessage"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.Message"]]
  ["SMSMessage"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.CampaignSmsMessage"]]
  ["ADMMessage"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.Message"]]],
 "AWS::S3::Bucket.AbortIncompleteMultipartUpload"
 [:map
  {:closed :true}
  ["DaysAfterInitiation" {:optional true} [:ref "Integer"]]],
 "AWS::IoT::Authorizer.Tags"
 [:map
  {:closed :true}
  ["Tags"
   {:optional true}
   [:or [:sequential [:ref "Json"]] "Fn::If"]]],
 "AWS::CodePipeline::Pipeline.StageDeclaration"
 [:map
  {:closed :true}
  ["Actions"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::CodePipeline::Pipeline.ActionDeclaration"]]
    "Fn::If"]]
  ["Blockers"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::CodePipeline::Pipeline.BlockerDeclaration"]]
    "Fn::If"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Campaign.EventDimensions"
 [:map
  {:closed :true}
  ["Metrics" {:optional true} [:ref "Json"]]
  ["EventType"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.SetDimension"]]
  ["Attributes" {:optional true} [:ref "Json"]]],
 "AWS::ApiGateway::DocumentationVersion"
 [:map
  ["Type" [:= "AWS::ApiGateway::DocumentationVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["DocumentationVersion" {:optional true} [:ref "String"]]
    ["RestApiId" {:optional true} [:ref "String"]]]]],
 "AWS::AppSync::DataSource.LambdaConfig"
 [:map
  {:closed :true}
  ["LambdaFunctionArn" {:optional true} [:ref "String"]]],
 "AWS::ResourceGroups::Group.Query"
 [:map
  {:closed :true}
  ["ResourceTypeFilters" {:optional true} [:ref "StringList"]]
  ["StackIdentifier" {:optional true} [:ref "String"]]
  ["TagFilters"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ResourceGroups::Group.TagFilter"]]
    "Fn::If"]]],
 "AWS::KinesisFirehose::DeliveryStream.Serializer"
 [:map
  {:closed :true}
  ["OrcSerDe"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.OrcSerDe"]]
  ["ParquetSerDe"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.ParquetSerDe"]]],
 "AWS::EC2::SpotFleet.ClassicLoadBalancer"
 [:map {:closed :true} ["Name" {:optional true} [:ref "String"]]],
 "AWS::ElastiCache::SecurityGroup"
 [:map
  ["Type" [:= "AWS::ElastiCache::SecurityGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]]]],
 "AWS::DMS::EventSubscription"
 [:map
  ["Type" [:= "AWS::DMS::EventSubscription"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SourceType" {:optional true} [:ref "String"]]
    ["EventCategories" {:optional true} [:ref "StringList"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["SubscriptionName" {:optional true} [:ref "String"]]
    ["SnsTopicArn" {:optional true} [:ref "String"]]
    ["SourceIds" {:optional true} [:ref "StringList"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::ECS::TaskDefinition.RepositoryCredentials"
 [:map
  {:closed :true}
  ["CredentialsParameter" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.BlackoutSlate"
 [:map
  {:closed :true}
  ["NetworkEndBlackout" {:optional true} [:ref "String"]]
  ["State" {:optional true} [:ref "String"]]
  ["NetworkId" {:optional true} [:ref "String"]]
  ["NetworkEndBlackoutImage"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.InputLocation"]]
  ["BlackoutSlateImage"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.InputLocation"]]],
 "AWS::Pinpoint::ApplicationSettings.Limits"
 [:map
  {:closed :true}
  ["Daily" {:optional true} [:ref "Integer"]]
  ["MaximumDuration" {:optional true} [:ref "Integer"]]
  ["Total" {:optional true} [:ref "Integer"]]
  ["MessagesPerSecond" {:optional true} [:ref "Integer"]]],
 "AWS::AppMesh::GatewayRoute.GrpcGatewayRoute"
 [:map
  {:closed :true}
  ["Action"
   {:optional true}
   [:ref "AWS::AppMesh::GatewayRoute.GrpcGatewayRouteAction"]]
  ["Match"
   {:optional true}
   [:ref "AWS::AppMesh::GatewayRoute.GrpcGatewayRouteMatch"]]],
 "AWS::Route53::RecordSet.GeoLocation"
 [:map
  {:closed :true}
  ["ContinentCode" {:optional true} [:ref "String"]]
  ["CountryCode" {:optional true} [:ref "String"]]
  ["SubdivisionCode" {:optional true} [:ref "String"]]],
 "AWS::ElasticBeanstalk::Environment.Tier"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]],
 "AWS::GuardDuty::Filter.FindingCriteria"
 [:map
  {:closed :true}
  ["Criterion" {:optional true} [:ref "Json"]]
  ["ItemType"
   {:optional true}
   [:ref "AWS::GuardDuty::Filter.Condition"]]],
 "AWS::AmazonMQ::Broker.TagsEntry"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.TlsValidationContextTrust"
 [:map
  {:closed :true}
  ["ACM"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.TlsValidationContextAcmTrust"]]
  ["File"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.TlsValidationContextFileTrust"]]],
 "AWS::SES::ConfigurationSetEventDestination.KinesisFirehoseDestination"
 [:map
  {:closed :true}
  ["IAMRoleARN" {:optional true} [:ref "String"]]
  ["DeliveryStreamARN" {:optional true} [:ref "String"]]],
 "AWS::RDS::DBCluster.ScalingConfiguration"
 [:map
  {:closed :true}
  ["AutoPause" {:optional true} [:ref "Boolean"]]
  ["MaxCapacity" {:optional true} [:ref "Integer"]]
  ["MinCapacity" {:optional true} [:ref "Integer"]]
  ["SecondsUntilAutoPause" {:optional true} [:ref "Integer"]]],
 "AWS::ElasticLoadBalancingV2::Listener"
 [:map
  ["Type" [:= "AWS::ElasticLoadBalancingV2::Listener"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AlpnPolicy" {:optional true} [:ref "StringList"]]
    ["Certificates"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ElasticLoadBalancingV2::Listener.Certificate"]]
      "Fn::If"]]
    ["DefaultActions"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::ElasticLoadBalancingV2::Listener.Action"]]
      "Fn::If"]]
    ["LoadBalancerArn" {:optional true} [:ref "String"]]
    ["Port" {:optional true} [:ref "Integer"]]
    ["Protocol" {:optional true} [:ref "String"]]
    ["SslPolicy" {:optional true} [:ref "String"]]]]],
 "AWS::S3::Bucket.CorsConfiguration"
 [:map
  {:closed :true}
  ["CorsRules"
   {:optional true}
   [:or [:sequential [:ref "AWS::S3::Bucket.CorsRule"]] "Fn::If"]]],
 "AWS::EC2::FlowLog"
 [:map
  ["Type" [:= "AWS::EC2::FlowLog"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResourceType" {:optional true} [:ref "String"]]
    ["DeliverLogsPermissionArn" {:optional true} [:ref "String"]]
    ["LogFormat" {:optional true} [:ref "String"]]
    ["LogDestination" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ResourceId" {:optional true} [:ref "String"]]
    ["LogGroupName" {:optional true} [:ref "String"]]
    ["MaxAggregationInterval" {:optional true} [:ref "Integer"]]
    ["TrafficType" {:optional true} [:ref "String"]]
    ["LogDestinationType" {:optional true} [:ref "String"]]]]],
 "AWS::AutoScaling::AutoScalingGroup.NotificationConfiguration"
 [:map
  {:closed :true}
  ["NotificationTypes" {:optional true} [:ref "StringList"]]
  ["TopicARN" {:optional true} [:ref "String"]]],
 "AWS::SES::ReceiptRule.S3Action"
 [:map
  {:closed :true}
  ["BucketName" {:optional true} [:ref "String"]]
  ["KmsKeyArn" {:optional true} [:ref "String"]]
  ["TopicArn" {:optional true} [:ref "String"]]
  ["ObjectKeyPrefix" {:optional true} [:ref "String"]]],
 "AWS::RDS::DBParameterGroup"
 [:map
  ["Type" [:= "AWS::RDS::DBParameterGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Family" {:optional true} [:ref "String"]]
    ["Parameters" {:optional true} [:ref "StringMap"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Glue::SecurityConfiguration.S3Encryption"
 [:map
  {:closed :true}
  ["KmsKeyArn" {:optional true} [:ref "String"]]
  ["S3EncryptionMode" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACL.RateBasedStatementOne"
 [:map
  {:closed :true}
  ["Limit" {:optional true} [:ref "Integer"]]
  ["AggregateKeyType" {:optional true} [:ref "String"]]
  ["ScopeDownStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.StatementTwo"]]
  ["ForwardedIPConfig"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.ForwardedIPConfiguration"]]],
 "AWS::Cognito::UserPoolResourceServer"
 [:map
  ["Type" [:= "AWS::Cognito::UserPoolResourceServer"]]
  ["Properties"
   [:map
    {:closed :true}
    ["UserPoolId" {:optional true} [:ref "String"]]
    ["Identifier" {:optional true} [:ref "String"]]
    ["Scopes"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::Cognito::UserPoolResourceServer.ResourceServerScopeType"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Lambda::EventInvokeConfig"
 [:map
  ["Type" [:= "AWS::Lambda::EventInvokeConfig"]]
  ["Properties"
   [:map
    {:closed :true}
    ["FunctionName" {:optional true} [:ref "String"]]
    ["MaximumRetryAttempts" {:optional true} [:ref "Integer"]]
    ["DestinationConfig"
     {:optional true}
     [:ref "AWS::Lambda::EventInvokeConfig.DestinationConfig"]]
    ["Qualifier" {:optional true} [:ref "String"]]
    ["MaximumEventAgeInSeconds" {:optional true} [:ref "Integer"]]]]],
 "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.RecordColumn"
 [:map
  {:closed :true}
  ["Mapping" {:optional true} [:ref "String"]]
  ["SqlType" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::CloudFormation::WaitCondition"
 [:map
  ["Type" [:= "AWS::CloudFormation::WaitCondition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Count" {:optional true} [:ref "Integer"]]
    ["Handle" {:optional true} [:ref "String"]]
    ["Timeout" {:optional true} [:ref "String"]]]]],
 "AWS::Config::ConformancePack"
 [:map
  ["Type" [:= "AWS::Config::ConformancePack"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ConformancePackName" {:optional true} [:ref "String"]]
    ["DeliveryS3Bucket" {:optional true} [:ref "String"]]
    ["DeliveryS3KeyPrefix" {:optional true} [:ref "String"]]
    ["TemplateBody" {:optional true} [:ref "String"]]
    ["TemplateS3Uri" {:optional true} [:ref "String"]]
    ["ConformancePackInputParameters"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::Config::ConformancePack.ConformancePackInputParameter"]]
      "Fn::If"]]]]],
 "AWS::GameLift::Alias.RoutingStrategy"
 [:map
  {:closed :true}
  ["Message" {:optional true} [:ref "String"]]
  ["FleetId" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::Batch::JobDefinition"
 [:map
  ["Type" [:= "AWS::Batch::JobDefinition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Type" {:optional true} [:ref "String"]]
    ["Parameters" {:optional true} [:ref "Json"]]
    ["NodeProperties"
     {:optional true}
     [:ref "AWS::Batch::JobDefinition.NodeProperties"]]
    ["Timeout"
     {:optional true}
     [:ref "AWS::Batch::JobDefinition.Timeout"]]
    ["ContainerProperties"
     {:optional true}
     [:ref "AWS::Batch::JobDefinition.ContainerProperties"]]
    ["JobDefinitionName" {:optional true} [:ref "String"]]
    ["RetryStrategy"
     {:optional true}
     [:ref "AWS::Batch::JobDefinition.RetryStrategy"]]]]],
 "AWS::RDS::DBCluster.DBClusterRole"
 [:map
  {:closed :true}
  ["FeatureName" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::RDS::DBInstance.DBInstanceRole"
 [:map
  {:closed :true}
  ["FeatureName" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::ElasticBeanstalk::ConfigurationTemplate.SourceConfiguration"
 [:map
  {:closed :true}
  ["ApplicationName" {:optional true} [:ref "String"]]
  ["TemplateName" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.DefaultRetention"
 [:map
  {:closed :true}
  ["Days" {:optional true} [:ref "Integer"]]
  ["Mode" {:optional true} [:ref "String"]]
  ["Years" {:optional true} [:ref "Integer"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.ForwardConfig"
 [:map
  {:closed :true}
  ["TargetGroupStickinessConfig"
   {:optional true}
   [:ref
    "AWS::ElasticLoadBalancingV2::ListenerRule.TargetGroupStickinessConfig"]]
  ["TargetGroups"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::ElasticLoadBalancingV2::ListenerRule.TargetGroupTuple"]]
    "Fn::If"]]],
 "AWS::ECS::TaskDefinition.EFSVolumeConfiguration"
 [:map
  {:closed :true}
  ["FilesystemId" {:optional true} [:ref "String"]]
  ["RootDirectory" {:optional true} [:ref "String"]]
  ["TransitEncryption" {:optional true} [:ref "String"]]
  ["TransitEncryptionPort" {:optional true} [:ref "Integer"]]
  ["AuthorizationConfig" {:optional true} [:ref "Json"]]],
 "AWS::Greengrass::ConnectorDefinition.Connector"
 [:map
  {:closed :true}
  ["ConnectorArn" {:optional true} [:ref "String"]]
  ["Parameters" {:optional true} [:ref "Json"]]
  ["Id" {:optional true} [:ref "String"]]],
 "AWS::WAFRegional::Rule"
 [:map
  ["Type" [:= "AWS::WAFRegional::Rule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MetricName" {:optional true} [:ref "String"]]
    ["Predicates"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::WAFRegional::Rule.Predicate"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::SES::ReceiptRuleSet"
 [:map
  ["Type" [:= "AWS::SES::ReceiptRuleSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RuleSetName" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::EIP"
 [:map
  ["Type" [:= "AWS::EC2::EIP"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Domain" {:optional true} [:ref "String"]]
    ["InstanceId" {:optional true} [:ref "String"]]
    ["PublicIpv4Pool" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Glue::Trigger"
 [:map
  ["Type" [:= "AWS::Glue::Trigger"]]
  ["Properties"
   [:map
    {:closed :true}
    ["StartOnCreation" {:optional true} [:ref "Boolean"]]
    ["Actions"
     {:optional true}
     [:or [:sequential [:ref "AWS::Glue::Trigger.Action"]] "Fn::If"]]
    ["Schedule" {:optional true} [:ref "String"]]
    ["Predicate"
     {:optional true}
     [:ref "AWS::Glue::Trigger.Predicate"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["WorkflowName" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]]]],
 "AWS::Lambda::LayerVersion"
 [:map
  ["Type" [:= "AWS::Lambda::LayerVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CompatibleRuntimes" {:optional true} [:ref "StringList"]]
    ["LicenseInfo" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["LayerName" {:optional true} [:ref "String"]]
    ["Content"
     {:optional true}
     [:ref "AWS::Lambda::LayerVersion.Content"]]]]],
 "AWS::EC2::ClientVpnEndpoint"
 [:map
  ["Type" [:= "AWS::EC2::ClientVpnEndpoint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AuthenticationOptions"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::EC2::ClientVpnEndpoint.ClientAuthenticationRequest"]]
      "Fn::If"]]
    ["TransportProtocol" {:optional true} [:ref "String"]]
    ["ServerCertificateArn" {:optional true} [:ref "String"]]
    ["VpnPort" {:optional true} [:ref "Integer"]]
    ["ClientCidrBlock" {:optional true} [:ref "String"]]
    ["DnsServers" {:optional true} [:ref "StringList"]]
    ["ConnectionLogOptions"
     {:optional true}
     [:ref "AWS::EC2::ClientVpnEndpoint.ConnectionLogOptions"]]
    ["TagSpecifications"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::EC2::ClientVpnEndpoint.TagSpecification"]]
      "Fn::If"]]
    ["Description" {:optional true} [:ref "String"]]
    ["SplitTunnel" {:optional true} [:ref "Boolean"]]
    ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["VpcId" {:optional true} [:ref "String"]]]]],
 "AWS::Pinpoint::Campaign.MetricDimension"
 [:map
  {:closed :true}
  ["ComparisonOperator" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "Double"]]],
 "AWS::MediaLive::Channel.Scte20PlusEmbeddedDestinationSettings"
 [:map {:closed :true}],
 "AWS::MediaLive::Channel.HlsWebdavSettings"
 [:map
  {:closed :true}
  ["FilecacheDuration" {:optional true} [:ref "Integer"]]
  ["NumRetries" {:optional true} [:ref "Integer"]]
  ["RestartDelay" {:optional true} [:ref "Integer"]]
  ["ConnectionRetryInterval" {:optional true} [:ref "Integer"]]
  ["HttpTransferMode" {:optional true} [:ref "String"]]],
 "AWS::Glue::Connection.ConnectionInput"
 [:map
  {:closed :true}
  ["Description" {:optional true} [:ref "String"]]
  ["ConnectionType" {:optional true} [:ref "String"]]
  ["MatchCriteria" {:optional true} [:ref "StringList"]]
  ["PhysicalConnectionRequirements"
   {:optional true}
   [:ref "AWS::Glue::Connection.PhysicalConnectionRequirements"]]
  ["ConnectionProperties" {:optional true} [:ref "Json"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::CodeDeploy::DeploymentGroup.AutoRollbackConfiguration"
 [:map
  {:closed :true}
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["Events" {:optional true} [:ref "StringList"]]],
 "AWS::AppStream::Fleet.DomainJoinInfo"
 [:map
  {:closed :true}
  ["OrganizationalUnitDistinguishedName"
   {:optional true}
   [:ref "String"]]
  ["DirectoryName" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.Firehose"
 [:map
  {:closed :true}
  ["DeliveryStreamName" {:optional true} [:ref "String"]]
  ["Payload"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.Payload"]]
  ["Separator" {:optional true} [:ref "String"]]],
 "AWS::DynamoDB::Table.SSESpecification"
 [:map
  {:closed :true}
  ["KMSMasterKeyId" {:optional true} [:ref "String"]]
  ["SSEEnabled" {:optional true} [:ref "Boolean"]]
  ["SSEType" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinition.ResourceDownloadOwnerSetting"
 [:map
  {:closed :true}
  ["GroupOwner" {:optional true} [:ref "String"]]
  ["GroupPermission" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::ApplicationReferenceDataSource.CSVMappingParameters"
 [:map
  {:closed :true}
  ["RecordRowDelimiter" {:optional true} [:ref "String"]]
  ["RecordColumnDelimiter" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::Route.HeaderMatchMethod"
 [:map
  {:closed :true}
  ["Suffix" {:optional true} [:ref "String"]]
  ["Regex" {:optional true} [:ref "String"]]
  ["Exact" {:optional true} [:ref "String"]]
  ["Prefix" {:optional true} [:ref "String"]]
  ["Range" {:optional true} [:ref "AWS::AppMesh::Route.MatchRange"]]],
 "AWS::SES::ReceiptRule.BounceAction"
 [:map
  {:closed :true}
  ["Sender" {:optional true} [:ref "String"]]
  ["SmtpReplyCode" {:optional true} [:ref "String"]]
  ["Message" {:optional true} [:ref "String"]]
  ["TopicArn" {:optional true} [:ref "String"]]
  ["StatusCode" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.Eac3Settings"
 [:map
  {:closed :true}
  ["PassthroughControl" {:optional true} [:ref "String"]]
  ["LfeFilter" {:optional true} [:ref "String"]]
  ["StereoDownmix" {:optional true} [:ref "String"]]
  ["BitstreamMode" {:optional true} [:ref "String"]]
  ["SurroundMode" {:optional true} [:ref "String"]]
  ["SurroundExMode" {:optional true} [:ref "String"]]
  ["CodingMode" {:optional true} [:ref "String"]]
  ["DrcRf" {:optional true} [:ref "String"]]
  ["AttenuationControl" {:optional true} [:ref "String"]]
  ["PhaseControl" {:optional true} [:ref "String"]]
  ["LtRtSurroundMixLevel" {:optional true} [:ref "Double"]]
  ["Bitrate" {:optional true} [:ref "Double"]]
  ["DcFilter" {:optional true} [:ref "String"]]
  ["LtRtCenterMixLevel" {:optional true} [:ref "Double"]]
  ["DrcLine" {:optional true} [:ref "String"]]
  ["MetadataControl" {:optional true} [:ref "String"]]
  ["LoRoSurroundMixLevel" {:optional true} [:ref "Double"]]
  ["Dialnorm" {:optional true} [:ref "Integer"]]
  ["LoRoCenterMixLevel" {:optional true} [:ref "Double"]]
  ["LfeControl" {:optional true} [:ref "String"]]],
 "AWS::IoTAnalytics::Pipeline.RemoveAttributes"
 [:map
  {:closed :true}
  ["Next" {:optional true} [:ref "String"]]
  ["Attributes" {:optional true} [:ref "StringList"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::SSM::ResourceDataSync.SyncSource"
 [:map
  {:closed :true}
  ["SourceType" {:optional true} [:ref "String"]]
  ["AwsOrganizationsSource"
   {:optional true}
   [:ref "AWS::SSM::ResourceDataSync.AwsOrganizationsSource"]]
  ["IncludeFutureRegions" {:optional true} [:ref "Boolean"]]
  ["SourceRegions" {:optional true} [:ref "StringList"]]],
 "AWS::WAFv2::RuleGroup.IPSetReferenceStatement"
 [:map
  {:closed :true}
  ["Arn" {:optional true} [:ref "String"]]
  ["IPSetForwardedIPConfig"
   {:optional true}
   [:ref "AWS::WAFv2::RuleGroup.IPSetForwardedIPConfiguration"]]],
 "AWS::S3::Bucket.PublicAccessBlockConfiguration"
 [:map
  {:closed :true}
  ["BlockPublicAcls" {:optional true} [:ref "Boolean"]]
  ["BlockPublicPolicy" {:optional true} [:ref "Boolean"]]
  ["IgnorePublicAcls" {:optional true} [:ref "Boolean"]]
  ["RestrictPublicBuckets" {:optional true} [:ref "Boolean"]]],
 "AWS::S3::Bucket.Destination"
 [:map
  {:closed :true}
  ["BucketAccountId" {:optional true} [:ref "String"]]
  ["BucketArn" {:optional true} [:ref "String"]]
  ["Format" {:optional true} [:ref "String"]]
  ["Prefix" {:optional true} [:ref "String"]]],
 "AWS::StepFunctions::StateMachine.TagsEntry"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.KerberosAttributes"
 [:map
  {:closed :true}
  ["ADDomainJoinPassword" {:optional true} [:ref "String"]]
  ["ADDomainJoinUser" {:optional true} [:ref "String"]]
  ["CrossRealmTrustPrincipalPassword" {:optional true} [:ref "String"]]
  ["KdcAdminPassword" {:optional true} [:ref "String"]]
  ["Realm" {:optional true} [:ref "String"]]],
 "AWS::Athena::WorkGroup.ResultConfigurationUpdates"
 [:map
  {:closed :true}
  ["EncryptionConfiguration"
   {:optional true}
   [:ref "AWS::Athena::WorkGroup.EncryptionConfiguration"]]
  ["OutputLocation" {:optional true} [:ref "String"]]
  ["RemoveEncryptionConfiguration" {:optional true} [:ref "Boolean"]]
  ["RemoveOutputLocation" {:optional true} [:ref "Boolean"]]],
 "AWS::AppMesh::VirtualGateway.VirtualGatewayHealthCheckPolicy"
 [:map
  {:closed :true}
  ["Path" {:optional true} [:ref "String"]]
  ["UnhealthyThreshold" {:optional true} [:ref "Integer"]]
  ["Port" {:optional true} [:ref "Integer"]]
  ["HealthyThreshold" {:optional true} [:ref "Integer"]]
  ["TimeoutMillis" {:optional true} [:ref "Integer"]]
  ["Protocol" {:optional true} [:ref "String"]]
  ["IntervalMillis" {:optional true} [:ref "Integer"]]],
 "AWS::Cognito::UserPool.AdminCreateUserConfig"
 [:map
  {:closed :true}
  ["InviteMessageTemplate"
   {:optional true}
   [:ref "AWS::Cognito::UserPool.InviteMessageTemplate"]]
  ["UnusedAccountValidityDays" {:optional true} [:ref "Integer"]]
  ["AllowAdminCreateUserOnly" {:optional true} [:ref "Boolean"]]],
 "AWS::S3::Bucket.BucketEncryption"
 [:map
  {:closed :true}
  ["ServerSideEncryptionConfiguration"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::S3::Bucket.ServerSideEncryptionRule"]]
    "Fn::If"]]],
 "AWS::MSK::Cluster.LoggingInfo"
 [:map
  {:closed :true}
  ["BrokerLogs"
   {:optional true}
   [:ref "AWS::MSK::Cluster.BrokerLogs"]]],
 "AWS::ServiceCatalog::PortfolioShare"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::PortfolioShare"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AccountId" {:optional true} [:ref "String"]]
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["PortfolioId" {:optional true} [:ref "String"]]]]],
 "AWS::Events::Rule.BatchArrayProperties"
 [:map {:closed :true} ["Size" {:optional true} [:ref "Integer"]]],
 "AWS::CloudFront::Distribution.DefaultCacheBehavior"
 [:map
  {:closed :true}
  ["CachedMethods" {:optional true} [:ref "StringList"]]
  ["MinTTL" {:optional true} [:ref "Double"]]
  ["Compress" {:optional true} [:ref "Boolean"]]
  ["CachePolicyId" {:optional true} [:ref "String"]]
  ["OriginRequestPolicyId" {:optional true} [:ref "String"]]
  ["RealtimeLogConfigArn" {:optional true} [:ref "String"]]
  ["TrustedSigners" {:optional true} [:ref "StringList"]]
  ["ForwardedValues"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.ForwardedValues"]]
  ["ViewerProtocolPolicy" {:optional true} [:ref "String"]]
  ["LambdaFunctionAssociations"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::CloudFront::Distribution.LambdaFunctionAssociation"]]
    "Fn::If"]]
  ["AllowedMethods" {:optional true} [:ref "StringList"]]
  ["TargetOriginId" {:optional true} [:ref "String"]]
  ["FieldLevelEncryptionId" {:optional true} [:ref "String"]]
  ["DefaultTTL" {:optional true} [:ref "Double"]]
  ["MaxTTL" {:optional true} [:ref "Double"]]
  ["SmoothStreaming" {:optional true} [:ref "Boolean"]]],
 "AWS::WAFv2::WebACL.ExcludedRule"
 [:map {:closed :true} ["Name" {:optional true} [:ref "String"]]],
 "AWS::Lambda::EventInvokeConfig.OnSuccess"
 [:map
  {:closed :true}
  ["Destination" {:optional true} [:ref "String"]]],
 "AWS::PinpointEmail::ConfigurationSet"
 [:map
  ["Type" [:= "AWS::PinpointEmail::ConfigurationSet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SendingOptions"
     {:optional true}
     [:ref "AWS::PinpointEmail::ConfigurationSet.SendingOptions"]]
    ["TrackingOptions"
     {:optional true}
     [:ref "AWS::PinpointEmail::ConfigurationSet.TrackingOptions"]]
    ["ReputationOptions"
     {:optional true}
     [:ref "AWS::PinpointEmail::ConfigurationSet.ReputationOptions"]]
    ["DeliveryOptions"
     {:optional true}
     [:ref "AWS::PinpointEmail::ConfigurationSet.DeliveryOptions"]]
    ["Tags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::PinpointEmail::ConfigurationSet.Tags"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::S3::Bucket.QueueConfiguration"
 [:map
  {:closed :true}
  ["Event" {:optional true} [:ref "String"]]
  ["Filter"
   {:optional true}
   [:ref "AWS::S3::Bucket.NotificationFilter"]]
  ["Queue" {:optional true} [:ref "String"]]],
 "AWS::DynamoDB::Table"
 [:map
  ["Type" [:= "AWS::DynamoDB::Table"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SSESpecification"
     {:optional true}
     [:ref "AWS::DynamoDB::Table.SSESpecification"]]
    ["BillingMode" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["StreamSpecification"
     {:optional true}
     [:ref "AWS::DynamoDB::Table.StreamSpecification"]]
    ["GlobalSecondaryIndexes"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::DynamoDB::Table.GlobalSecondaryIndex"]]
      "Fn::If"]]
    ["KeySchema"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::DynamoDB::Table.KeySchema"]]
      "Fn::If"]]
    ["ProvisionedThroughput"
     {:optional true}
     [:ref "AWS::DynamoDB::Table.ProvisionedThroughput"]]
    ["LocalSecondaryIndexes"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::DynamoDB::Table.LocalSecondaryIndex"]]
      "Fn::If"]]
    ["PointInTimeRecoverySpecification"
     {:optional true}
     [:ref "AWS::DynamoDB::Table.PointInTimeRecoverySpecification"]]
    ["TableName" {:optional true} [:ref "String"]]
    ["AttributeDefinitions"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::DynamoDB::Table.AttributeDefinition"]]
      "Fn::If"]]
    ["TimeToLiveSpecification"
     {:optional true}
     [:ref "AWS::DynamoDB::Table.TimeToLiveSpecification"]]]]],
 "AWS::SageMaker::Model.ContainerDefinition"
 [:map
  {:closed :true}
  ["ContainerHostname" {:optional true} [:ref "String"]]
  ["ModelPackageName" {:optional true} [:ref "String"]]
  ["Mode" {:optional true} [:ref "String"]]
  ["Environment" {:optional true} [:ref "Json"]]
  ["ModelDataUrl" {:optional true} [:ref "String"]]
  ["Image" {:optional true} [:ref "String"]]],
 "AWS::EC2::LocalGatewayRouteTableVPCAssociation"
 [:map
  ["Type" [:= "AWS::EC2::LocalGatewayRouteTableVPCAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["LocalGatewayRouteTableId" {:optional true} [:ref "String"]]
    ["VpcId" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:ref "AWS::EC2::LocalGatewayRouteTableVPCAssociation.Tags"]]]]],
 "AWS::MediaLive::Channel.FrameCaptureGroupSettings"
 [:map
  {:closed :true}
  ["Destination"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.OutputLocationRef"]]],
 "AWS::CodeBuild::ReportGroup.ReportExportConfig"
 [:map
  {:closed :true}
  ["S3Destination"
   {:optional true}
   [:ref "AWS::CodeBuild::ReportGroup.S3ReportExportConfig"]]
  ["ExportConfigType" {:optional true} [:ref "String"]]],
 "AWS::EC2::TransitGatewayAttachment"
 [:map
  ["Type" [:= "AWS::EC2::TransitGatewayAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TransitGatewayId" {:optional true} [:ref "String"]]
    ["VpcId" {:optional true} [:ref "String"]]
    ["SubnetIds" {:optional true} [:ref "StringList"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::MediaLive::Channel.VideoSelector"
 [:map
  {:closed :true}
  ["SelectorSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.VideoSelectorSettings"]]
  ["ColorSpace" {:optional true} [:ref "String"]]
  ["ColorSpaceUsage" {:optional true} [:ref "String"]]],
 "AWS::Glue::Trigger.Condition"
 [:map
  {:closed :true}
  ["CrawlerName" {:optional true} [:ref "String"]]
  ["State" {:optional true} [:ref "String"]]
  ["CrawlState" {:optional true} [:ref "String"]]
  ["LogicalOperator" {:optional true} [:ref "String"]]
  ["JobName" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.Action"
 [:map
  {:closed :true}
  ["AuthenticateCognitoConfig"
   {:optional true}
   [:ref
    "AWS::ElasticLoadBalancingV2::ListenerRule.AuthenticateCognitoConfig"]]
  ["AuthenticateOidcConfig"
   {:optional true}
   [:ref
    "AWS::ElasticLoadBalancingV2::ListenerRule.AuthenticateOidcConfig"]]
  ["FixedResponseConfig"
   {:optional true}
   [:ref
    "AWS::ElasticLoadBalancingV2::ListenerRule.FixedResponseConfig"]]
  ["ForwardConfig"
   {:optional true}
   [:ref "AWS::ElasticLoadBalancingV2::ListenerRule.ForwardConfig"]]
  ["Order" {:optional true} [:ref "Integer"]]
  ["RedirectConfig"
   {:optional true}
   [:ref "AWS::ElasticLoadBalancingV2::ListenerRule.RedirectConfig"]]
  ["TargetGroupArn" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::EC2::NatGateway"
 [:map
  ["Type" [:= "AWS::EC2::NatGateway"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AllocationId" {:optional true} [:ref "String"]]
    ["SubnetId" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::GameLift::GameServerGroup.Tags"
 [:map
  {:closed :true}
  ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.ReferenceSchema"
 [:map
  {:closed :true}
  ["RecordEncoding" {:optional true} [:ref "String"]]
  ["RecordColumns"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.RecordColumn"]]
    "Fn::If"]]
  ["RecordFormat"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.RecordFormat"]]],
 "AWS::EMR::Cluster.Configuration"
 [:map
  {:closed :true}
  ["Classification" {:optional true} [:ref "String"]]
  ["ConfigurationProperties" {:optional true} [:ref "StringMap"]]
  ["Configurations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EMR::Cluster.Configuration"]]
    "Fn::If"]]],
 "AWS::MediaLive::Channel.DvbNitSettings"
 [:map
  {:closed :true}
  ["NetworkName" {:optional true} [:ref "String"]]
  ["RepInterval" {:optional true} [:ref "Integer"]]
  ["NetworkId" {:optional true} [:ref "Integer"]]],
 "AWS::CodeStarNotifications::NotificationRule"
 [:map
  ["Type" [:= "AWS::CodeStarNotifications::NotificationRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["EventTypeIds" {:optional true} [:ref "StringList"]]
    ["Status" {:optional true} [:ref "String"]]
    ["DetailType" {:optional true} [:ref "String"]]
    ["Resource" {:optional true} [:ref "String"]]
    ["Targets"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodeStarNotifications::NotificationRule.Target"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::ECS::TaskDefinition.Volume"
 [:map
  {:closed :true}
  ["DockerVolumeConfiguration"
   {:optional true}
   [:ref "AWS::ECS::TaskDefinition.DockerVolumeConfiguration"]]
  ["EFSVolumeConfiguration"
   {:optional true}
   [:ref "AWS::ECS::TaskDefinition.EFSVolumeConfiguration"]]
  ["Host"
   {:optional true}
   [:ref "AWS::ECS::TaskDefinition.HostVolumeProperties"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Segment.Behavior"
 [:map
  {:closed :true}
  ["Recency"
   {:optional true}
   [:ref "AWS::Pinpoint::Segment.Recency"]]],
 "AWS::DLM::LifecyclePolicy.CrossRegionCopyRetainRule"
 [:map
  {:closed :true}
  ["IntervalUnit" {:optional true} [:ref "String"]]
  ["Interval" {:optional true} [:ref "Integer"]]],
 "AWS::GroundStation::DataflowEndpointGroup.EndpointDetails"
 [:map
  {:closed :true}
  ["SecurityDetails"
   {:optional true}
   [:ref "AWS::GroundStation::DataflowEndpointGroup.SecurityDetails"]]
  ["Endpoint"
   {:optional true}
   [:ref
    "AWS::GroundStation::DataflowEndpointGroup.DataflowEndpoint"]]],
 "AWS::MediaLive::Channel.CaptionDescription"
 [:map
  {:closed :true}
  ["DestinationSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.CaptionDestinationSettings"]]
  ["LanguageCode" {:optional true} [:ref "String"]]
  ["LanguageDescription" {:optional true} [:ref "String"]]
  ["CaptionSelectorName" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualNode.ServiceDiscovery"
 [:map
  {:closed :true}
  ["DNS"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.DnsServiceDiscovery"]]
  ["AWSCloudMap"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.AwsCloudMapServiceDiscovery"]]],
 "AWS::MediaLive::Input.InputSourceRequest"
 [:map
  {:closed :true}
  ["Username" {:optional true} [:ref "String"]]
  ["PasswordParam" {:optional true} [:ref "String"]]
  ["Url" {:optional true} [:ref "String"]]],
 "AWS::WAFRegional::WebACL"
 [:map
  ["Type" [:= "AWS::WAFRegional::WebACL"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MetricName" {:optional true} [:ref "String"]]
    ["DefaultAction"
     {:optional true}
     [:ref "AWS::WAFRegional::WebACL.Action"]]
    ["Rules"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::WAFRegional::WebACL.Rule"]]
      "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::OpsWorks::Stack.Source"
 [:map
  {:closed :true}
  ["Password" {:optional true} [:ref "String"]]
  ["Revision" {:optional true} [:ref "String"]]
  ["SshKey" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Url" {:optional true} [:ref "String"]]
  ["Username" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::Distribution.CacheBehavior"
 [:map
  {:closed :true}
  ["CachedMethods" {:optional true} [:ref "StringList"]]
  ["MinTTL" {:optional true} [:ref "Double"]]
  ["Compress" {:optional true} [:ref "Boolean"]]
  ["CachePolicyId" {:optional true} [:ref "String"]]
  ["OriginRequestPolicyId" {:optional true} [:ref "String"]]
  ["RealtimeLogConfigArn" {:optional true} [:ref "String"]]
  ["PathPattern" {:optional true} [:ref "String"]]
  ["TrustedSigners" {:optional true} [:ref "StringList"]]
  ["ForwardedValues"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.ForwardedValues"]]
  ["ViewerProtocolPolicy" {:optional true} [:ref "String"]]
  ["LambdaFunctionAssociations"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::CloudFront::Distribution.LambdaFunctionAssociation"]]
    "Fn::If"]]
  ["AllowedMethods" {:optional true} [:ref "StringList"]]
  ["TargetOriginId" {:optional true} [:ref "String"]]
  ["FieldLevelEncryptionId" {:optional true} [:ref "String"]]
  ["DefaultTTL" {:optional true} [:ref "Double"]]
  ["MaxTTL" {:optional true} [:ref "Double"]]
  ["SmoothStreaming" {:optional true} [:ref "Boolean"]]],
 "AWS::ElasticLoadBalancingV2::ListenerRule.HostHeaderConfig"
 [:map
  {:closed :true}
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::Glue::SecurityConfiguration.S3Encryptions"
 [:map {:closed :true}],
 "AWS::Macie::FindingsFilter.FindingCriteria"
 [:map
  {:closed :true}
  ["Criterion"
   {:optional true}
   [:ref "AWS::Macie::FindingsFilter.Criterion"]]],
 "AWS::KinesisAnalytics::ApplicationOutput.KinesisStreamsOutput"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]
  ["RoleARN" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::Route.GrpcRouteMatch"
 [:map
  {:closed :true}
  ["ServiceName" {:optional true} [:ref "String"]]
  ["Metadata"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::AppMesh::Route.GrpcRouteMetadata"]]
    "Fn::If"]]
  ["MethodName" {:optional true} [:ref "String"]]],
 "AWS::ACMPCA::CertificateAuthority"
 [:map
  ["Type" [:= "AWS::ACMPCA::CertificateAuthority"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Type" {:optional true} [:ref "String"]]
    ["KeyAlgorithm" {:optional true} [:ref "String"]]
    ["SigningAlgorithm" {:optional true} [:ref "String"]]
    ["Subject"
     {:optional true}
     [:ref "AWS::ACMPCA::CertificateAuthority.Subject"]]
    ["RevocationConfiguration"
     {:optional true}
     [:ref
      "AWS::ACMPCA::CertificateAuthority.RevocationConfiguration"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::WAFv2::WebACL.OverrideAction"
 [:map
  {:closed :true}
  ["Count" {:optional true} [:ref "Json"]]
  ["None" {:optional true} [:ref "Json"]]],
 "AWS::MediaLive::Channel.PassThroughSettings" [:map {:closed :true}],
 "AWS::Redshift::ClusterParameterGroup"
 [:map
  ["Type" [:= "AWS::Redshift::ClusterParameterGroup"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["ParameterGroupFamily" {:optional true} [:ref "String"]]
    ["Parameters"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Redshift::ClusterParameterGroup.Parameter"]]
      "Fn::If"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::NetworkManager::Link"
 [:map
  ["Type" [:= "AWS::NetworkManager::Link"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GlobalNetworkId" {:optional true} [:ref "String"]]
    ["SiteId" {:optional true} [:ref "String"]]
    ["Bandwidth"
     {:optional true}
     [:ref "AWS::NetworkManager::Link.Bandwidth"]]
    ["Provider" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Type" {:optional true} [:ref "String"]]]]],
 "AWS::SageMaker::MonitoringSchedule.MonitoringInputs"
 [:map
  {:closed :true}
  ["MonitoringInputs"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::SageMaker::MonitoringSchedule.MonitoringInput"]]
    "Fn::If"]]],
 "AWS::CodeDeploy::DeploymentGroup.Alarm"
 [:map {:closed :true} ["Name" {:optional true} [:ref "String"]]],
 "AWS::EMR::Step"
 [:map
  ["Type" [:= "AWS::EMR::Step"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ActionOnFailure" {:optional true} [:ref "String"]]
    ["HadoopJarStep"
     {:optional true}
     [:ref "AWS::EMR::Step.HadoopJarStepConfig"]]
    ["JobFlowId" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::MSK::Cluster.ConfigurationInfo"
 [:map
  {:closed :true}
  ["Revision" {:optional true} [:ref "Integer"]]
  ["Arn" {:optional true} [:ref "String"]]],
 "AWS::IoT1Click::Project.DeviceTemplate"
 [:map
  {:closed :true}
  ["DeviceType" {:optional true} [:ref "String"]]
  ["CallbackOverrides" {:optional true} [:ref "Json"]]],
 "AWS::CloudFront::Distribution.Restrictions"
 [:map
  {:closed :true}
  ["GeoRestriction"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.GeoRestriction"]]],
 "AWS::KinesisAnalyticsV2::Application.Input"
 [:map
  {:closed :true}
  ["NamePrefix" {:optional true} [:ref "String"]]
  ["InputSchema"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::Application.InputSchema"]]
  ["KinesisStreamsInput"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::Application.KinesisStreamsInput"]]
  ["KinesisFirehoseInput"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::Application.KinesisFirehoseInput"]]
  ["InputProcessingConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::Application.InputProcessingConfiguration"]]
  ["InputParallelism"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::Application.InputParallelism"]]],
 "AWS::ECS::TaskDefinition.AuthorizationConfig"
 [:map
  {:closed :true}
  ["IAM" {:optional true} [:ref "String"]]
  ["AccessPointId" {:optional true} [:ref "String"]]],
 "AWS::EKS::Nodegroup.ScalingConfig"
 [:map
  {:closed :true}
  ["MinSize" {:optional true} [:ref "Double"]]
  ["DesiredSize" {:optional true} [:ref "Double"]]
  ["MaxSize" {:optional true} [:ref "Double"]]],
 "AWS::Batch::JobDefinition.Volumes"
 [:map
  {:closed :true}
  ["Host"
   {:optional true}
   [:ref "AWS::Batch::JobDefinition.VolumesHost"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::DetectorModel.State"
 [:map
  {:closed :true}
  ["OnInput"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.OnInput"]]
  ["OnExit"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.OnExit"]]
  ["StateName" {:optional true} [:ref "String"]]
  ["OnEnter"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.OnEnter"]]],
 "AWS::Greengrass::FunctionDefinitionVersion"
 [:map
  ["Type" [:= "AWS::Greengrass::FunctionDefinitionVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DefaultConfig"
     {:optional true}
     [:ref "AWS::Greengrass::FunctionDefinitionVersion.DefaultConfig"]]
    ["Functions"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Greengrass::FunctionDefinitionVersion.Function"]]
      "Fn::If"]]
    ["FunctionDefinitionId" {:optional true} [:ref "String"]]]]],
 "AWS::ECS::TaskDefinition.LogConfiguration"
 [:map
  {:closed :true}
  ["LogDriver" {:optional true} [:ref "String"]]
  ["Options" {:optional true} [:ref "StringMap"]]
  ["SecretOptions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.Secret"]]
    "Fn::If"]]],
 "AWS::Logs::SubscriptionFilter"
 [:map
  ["Type" [:= "AWS::Logs::SubscriptionFilter"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DestinationArn" {:optional true} [:ref "String"]]
    ["FilterPattern" {:optional true} [:ref "String"]]
    ["LogGroupName" {:optional true} [:ref "String"]]
    ["RoleArn" {:optional true} [:ref "String"]]]]],
 "AWS::ECS::TaskDefinition.Tmpfs"
 [:map
  {:closed :true}
  ["ContainerPath" {:optional true} [:ref "String"]]
  ["MountOptions" {:optional true} [:ref "StringList"]]
  ["Size" {:optional true} [:ref "Integer"]]],
 "AWS::EC2::TransitGatewayRouteTablePropagation"
 [:map
  ["Type" [:= "AWS::EC2::TransitGatewayRouteTablePropagation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TransitGatewayRouteTableId" {:optional true} [:ref "String"]]
    ["TransitGatewayAttachmentId" {:optional true} [:ref "String"]]]]],
 "AWS::Cassandra::Table.ProvisionedThroughput"
 [:map
  {:closed :true}
  ["ReadCapacityUnits" {:optional true} [:ref "Integer"]]
  ["WriteCapacityUnits" {:optional true} [:ref "Integer"]]],
 "AWS::EKS::Nodegroup.LaunchTemplateSpecification"
 [:map
  {:closed :true}
  ["Version" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::IoTEvents::Input.InputDefinition"
 [:map
  {:closed :true}
  ["Attributes"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::IoTEvents::Input.Attribute"]]
    "Fn::If"]]],
 "AWS::KinesisFirehose::DeliveryStream.Processor"
 [:map
  {:closed :true}
  ["Parameters"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::KinesisFirehose::DeliveryStream.ProcessorParameter"]]
    "Fn::If"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::Events::Rule.BatchRetryStrategy"
 [:map {:closed :true} ["Attempts" {:optional true} [:ref "Integer"]]],
 "AWS::WAFRegional::SizeConstraintSet.SizeConstraint"
 [:map
  {:closed :true}
  ["ComparisonOperator" {:optional true} [:ref "String"]]
  ["Size" {:optional true} [:ref "Integer"]]
  ["TextTransformation" {:optional true} [:ref "String"]]
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFRegional::SizeConstraintSet.FieldToMatch"]]],
 "AWS::RoboMaker::RobotApplication.RobotSoftwareSuite"
 [:map
  {:closed :true}
  ["Version" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ConnectorDefinition"
 [:map
  ["Type" [:= "AWS::Greengrass::ConnectorDefinition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["InitialVersion"
     {:optional true}
     [:ref
      "AWS::Greengrass::ConnectorDefinition.ConnectorDefinitionVersion"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::CodeCommit::Repository.S3"
 [:map
  {:closed :true}
  ["ObjectVersion" {:optional true} [:ref "String"]]
  ["Bucket" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPoolClient.AnalyticsConfiguration"
 [:map
  {:closed :true}
  ["UserDataShared" {:optional true} [:ref "Boolean"]]
  ["ExternalId" {:optional true} [:ref "String"]]
  ["ApplicationId" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]],
 "AWS::CodeGuruReviewer::RepositoryAssociation"
 [:map
  ["Type" [:= "AWS::CodeGuruReviewer::RepositoryAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Type" {:optional true} [:ref "String"]]
    ["Owner" {:optional true} [:ref "String"]]
    ["ConnectionArn" {:optional true} [:ref "String"]]]]],
 "AWS::AppSync::GraphQLApi.AdditionalAuthenticationProviders"
 [:map {:closed :true}],
 "AWS::S3::Bucket.RedirectAllRequestsTo"
 [:map
  {:closed :true}
  ["HostName" {:optional true} [:ref "String"]]
  ["Protocol" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::ApiKey"
 [:map
  ["Type" [:= "AWS::ApiGateway::ApiKey"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CustomerId" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["GenerateDistinctId" {:optional true} [:ref "Boolean"]]
    ["Name" {:optional true} [:ref "String"]]
    ["StageKeys"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::ApiGateway::ApiKey.StageKey"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Value" {:optional true} [:ref "String"]]]]],
 "AWS::AppMesh::VirtualNode.PortMapping"
 [:map
  {:closed :true}
  ["Port" {:optional true} [:ref "Integer"]]
  ["Protocol" {:optional true} [:ref "String"]]],
 "AWS::IAM::User.Policy"
 [:map
  {:closed :true}
  ["PolicyDocument" {:optional true} [:ref "Json"]]
  ["PolicyName" {:optional true} [:ref "String"]]],
 "AWS::Events::Rule.KinesisParameters"
 [:map
  {:closed :true}
  ["PartitionKeyPath" {:optional true} [:ref "String"]]],
 "AWS::Glue::Job.ExecutionProperty"
 [:map
  {:closed :true}
  ["MaxConcurrentRuns" {:optional true} [:ref "Double"]]],
 "AWS::SES::Template.Template"
 [:map
  {:closed :true}
  ["HtmlPart" {:optional true} [:ref "String"]]
  ["TextPart" {:optional true} [:ref "String"]]
  ["TemplateName" {:optional true} [:ref "String"]]
  ["SubjectPart" {:optional true} [:ref "String"]]],
 "AWS::ManagedBlockchain::Member.NetworkFrameworkConfiguration"
 [:map
  {:closed :true}
  ["NetworkFabricConfiguration"
   {:optional true}
   [:ref
    "AWS::ManagedBlockchain::Member.NetworkFabricConfiguration"]]],
 "AWS::KinesisAnalyticsV2::Application.InputParallelism"
 [:map {:closed :true} ["Count" {:optional true} [:ref "Integer"]]],
 "AWS::IoT::Policy"
 [:map
  ["Type" [:= "AWS::IoT::Policy"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PolicyDocument" {:optional true} [:ref "Json"]]
    ["PolicyName" {:optional true} [:ref "String"]]]]],
 "AWS::Lambda::Function.TracingConfig"
 [:map {:closed :true} ["Mode" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::Application.CSVMappingParameters"
 [:map
  {:closed :true}
  ["RecordRowDelimiter" {:optional true} [:ref "String"]]
  ["RecordColumnDelimiter" {:optional true} [:ref "String"]]],
 "AWS::ResourceGroups::Group.TagFilter"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::EC2::SpotFleet.SpotFleetRequestConfigData"
 [:map
  {:closed :true}
  ["ExcessCapacityTerminationPolicy" {:optional true} [:ref "String"]]
  ["InstanceInterruptionBehavior" {:optional true} [:ref "String"]]
  ["ValidFrom" {:optional true} [:ref "String"]]
  ["IamFleetRole" {:optional true} [:ref "String"]]
  ["ValidUntil" {:optional true} [:ref "String"]]
  ["LaunchSpecifications"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::EC2::SpotFleet.SpotFleetLaunchSpecification"]]
    "Fn::If"]]
  ["TerminateInstancesWithExpiration"
   {:optional true}
   [:ref "Boolean"]]
  ["TargetCapacity" {:optional true} [:ref "Integer"]]
  ["LaunchTemplateConfigs"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::EC2::SpotFleet.LaunchTemplateConfig"]]
    "Fn::If"]]
  ["LoadBalancersConfig"
   {:optional true}
   [:ref "AWS::EC2::SpotFleet.LoadBalancersConfig"]]
  ["Type" {:optional true} [:ref "String"]]
  ["SpotPrice" {:optional true} [:ref "String"]]
  ["AllocationStrategy" {:optional true} [:ref "String"]]
  ["ReplaceUnhealthyInstances" {:optional true} [:ref "Boolean"]]],
 "AWS::MediaConvert::Queue"
 [:map
  ["Type" [:= "AWS::MediaConvert::Queue"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Status" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["PricingPlan" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::EC2Fleet.FleetLaunchTemplateConfigRequest"
 [:map
  {:closed :true}
  ["LaunchTemplateSpecification"
   {:optional true}
   [:ref "AWS::EC2::EC2Fleet.FleetLaunchTemplateSpecificationRequest"]]
  ["Overrides"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::EC2::EC2Fleet.FleetLaunchTemplateOverridesRequest"]]
    "Fn::If"]]],
 "AWS::DynamoDB::Table.StreamSpecification"
 [:map
  {:closed :true}
  ["StreamViewType" {:optional true} [:ref "String"]]],
 "AWS::EC2::LaunchTemplate.SpotOptions"
 [:map
  {:closed :true}
  ["SpotInstanceType" {:optional true} [:ref "String"]]
  ["InstanceInterruptionBehavior" {:optional true} [:ref "String"]]
  ["MaxPrice" {:optional true} [:ref "String"]]
  ["BlockDurationMinutes" {:optional true} [:ref "Integer"]]
  ["ValidUntil" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::Application.KinesisFirehoseInput"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]],
 "AWS::CloudWatch::CompositeAlarm"
 [:map
  ["Type" [:= "AWS::CloudWatch::CompositeAlarm"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AlarmName" {:optional true} [:ref "String"]]
    ["AlarmRule" {:optional true} [:ref "String"]]
    ["AlarmDescription" {:optional true} [:ref "String"]]
    ["ActionsEnabled" {:optional true} [:ref "Boolean"]]
    ["OKActions" {:optional true} [:ref "StringList"]]
    ["AlarmActions" {:optional true} [:ref "StringList"]]
    ["InsufficientDataActions"
     {:optional true}
     [:ref "StringList"]]]]],
 "AWS::SES::ReceiptRule.WorkmailAction"
 [:map
  {:closed :true}
  ["TopicArn" {:optional true} [:ref "String"]]
  ["OrganizationArn" {:optional true} [:ref "String"]]],
 "AWS::Glue::SecurityConfiguration.JobBookmarksEncryption"
 [:map
  {:closed :true}
  ["KmsKeyArn" {:optional true} [:ref "String"]]
  ["JobBookmarksEncryptionMode" {:optional true} [:ref "String"]]],
 "AWS::Lambda::Alias.VersionWeight"
 [:map
  {:closed :true}
  ["FunctionVersion" {:optional true} [:ref "String"]]
  ["FunctionWeight" {:optional true} [:ref "Double"]]],
 "AWS::MSK::Cluster.Tls"
 [:map
  {:closed :true}
  ["CertificateAuthorityArnList"
   {:optional true}
   [:ref "StringList"]]],
 "AWS::AppMesh::VirtualNode.Logging"
 [:map
  {:closed :true}
  ["AccessLog"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.AccessLog"]]],
 "AWS::ECS::TaskDefinition.MountPoint"
 [:map
  {:closed :true}
  ["ContainerPath" {:optional true} [:ref "String"]]
  ["ReadOnly" {:optional true} [:ref "Boolean"]]
  ["SourceVolume" {:optional true} [:ref "String"]]],
 "AWS::GroundStation::MissionProfile.DataflowEdge"
 [:map
  {:closed :true}
  ["Source" {:optional true} [:ref "String"]]
  ["Destination" {:optional true} [:ref "String"]]],
 "AWS::Lambda::Version"
 [:map
  ["Type" [:= "AWS::Lambda::Version"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CodeSha256" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["FunctionName" {:optional true} [:ref "String"]]
    ["ProvisionedConcurrencyConfig"
     {:optional true}
     [:ref
      "AWS::Lambda::Version.ProvisionedConcurrencyConfiguration"]]]]],
 "AWS::ElasticBeanstalk::ApplicationVersion"
 [:map
  ["Type" [:= "AWS::ElasticBeanstalk::ApplicationVersion"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ApplicationName" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["SourceBundle"
     {:optional true}
     [:ref
      "AWS::ElasticBeanstalk::ApplicationVersion.SourceBundle"]]]]],
 "AWS::KinesisAnalytics::Application.RecordFormat"
 [:map
  {:closed :true}
  ["MappingParameters"
   {:optional true}
   [:ref "AWS::KinesisAnalytics::Application.MappingParameters"]]
  ["RecordFormatType" {:optional true} [:ref "String"]]],
 "AWS::EC2::LaunchTemplate.CreditSpecification"
 [:map
  {:closed :true}
  ["CpuCredits" {:optional true} [:ref "String"]]],
 "AWS::ApiGatewayV2::Api.BodyS3Location"
 [:map
  {:closed :true}
  ["Etag" {:optional true} [:ref "String"]]
  ["Bucket" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::ApplicationInsights::Application.ComponentConfiguration"
 [:map
  {:closed :true}
  ["ConfigurationDetails"
   {:optional true}
   [:ref "AWS::ApplicationInsights::Application.ConfigurationDetails"]]
  ["SubComponentTypeConfigurations"
   {:optional true}
   [:or
    [:sequential
     [:ref
      "AWS::ApplicationInsights::Application.SubComponentTypeConfiguration"]]
    "Fn::If"]]],
 "AWS::Cassandra::Table"
 [:map
  ["Type" [:= "AWS::Cassandra::Table"]]
  ["Properties"
   [:map
    {:closed :true}
    ["KeyspaceName" {:optional true} [:ref "String"]]
    ["TableName" {:optional true} [:ref "String"]]
    ["RegularColumns"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Cassandra::Table.Column"]]
      "Fn::If"]]
    ["PartitionKeyColumns"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Cassandra::Table.Column"]]
      "Fn::If"]]
    ["ClusteringKeyColumns"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Cassandra::Table.ClusteringKeyColumn"]]
      "Fn::If"]]
    ["BillingMode"
     {:optional true}
     [:ref "AWS::Cassandra::Table.BillingMode"]]]]],
 "AWS::Pinpoint::Campaign"
 [:map
  ["Type" [:= "AWS::Pinpoint::Campaign"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TreatmentName" {:optional true} [:ref "String"]]
    ["Schedule"
     {:optional true}
     [:ref "AWS::Pinpoint::Campaign.Schedule"]]
    ["CampaignHook"
     {:optional true}
     [:ref "AWS::Pinpoint::Campaign.CampaignHook"]]
    ["Tags" {:optional true} [:ref "Json"]]
    ["MessageConfiguration"
     {:optional true}
     [:ref "AWS::Pinpoint::Campaign.MessageConfiguration"]]
    ["SegmentId" {:optional true} [:ref "String"]]
    ["Limits" {:optional true} [:ref "AWS::Pinpoint::Campaign.Limits"]]
    ["AdditionalTreatments"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::Pinpoint::Campaign.WriteTreatmentResource"]]
      "Fn::If"]]
    ["TreatmentDescription" {:optional true} [:ref "String"]]
    ["IsPaused" {:optional true} [:ref "Boolean"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["ApplicationId" {:optional true} [:ref "String"]]
    ["HoldoutPercent" {:optional true} [:ref "Integer"]]
    ["SegmentVersion" {:optional true} [:ref "Integer"]]]]],
 "AWS::CodePipeline::Webhook"
 [:map
  ["Type" [:= "AWS::CodePipeline::Webhook"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AuthenticationConfiguration"
     {:optional true}
     [:ref "AWS::CodePipeline::Webhook.WebhookAuthConfiguration"]]
    ["Filters"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::CodePipeline::Webhook.WebhookFilterRule"]]
      "Fn::If"]]
    ["Authentication" {:optional true} [:ref "String"]]
    ["TargetPipeline" {:optional true} [:ref "String"]]
    ["TargetAction" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["TargetPipelineVersion" {:optional true} [:ref "Integer"]]
    ["RegisterWithThirdParty" {:optional true} [:ref "Boolean"]]]]],
 "AWS::S3::AccessPoint.PublicAccessBlockConfiguration"
 [:map
  {:closed :true}
  ["BlockPublicAcls" {:optional true} [:ref "Boolean"]]
  ["IgnorePublicAcls" {:optional true} [:ref "Boolean"]]
  ["BlockPublicPolicy" {:optional true} [:ref "Boolean"]]
  ["RestrictPublicBuckets" {:optional true} [:ref "Boolean"]]],
 "AWS::CloudFront::Distribution.Cookies"
 [:map
  {:closed :true}
  ["WhitelistedNames" {:optional true} [:ref "StringList"]]
  ["Forward" {:optional true} [:ref "String"]]],
 "AWS::EKS::FargateProfile"
 [:map
  ["Type" [:= "AWS::EKS::FargateProfile"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ClusterName" {:optional true} [:ref "String"]]
    ["FargateProfileName" {:optional true} [:ref "String"]]
    ["PodExecutionRoleArn" {:optional true} [:ref "String"]]
    ["Subnets" {:optional true} [:ref "StringList"]]
    ["Selectors"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EKS::FargateProfile.Selector"]]
      "Fn::If"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Pinpoint::Campaign.CampaignEventFilter"
 [:map
  {:closed :true}
  ["FilterType" {:optional true} [:ref "String"]]
  ["Dimensions"
   {:optional true}
   [:ref "AWS::Pinpoint::Campaign.EventDimensions"]]],
 "AWS::AppMesh::VirtualNode.VirtualNodeSpec"
 [:map
  {:closed :true}
  ["Logging"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.Logging"]]
  ["Backends"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::AppMesh::VirtualNode.Backend"]]
    "Fn::If"]]
  ["Listeners"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::AppMesh::VirtualNode.Listener"]]
    "Fn::If"]]
  ["BackendDefaults"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.BackendDefaults"]]
  ["ServiceDiscovery"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.ServiceDiscovery"]]],
 "AWS::SES::ReceiptRule.SNSAction"
 [:map
  {:closed :true}
  ["TopicArn" {:optional true} [:ref "String"]]
  ["Encoding" {:optional true} [:ref "String"]]],
 "AWS::ApiGatewayV2::RouteResponse.ParameterConstraints"
 [:map {:closed :true} ["Required" {:optional true} [:ref "Boolean"]]],
 "AWS::Athena::DataCatalog"
 [:map
  ["Type" [:= "AWS::Athena::DataCatalog"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Parameters" {:optional true} [:ref "StringMap"]]
    ["Tags" {:optional true} [:ref "AWS::Athena::DataCatalog.Tags"]]
    ["Type" {:optional true} [:ref "String"]]]]],
 "AWS::AutoScaling::LaunchConfiguration.BlockDeviceMapping"
 [:map
  {:closed :true}
  ["DeviceName" {:optional true} [:ref "String"]]
  ["Ebs"
   {:optional true}
   [:ref "AWS::AutoScaling::LaunchConfiguration.BlockDevice"]]
  ["NoDevice" {:optional true} [:ref "Boolean"]]
  ["VirtualName" {:optional true} [:ref "String"]]],
 "AWS::IoT::TopicRule"
 [:map
  ["Type" [:= "AWS::IoT::TopicRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["RuleName" {:optional true} [:ref "String"]]
    ["TopicRulePayload"
     {:optional true}
     [:ref "AWS::IoT::TopicRule.TopicRulePayload"]]]]],
 "AWS::ApiGateway::Deployment.AccessLogSetting"
 [:map
  {:closed :true}
  ["DestinationArn" {:optional true} [:ref "String"]]
  ["Format" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.StepConfig"
 [:map
  {:closed :true}
  ["ActionOnFailure" {:optional true} [:ref "String"]]
  ["HadoopJarStep"
   {:optional true}
   [:ref "AWS::EMR::Cluster.HadoopJarStepConfig"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::LakeFormation::Permissions"
 [:map
  ["Type" [:= "AWS::LakeFormation::Permissions"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DataLakePrincipal"
     {:optional true}
     [:ref "AWS::LakeFormation::Permissions.DataLakePrincipal"]]
    ["Resource"
     {:optional true}
     [:ref "AWS::LakeFormation::Permissions.Resource"]]
    ["Permissions" {:optional true} [:ref "StringList"]]
    ["PermissionsWithGrantOption"
     {:optional true}
     [:ref "StringList"]]]]],
 "AWS::EC2::ClientVpnTargetNetworkAssociation"
 [:map
  ["Type" [:= "AWS::EC2::ClientVpnTargetNetworkAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ClientVpnEndpointId" {:optional true} [:ref "String"]]
    ["SubnetId" {:optional true} [:ref "String"]]]]],
 "AWS::Greengrass::CoreDefinition.Core"
 [:map
  {:closed :true}
  ["SyncShadow" {:optional true} [:ref "Boolean"]]
  ["ThingArn" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["CertificateArn" {:optional true} [:ref "String"]]],
 "AWS::Glue::Table.SerdeInfo"
 [:map
  {:closed :true}
  ["Parameters" {:optional true} [:ref "Json"]]
  ["SerializationLibrary" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::AutoScaling::ScalingPolicy.MetricDimension"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.TopicConfiguration"
 [:map
  {:closed :true}
  ["Event" {:optional true} [:ref "String"]]
  ["Filter"
   {:optional true}
   [:ref "AWS::S3::Bucket.NotificationFilter"]]
  ["Topic" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::Distribution.ViewerCertificate"
 [:map
  {:closed :true}
  ["IamCertificateId" {:optional true} [:ref "String"]]
  ["SslSupportMethod" {:optional true} [:ref "String"]]
  ["MinimumProtocolVersion" {:optional true} [:ref "String"]]
  ["CloudFrontDefaultCertificate" {:optional true} [:ref "Boolean"]]
  ["AcmCertificateArn" {:optional true} [:ref "String"]]],
 "AWS::Pinpoint::Segment.SegmentGroups"
 [:map
  {:closed :true}
  ["Groups"
   {:optional true}
   [:or [:sequential [:ref "AWS::Pinpoint::Segment.Groups"]] "Fn::If"]]
  ["Include" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::GatewayResponse"
 [:map
  ["Type" [:= "AWS::ApiGateway::GatewayResponse"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResponseParameters" {:optional true} [:ref "StringMap"]]
    ["ResponseTemplates" {:optional true} [:ref "StringMap"]]
    ["ResponseType" {:optional true} [:ref "String"]]
    ["RestApiId" {:optional true} [:ref "String"]]
    ["StatusCode" {:optional true} [:ref "String"]]]]],
 "AWS::FSx::FileSystem.SelfManagedActiveDirectoryConfiguration"
 [:map
  {:closed :true}
  ["FileSystemAdministratorsGroup" {:optional true} [:ref "String"]]
  ["UserName" {:optional true} [:ref "String"]]
  ["DomainName" {:optional true} [:ref "String"]]
  ["OrganizationalUnitDistinguishedName"
   {:optional true}
   [:ref "String"]]
  ["DnsIps" {:optional true} [:ref "StringList"]]
  ["Password" {:optional true} [:ref "String"]]],
 "AWS::CloudTrail::Trail.EventSelector"
 [:map
  {:closed :true}
  ["DataResources"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CloudTrail::Trail.DataResource"]]
    "Fn::If"]]
  ["IncludeManagementEvents" {:optional true} [:ref "Boolean"]]
  ["ReadWriteType" {:optional true} [:ref "String"]]],
 "AWS::ECS::Cluster.CapacityProviderStrategyItem"
 [:map
  {:closed :true}
  ["CapacityProvider" {:optional true} [:ref "String"]]
  ["Weight" {:optional true} [:ref "Integer"]]
  ["Base" {:optional true} [:ref "Integer"]]],
 "AWS::EventSchemas::Schema.TagsEntry"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPoolUserToGroupAttachment"
 [:map
  ["Type" [:= "AWS::Cognito::UserPoolUserToGroupAttachment"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GroupName" {:optional true} [:ref "String"]]
    ["UserPoolId" {:optional true} [:ref "String"]]
    ["Username" {:optional true} [:ref "String"]]]]],
 "AWS::Athena::DataCatalog.Tags"
 [:map
  {:closed :true}
  ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::Cognito::UserPool"
 [:map
  ["Type" [:= "AWS::Cognito::UserPool"]]
  ["Properties"
   [:map
    {:closed :true}
    ["SmsConfiguration"
     {:optional true}
     [:ref "AWS::Cognito::UserPool.SmsConfiguration"]]
    ["MfaConfiguration" {:optional true} [:ref "String"]]
    ["Policies"
     {:optional true}
     [:ref "AWS::Cognito::UserPool.Policies"]]
    ["UserPoolTags" {:optional true} [:ref "Json"]]
    ["AccountRecoverySetting"
     {:optional true}
     [:ref "AWS::Cognito::UserPool.AccountRecoverySetting"]]
    ["EmailVerificationSubject" {:optional true} [:ref "String"]]
    ["UsernameConfiguration"
     {:optional true}
     [:ref "AWS::Cognito::UserPool.UsernameConfiguration"]]
    ["EmailConfiguration"
     {:optional true}
     [:ref "AWS::Cognito::UserPool.EmailConfiguration"]]
    ["UsernameAttributes" {:optional true} [:ref "StringList"]]
    ["EnabledMfas" {:optional true} [:ref "StringList"]]
    ["SmsVerificationMessage" {:optional true} [:ref "String"]]
    ["AutoVerifiedAttributes" {:optional true} [:ref "StringList"]]
    ["DeviceConfiguration"
     {:optional true}
     [:ref "AWS::Cognito::UserPool.DeviceConfiguration"]]
    ["Schema"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::Cognito::UserPool.SchemaAttribute"]]
      "Fn::If"]]
    ["EmailVerificationMessage" {:optional true} [:ref "String"]]
    ["AliasAttributes" {:optional true} [:ref "StringList"]]
    ["SmsAuthenticationMessage" {:optional true} [:ref "String"]]
    ["LambdaConfig"
     {:optional true}
     [:ref "AWS::Cognito::UserPool.LambdaConfig"]]
    ["VerificationMessageTemplate"
     {:optional true}
     [:ref "AWS::Cognito::UserPool.VerificationMessageTemplate"]]
    ["AdminCreateUserConfig"
     {:optional true}
     [:ref "AWS::Cognito::UserPool.AdminCreateUserConfig"]]
    ["UserPoolAddOns"
     {:optional true}
     [:ref "AWS::Cognito::UserPool.UserPoolAddOns"]]
    ["UserPoolName" {:optional true} [:ref "String"]]]]],
 "AWS::CloudFront::Distribution.Origin"
 [:map
  {:closed :true}
  ["ConnectionTimeout" {:optional true} [:ref "Integer"]]
  ["OriginCustomHeaders"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::CloudFront::Distribution.OriginCustomHeader"]]
    "Fn::If"]]
  ["ConnectionAttempts" {:optional true} [:ref "Integer"]]
  ["DomainName" {:optional true} [:ref "String"]]
  ["S3OriginConfig"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.S3OriginConfig"]]
  ["OriginPath" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["CustomOriginConfig"
   {:optional true}
   [:ref "AWS::CloudFront::Distribution.CustomOriginConfig"]]],
 "AWS::SageMaker::MonitoringSchedule.MonitoringJobDefinition"
 [:map
  {:closed :true}
  ["BaselineConfig"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.BaselineConfig"]]
  ["Environment"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.Environment"]]
  ["MonitoringInputs"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.MonitoringInputs"]]
  ["MonitoringResources"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.MonitoringResources"]]
  ["NetworkConfig"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.NetworkConfig"]]
  ["StoppingCondition"
   {:optional true}
   [:ref "AWS::SageMaker::MonitoringSchedule.StoppingCondition"]]
  ["MonitoringAppSpecification"
   {:optional true}
   [:ref
    "AWS::SageMaker::MonitoringSchedule.MonitoringAppSpecification"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["MonitoringOutputConfig"
   {:optional true}
   [:ref
    "AWS::SageMaker::MonitoringSchedule.MonitoringOutputConfig"]]],
 "AWS::Events::Rule.RunCommandTarget"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Values" {:optional true} [:ref "StringList"]]],
 "AWS::ApplicationInsights::Application.SubComponentConfigurationDetails"
 [:map
  {:closed :true}
  ["AlarmMetrics"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::ApplicationInsights::Application.AlarmMetric"]]
    "Fn::If"]]
  ["Logs"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ApplicationInsights::Application.Log"]]
    "Fn::If"]]
  ["WindowsEvents"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::ApplicationInsights::Application.WindowsEvent"]]
    "Fn::If"]]],
 "AWS::KinesisFirehose::DeliveryStream.RetryOptions"
 [:map
  {:closed :true}
  ["DurationInSeconds" {:optional true} [:ref "Integer"]]],
 "AWS::WAF::SqlInjectionMatchSet.FieldToMatch"
 [:map
  {:closed :true}
  ["Data" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::ECS::TaskDefinition.ResourceRequirement"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::Greengrass::ResourceDefinition.ResourceInstance"
 [:map
  {:closed :true}
  ["ResourceDataContainer"
   {:optional true}
   [:ref "AWS::Greengrass::ResourceDefinition.ResourceDataContainer"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::CodeBuild::Project.CloudWatchLogsConfig"
 [:map
  {:closed :true}
  ["Status" {:optional true} [:ref "String"]]
  ["GroupName" {:optional true} [:ref "String"]]
  ["StreamName" {:optional true} [:ref "String"]]],
 "AWS::ApplicationInsights::Application.Log"
 [:map
  {:closed :true}
  ["LogGroupName" {:optional true} [:ref "String"]]
  ["LogPath" {:optional true} [:ref "String"]]
  ["LogType" {:optional true} [:ref "String"]]
  ["Encoding" {:optional true} [:ref "String"]]
  ["PatternSet" {:optional true} [:ref "String"]]],
 "AWS::ImageBuilder::ImagePipeline"
 [:map
  ["Type" [:= "AWS::ImageBuilder::ImagePipeline"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ImageTestsConfiguration"
     {:optional true}
     [:ref "AWS::ImageBuilder::ImagePipeline.ImageTestsConfiguration"]]
    ["ImageRecipeArn" {:optional true} [:ref "String"]]
    ["Schedule"
     {:optional true}
     [:ref "AWS::ImageBuilder::ImagePipeline.Schedule"]]
    ["EnhancedImageMetadataEnabled" {:optional true} [:ref "Boolean"]]
    ["InfrastructureConfigurationArn" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:ref "StringMap"]]
    ["DistributionConfigurationArn" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Status" {:optional true} [:ref "String"]]]]],
 "AWS::CloudFront::CachePolicy.CookiesConfig"
 [:map
  {:closed :true}
  ["CookieBehavior" {:optional true} [:ref "String"]]
  ["Cookies" {:optional true} [:ref "StringList"]]],
 "AWS::Glue::Crawler.Schedule"
 [:map
  {:closed :true}
  ["ScheduleExpression" {:optional true} [:ref "String"]]],
 "AWS::RDS::DBProxy.TagFormat"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::WAFv2::WebACLAssociation"
 [:map
  ["Type" [:= "AWS::WAFv2::WebACLAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ResourceArn" {:optional true} [:ref "String"]]
    ["WebACLArn" {:optional true} [:ref "String"]]]]],
 "AWS::KinesisFirehose::DeliveryStream.KMSEncryptionConfig"
 [:map
  {:closed :true}
  ["AWSKMSKeyARN" {:optional true} [:ref "String"]]],
 "AWS::PinpointEmail::DedicatedIpPool"
 [:map
  ["Type" [:= "AWS::PinpointEmail::DedicatedIpPool"]]
  ["Properties"
   [:map
    {:closed :true}
    ["PoolName" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::PinpointEmail::DedicatedIpPool.Tags"]]
      "Fn::If"]]]]],
 "AWS::Config::RemediationConfiguration.ExecutionControls"
 [:map
  {:closed :true}
  ["SsmControls"
   {:optional true}
   [:ref "AWS::Config::RemediationConfiguration.SsmControls"]]],
 "AWS::EC2::EC2Fleet"
 [:map
  ["Type" [:= "AWS::EC2::EC2Fleet"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ExcessCapacityTerminationPolicy"
     {:optional true}
     [:ref "String"]]
    ["OnDemandOptions"
     {:optional true}
     [:ref "AWS::EC2::EC2Fleet.OnDemandOptionsRequest"]]
    ["TargetCapacitySpecification"
     {:optional true}
     [:ref "AWS::EC2::EC2Fleet.TargetCapacitySpecificationRequest"]]
    ["ValidFrom" {:optional true} [:ref "String"]]
    ["SpotOptions"
     {:optional true}
     [:ref "AWS::EC2::EC2Fleet.SpotOptionsRequest"]]
    ["ValidUntil" {:optional true} [:ref "String"]]
    ["TerminateInstancesWithExpiration"
     {:optional true}
     [:ref "Boolean"]]
    ["LaunchTemplateConfigs"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::EC2::EC2Fleet.FleetLaunchTemplateConfigRequest"]]
      "Fn::If"]]
    ["TagSpecifications"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EC2::EC2Fleet.TagSpecification"]]
      "Fn::If"]]
    ["Type" {:optional true} [:ref "String"]]
    ["ReplaceUnhealthyInstances" {:optional true} [:ref "Boolean"]]]]],
 "AWS::ServiceDiscovery::HttpNamespace"
 [:map
  ["Type" [:= "AWS::ServiceDiscovery::HttpNamespace"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverActionsType"
 [:map
  {:closed :true}
  ["HighAction"
   {:optional true}
   [:ref
    "AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverActionType"]]
  ["LowAction"
   {:optional true}
   [:ref
    "AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverActionType"]]
  ["MediumAction"
   {:optional true}
   [:ref
    "AWS::Cognito::UserPoolRiskConfigurationAttachment.AccountTakeoverActionType"]]],
 "AWS::Kendra::DataSource.SalesforceConfiguration"
 [:map
  {:closed :true}
  ["ExcludeAttachmentFilePatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["CrawlAttachments" {:optional true} [:ref "Boolean"]]
  ["ChatterFeedConfiguration"
   {:optional true}
   [:ref "AWS::Kendra::DataSource.SalesforceChatterFeedConfiguration"]]
  ["KnowledgeArticleConfiguration"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.SalesforceKnowledgeArticleConfiguration"]]
  ["StandardObjectAttachmentConfiguration"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.SalesforceStandardObjectAttachmentConfiguration"]]
  ["SecretArn" {:optional true} [:ref "String"]]
  ["IncludeAttachmentFilePatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["StandardObjectConfigurations"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.SalesforceStandardObjectConfigurationList"]]
  ["ServerUrl" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::ApplicationReferenceDataSource.MappingParameters"
 [:map
  {:closed :true}
  ["JSONMappingParameters"
   {:optional true}
   [:ref
    "AWS::KinesisAnalytics::ApplicationReferenceDataSource.JSONMappingParameters"]]
  ["CSVMappingParameters"
   {:optional true}
   [:ref
    "AWS::KinesisAnalytics::ApplicationReferenceDataSource.CSVMappingParameters"]]],
 "AWS::WAFv2::RuleGroup.IPSetForwardedIPConfiguration"
 [:map
  {:closed :true}
  ["HeaderName" {:optional true} [:ref "String"]]
  ["FallbackBehavior" {:optional true} [:ref "String"]]
  ["Position" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.RedshiftDestinationConfiguration"
 [:map
  {:closed :true}
  ["S3BackupConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration"]]
  ["RoleARN" {:optional true} [:ref "String"]]
  ["CloudWatchLoggingOptions"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.CloudWatchLoggingOptions"]]
  ["ProcessingConfiguration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.ProcessingConfiguration"]]
  ["RetryOptions"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.RedshiftRetryOptions"]]
  ["S3Configuration"
   {:optional true}
   [:ref
    "AWS::KinesisFirehose::DeliveryStream.S3DestinationConfiguration"]]
  ["Password" {:optional true} [:ref "String"]]
  ["ClusterJDBCURL" {:optional true} [:ref "String"]]
  ["CopyCommand"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.CopyCommand"]]
  ["Username" {:optional true} [:ref "String"]]
  ["S3BackupMode" {:optional true} [:ref "String"]]],
 "AWS::WAF::XssMatchSet.FieldToMatch"
 [:map
  {:closed :true}
  ["Data" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::Glue::Partition"
 [:map
  ["Type" [:= "AWS::Glue::Partition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TableName" {:optional true} [:ref "String"]]
    ["DatabaseName" {:optional true} [:ref "String"]]
    ["CatalogId" {:optional true} [:ref "String"]]
    ["PartitionInput"
     {:optional true}
     [:ref "AWS::Glue::Partition.PartitionInput"]]]]],
 "AWS::ECR::Repository.LifecyclePolicy"
 [:map
  {:closed :true}
  ["LifecyclePolicyText" {:optional true} [:ref "String"]]
  ["RegistryId" {:optional true} [:ref "String"]]],
 "AWS::EC2::LocalGatewayRoute"
 [:map
  ["Type" [:= "AWS::EC2::LocalGatewayRoute"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DestinationCidrBlock" {:optional true} [:ref "String"]]
    ["LocalGatewayRouteTableId" {:optional true} [:ref "String"]]
    ["LocalGatewayVirtualInterfaceGroupId"
     {:optional true}
     [:ref "String"]]]]],
 "AWS::S3::Bucket.AnalyticsConfiguration"
 [:map
  {:closed :true}
  ["Id" {:optional true} [:ref "String"]]
  ["Prefix" {:optional true} [:ref "String"]]
  ["StorageClassAnalysis"
   {:optional true}
   [:ref "AWS::S3::Bucket.StorageClassAnalysis"]]
  ["TagFilters"
   {:optional true}
   [:or [:sequential [:ref "AWS::S3::Bucket.TagFilter"]] "Fn::If"]]],
 "AWS::EFS::AccessPoint.CreationInfo"
 [:map
  {:closed :true}
  ["OwnerUid" {:optional true} [:ref "String"]]
  ["OwnerGid" {:optional true} [:ref "String"]]
  ["Permissions" {:optional true} [:ref "String"]]],
 "AWS::EventSchemas::Registry.TagsEntry"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.AudioLanguageSelection"
 [:map
  {:closed :true}
  ["LanguageCode" {:optional true} [:ref "String"]]
  ["LanguageSelectionPolicy" {:optional true} [:ref "String"]]],
 "AWS::AppStream::ImageBuilder.DomainJoinInfo"
 [:map
  {:closed :true}
  ["OrganizationalUnitDistinguishedName"
   {:optional true}
   [:ref "String"]]
  ["DirectoryName" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.ServerSideEncryptionRule"
 [:map
  {:closed :true}
  ["ServerSideEncryptionByDefault"
   {:optional true}
   [:ref "AWS::S3::Bucket.ServerSideEncryptionByDefault"]]],
 "AWS::ECS::TaskDefinition.LinuxParameters"
 [:map
  {:closed :true}
  ["Capabilities"
   {:optional true}
   [:ref "AWS::ECS::TaskDefinition.KernelCapabilities"]]
  ["Devices"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.Device"]]
    "Fn::If"]]
  ["InitProcessEnabled" {:optional true} [:ref "Boolean"]]
  ["MaxSwap" {:optional true} [:ref "Integer"]]
  ["SharedMemorySize" {:optional true} [:ref "Integer"]]
  ["Swappiness" {:optional true} [:ref "Integer"]]
  ["Tmpfs"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ECS::TaskDefinition.Tmpfs"]]
    "Fn::If"]]],
 "AWS::EC2::LaunchTemplate.Ebs"
 [:map
  {:closed :true}
  ["SnapshotId" {:optional true} [:ref "String"]]
  ["VolumeType" {:optional true} [:ref "String"]]
  ["KmsKeyId" {:optional true} [:ref "String"]]
  ["Encrypted" {:optional true} [:ref "Boolean"]]
  ["Iops" {:optional true} [:ref "Integer"]]
  ["VolumeSize" {:optional true} [:ref "Integer"]]
  ["DeleteOnTermination" {:optional true} [:ref "Boolean"]]],
 "AWS::GameLift::GameServerGroup.InstanceDefinition"
 [:map
  {:closed :true}
  ["InstanceType" {:optional true} [:ref "String"]]
  ["WeightedCapacity" {:optional true} [:ref "String"]]],
 "AWS::EKS::Cluster"
 [:map
  ["Type" [:= "AWS::EKS::Cluster"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Version" {:optional true} [:ref "String"]]
    ["EncryptionConfig"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EKS::Cluster.EncryptionConfig"]]
      "Fn::If"]]
    ["RoleArn" {:optional true} [:ref "String"]]
    ["ResourcesVpcConfig"
     {:optional true}
     [:ref "AWS::EKS::Cluster.ResourcesVpcConfig"]]
    ["Name" {:optional true} [:ref "String"]]]]],
 "AWS::CertificateManager::Certificate"
 [:map
  ["Type" [:= "AWS::CertificateManager::Certificate"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CertificateAuthorityArn" {:optional true} [:ref "String"]]
    ["CertificateTransparencyLoggingPreference"
     {:optional true}
     [:ref "String"]]
    ["DomainName" {:optional true} [:ref "String"]]
    ["DomainValidationOptions"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::CertificateManager::Certificate.DomainValidationOption"]]
      "Fn::If"]]
    ["SubjectAlternativeNames" {:optional true} [:ref "StringList"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["ValidationMethod" {:optional true} [:ref "String"]]]]],
 "AWS::WAFv2::WebACL"
 [:map
  ["Type" [:= "AWS::WAFv2::WebACL"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DefaultAction"
     {:optional true}
     [:ref "AWS::WAFv2::WebACL.DefaultAction"]]
    ["Description" {:optional true} [:ref "String"]]
    ["Name" {:optional true} [:ref "String"]]
    ["Scope" {:optional true} [:ref "String"]]
    ["Rules"
     {:optional true}
     [:or [:sequential [:ref "AWS::WAFv2::WebACL.Rule"]] "Fn::If"]]
    ["VisibilityConfig"
     {:optional true}
     [:ref "AWS::WAFv2::WebACL.VisibilityConfig"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::ApiGateway::Method.IntegrationResponse"
 [:map
  {:closed :true}
  ["ContentHandling" {:optional true} [:ref "String"]]
  ["ResponseParameters" {:optional true} [:ref "StringMap"]]
  ["ResponseTemplates" {:optional true} [:ref "StringMap"]]
  ["SelectionPattern" {:optional true} [:ref "String"]]
  ["StatusCode" {:optional true} [:ref "String"]]],
 "AWS::Route53::HostedZone.VPC"
 [:map
  {:closed :true}
  ["VPCId" {:optional true} [:ref "String"]]
  ["VPCRegion" {:optional true} [:ref "String"]]],
 "AWS::IoT1Click::Project.PlacementTemplate"
 [:map
  {:closed :true}
  ["DeviceTemplates" {:optional true} [:ref "Json"]]
  ["DefaultAttributes" {:optional true} [:ref "Json"]]],
 "AWS::OpsWorks::Stack.RdsDbInstance"
 [:map
  {:closed :true}
  ["DbPassword" {:optional true} [:ref "String"]]
  ["DbUser" {:optional true} [:ref "String"]]
  ["RdsDbInstanceArn" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.AacSettings"
 [:map
  {:closed :true}
  ["Spec" {:optional true} [:ref "String"]]
  ["CodingMode" {:optional true} [:ref "String"]]
  ["Profile" {:optional true} [:ref "String"]]
  ["RawFormat" {:optional true} [:ref "String"]]
  ["InputType" {:optional true} [:ref "String"]]
  ["RateControlMode" {:optional true} [:ref "String"]]
  ["Bitrate" {:optional true} [:ref "Double"]]
  ["VbrQuality" {:optional true} [:ref "String"]]
  ["SampleRate" {:optional true} [:ref "Double"]]],
 "AWS::AppMesh::VirtualNode.BackendDefaults"
 [:map
  {:closed :true}
  ["ClientPolicy"
   {:optional true}
   [:ref "AWS::AppMesh::VirtualNode.ClientPolicy"]]],
 "AWS::Elasticsearch::Domain.VPCOptions"
 [:map
  {:closed :true}
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]
  ["SubnetIds" {:optional true} [:ref "StringList"]]],
 "AWS::Kendra::Index.Relevance"
 [:map
  {:closed :true}
  ["Freshness" {:optional true} [:ref "Boolean"]]
  ["Importance" {:optional true} [:ref "Integer"]]
  ["Duration" {:optional true} [:ref "String"]]
  ["RankOrder" {:optional true} [:ref "String"]]
  ["ValueImportanceItems"
   {:optional true}
   [:ref "AWS::Kendra::Index.ValueImportanceItems"]]],
 "AWS::Kendra::DataSource.DataSourceVpcConfiguration"
 [:map
  {:closed :true}
  ["SubnetIds" {:optional true} [:ref "StringList"]]
  ["SecurityGroupIds" {:optional true} [:ref "StringList"]]],
 "AWS::AppMesh::VirtualNode.Duration"
 [:map
  {:closed :true}
  ["Value" {:optional true} [:ref "Integer"]]
  ["Unit" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.TeletextSourceSettings"
 [:map
  {:closed :true}
  ["PageNumber" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::VirtualService"
 [:map
  ["Type" [:= "AWS::AppMesh::VirtualService"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MeshName" {:optional true} [:ref "String"]]
    ["MeshOwner" {:optional true} [:ref "String"]]
    ["VirtualServiceName" {:optional true} [:ref "String"]]
    ["Spec"
     {:optional true}
     [:ref "AWS::AppMesh::VirtualService.VirtualServiceSpec"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::MediaLive::Channel.AutomaticInputFailoverSettings"
 [:map
  {:closed :true}
  ["InputPreference" {:optional true} [:ref "String"]]
  ["SecondaryInputId" {:optional true} [:ref "String"]]],
 "AWS::OpsWorks::Layer.AutoScalingThresholds"
 [:map
  {:closed :true}
  ["CpuThreshold" {:optional true} [:ref "Double"]]
  ["IgnoreMetricsTime" {:optional true} [:ref "Integer"]]
  ["InstanceCount" {:optional true} [:ref "Integer"]]
  ["LoadThreshold" {:optional true} [:ref "Double"]]
  ["MemoryThreshold" {:optional true} [:ref "Double"]]
  ["ThresholdsWaitTime" {:optional true} [:ref "Integer"]]],
 "AWS::MediaLive::Channel.VideoCodecSettings"
 [:map
  {:closed :true}
  ["FrameCaptureSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.FrameCaptureSettings"]]
  ["H264Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.H264Settings"]]
  ["H265Settings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.H265Settings"]]],
 "AWS::Kendra::Faq.TagList"
 [:map
  {:closed :true}
  ["TagList"
   {:optional true}
   [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::Pinpoint::APNSChannel"
 [:map
  ["Type" [:= "AWS::Pinpoint::APNSChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["TeamId" {:optional true} [:ref "String"]]
    ["Certificate" {:optional true} [:ref "String"]]
    ["BundleId" {:optional true} [:ref "String"]]
    ["PrivateKey" {:optional true} [:ref "String"]]
    ["TokenKeyId" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ApplicationId" {:optional true} [:ref "String"]]
    ["DefaultAuthenticationMethod" {:optional true} [:ref "String"]]
    ["TokenKey" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.M2tsSettings"
 [:map
  {:closed :true}
  ["DvbSdtSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.DvbSdtSettings"]]
  ["AbsentInputAudioBehavior" {:optional true} [:ref "String"]]
  ["Scte35Pid" {:optional true} [:ref "String"]]
  ["NielsenId3Behavior" {:optional true} [:ref "String"]]
  ["EsRateInPes" {:optional true} [:ref "String"]]
  ["CcDescriptor" {:optional true} [:ref "String"]]
  ["SegmentationTime" {:optional true} [:ref "Double"]]
  ["EcmPid" {:optional true} [:ref "String"]]
  ["SegmentationStyle" {:optional true} [:ref "String"]]
  ["AribCaptionsPidControl" {:optional true} [:ref "String"]]
  ["VideoPid" {:optional true} [:ref "String"]]
  ["EtvSignalPid" {:optional true} [:ref "String"]]
  ["PcrControl" {:optional true} [:ref "String"]]
  ["DvbSubPids" {:optional true} [:ref "String"]]
  ["EbpLookaheadMs" {:optional true} [:ref "Integer"]]
  ["BufferModel" {:optional true} [:ref "String"]]
  ["PatInterval" {:optional true} [:ref "Integer"]]
  ["DvbTeletextPid" {:optional true} [:ref "String"]]
  ["AudioBufferModel" {:optional true} [:ref "String"]]
  ["SegmentationMarkers" {:optional true} [:ref "String"]]
  ["EbpPlacement" {:optional true} [:ref "String"]]
  ["Bitrate" {:optional true} [:ref "Integer"]]
  ["AudioPids" {:optional true} [:ref "String"]]
  ["PcrPeriod" {:optional true} [:ref "Integer"]]
  ["NullPacketBitrate" {:optional true} [:ref "Double"]]
  ["AribCaptionsPid" {:optional true} [:ref "String"]]
  ["KlvDataPids" {:optional true} [:ref "String"]]
  ["EbpAudioInterval" {:optional true} [:ref "String"]]
  ["PcrPid" {:optional true} [:ref "String"]]
  ["Ebif" {:optional true} [:ref "String"]]
  ["TimedMetadataBehavior" {:optional true} [:ref "String"]]
  ["AudioStreamType" {:optional true} [:ref "String"]]
  ["Klv" {:optional true} [:ref "String"]]
  ["EtvPlatformPid" {:optional true} [:ref "String"]]
  ["DvbTdtSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.DvbTdtSettings"]]
  ["Arib" {:optional true} [:ref "String"]]
  ["Scte27Pids" {:optional true} [:ref "String"]]
  ["ProgramNum" {:optional true} [:ref "Integer"]]
  ["Scte35Control" {:optional true} [:ref "String"]]
  ["RateMode" {:optional true} [:ref "String"]]
  ["TransportStreamId" {:optional true} [:ref "Integer"]]
  ["PmtPid" {:optional true} [:ref "String"]]
  ["PmtInterval" {:optional true} [:ref "Integer"]]
  ["FragmentTime" {:optional true} [:ref "Double"]]
  ["DvbNitSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.DvbNitSettings"]]
  ["AudioFramesPerPes" {:optional true} [:ref "Integer"]]
  ["TimedMetadataPid" {:optional true} [:ref "String"]]],
 "AWS::ServiceCatalog::AcceptedPortfolioShare"
 [:map
  ["Type" [:= "AWS::ServiceCatalog::AcceptedPortfolioShare"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AcceptLanguage" {:optional true} [:ref "String"]]
    ["PortfolioId" {:optional true} [:ref "String"]]]]],
 "AWS::IoTEvents::DetectorModel.Sns"
 [:map
  {:closed :true}
  ["TargetArn" {:optional true} [:ref "String"]]
  ["Payload"
   {:optional true}
   [:ref "AWS::IoTEvents::DetectorModel.Payload"]]],
 "AWS::EKS::Cluster.EncryptionConfig"
 [:map
  {:closed :true}
  ["Resources" {:optional true} [:ref "StringList"]]
  ["Provider" {:optional true} [:ref "AWS::EKS::Cluster.Provider"]]],
 "AWS::IoTAnalytics::Datastore.DatastoreStorage"
 [:map
  {:closed :true}
  ["CustomerManagedS3"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Datastore.CustomerManagedS3"]]
  ["ServiceManagedS3"
   {:optional true}
   [:ref "AWS::IoTAnalytics::Datastore.ServiceManagedS3"]]],
 "AWS::SageMaker::NotebookInstanceLifecycleConfig"
 [:map
  ["Type" [:= "AWS::SageMaker::NotebookInstanceLifecycleConfig"]]
  ["Properties"
   [:map
    {:closed :true}
    ["OnStart"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::SageMaker::NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHook"]]
      "Fn::If"]]
    ["NotebookInstanceLifecycleConfigName"
     {:optional true}
     [:ref "String"]]
    ["OnCreate"
     {:optional true}
     [:or
      [:sequential
       [:ref
        "AWS::SageMaker::NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHook"]]
      "Fn::If"]]]]],
 "AWS::S3::Bucket.LambdaConfiguration"
 [:map
  {:closed :true}
  ["Event" {:optional true} [:ref "String"]]
  ["Filter"
   {:optional true}
   [:ref "AWS::S3::Bucket.NotificationFilter"]]
  ["Function" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.AudioNormalizationSettings"
 [:map
  {:closed :true}
  ["TargetLkfs" {:optional true} [:ref "Double"]]
  ["Algorithm" {:optional true} [:ref "String"]]
  ["AlgorithmControl" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::ApplicationOutput.KinesisFirehoseOutput"
 [:map
  {:closed :true}
  ["ResourceARN" {:optional true} [:ref "String"]]],
 "AWS::IoT::TopicRule.TopicRulePayload"
 [:map
  {:closed :true}
  ["Actions"
   {:optional true}
   [:or [:sequential [:ref "AWS::IoT::TopicRule.Action"]] "Fn::If"]]
  ["AwsIotSqlVersion" {:optional true} [:ref "String"]]
  ["Description" {:optional true} [:ref "String"]]
  ["ErrorAction" {:optional true} [:ref "AWS::IoT::TopicRule.Action"]]
  ["RuleDisabled" {:optional true} [:ref "Boolean"]]
  ["Sql" {:optional true} [:ref "String"]]],
 "AWS::RDS::DBCluster"
 [:map
  ["Type" [:= "AWS::RDS::DBCluster"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Port" {:optional true} [:ref "Integer"]]
    ["DBClusterIdentifier" {:optional true} [:ref "String"]]
    ["PreferredBackupWindow" {:optional true} [:ref "String"]]
    ["MasterUsername" {:optional true} [:ref "String"]]
    ["ScalingConfiguration"
     {:optional true}
     [:ref "AWS::RDS::DBCluster.ScalingConfiguration"]]
    ["DBClusterParameterGroupName" {:optional true} [:ref "String"]]
    ["ReplicationSourceIdentifier" {:optional true} [:ref "String"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["EnableHttpEndpoint" {:optional true} [:ref "Boolean"]]
    ["RestoreType" {:optional true} [:ref "String"]]
    ["PreferredMaintenanceWindow" {:optional true} [:ref "String"]]
    ["UseLatestRestorableTime" {:optional true} [:ref "Boolean"]]
    ["AvailabilityZones" {:optional true} [:ref "StringList"]]
    ["DBSubnetGroupName" {:optional true} [:ref "String"]]
    ["DeletionProtection" {:optional true} [:ref "Boolean"]]
    ["KmsKeyId" {:optional true} [:ref "String"]]
    ["EngineVersion" {:optional true} [:ref "String"]]
    ["SourceDBClusterIdentifier" {:optional true} [:ref "String"]]
    ["EngineMode" {:optional true} [:ref "String"]]
    ["BackupRetentionPeriod" {:optional true} [:ref "Integer"]]
    ["VpcSecurityGroupIds" {:optional true} [:ref "StringList"]]
    ["EnableIAMDatabaseAuthentication"
     {:optional true}
     [:ref "Boolean"]]
    ["AssociatedRoles"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::RDS::DBCluster.DBClusterRole"]]
      "Fn::If"]]
    ["EnableCloudwatchLogsExports"
     {:optional true}
     [:ref "StringList"]]
    ["SourceRegion" {:optional true} [:ref "String"]]
    ["DatabaseName" {:optional true} [:ref "String"]]
    ["SnapshotIdentifier" {:optional true} [:ref "String"]]
    ["StorageEncrypted" {:optional true} [:ref "Boolean"]]
    ["MasterUserPassword" {:optional true} [:ref "String"]]
    ["BacktrackWindow" {:optional true} [:ref "Long"]]
    ["Engine" {:optional true} [:ref "String"]]]]],
 "AWS::AutoScalingPlans::ScalingPlan.TagFilter"
 [:map
  {:closed :true}
  ["Values" {:optional true} [:ref "StringList"]]
  ["Key" {:optional true} [:ref "String"]]],
 "AWS::CodePipeline::Pipeline.EncryptionKey"
 [:map
  {:closed :true}
  ["Id" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::Transfer::Server.EndpointDetails"
 [:map
  {:closed :true}
  ["AddressAllocationIds" {:optional true} [:ref "StringList"]]
  ["VpcId" {:optional true} [:ref "String"]]
  ["VpcEndpointId" {:optional true} [:ref "String"]]
  ["SubnetIds" {:optional true} [:ref "StringList"]]],
 "AWS::AutoScaling::ScalingPolicy.StepAdjustment"
 [:map
  {:closed :true}
  ["MetricIntervalLowerBound" {:optional true} [:ref "Double"]]
  ["MetricIntervalUpperBound" {:optional true} [:ref "Double"]]
  ["ScalingAdjustment" {:optional true} [:ref "Integer"]]],
 "AWS::NetworkManager::GlobalNetwork"
 [:map
  ["Type" [:= "AWS::NetworkManager::GlobalNetwork"]]
  ["Properties"
   [:map
    {:closed :true}
    ["Description" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::Greengrass::FunctionDefinitionVersion.DefaultConfig"
 [:map
  {:closed :true}
  ["Execution"
   {:optional true}
   [:ref "AWS::Greengrass::FunctionDefinitionVersion.Execution"]]],
 "AWS::Greengrass::FunctionDefinition.Execution"
 [:map
  {:closed :true}
  ["IsolationMode" {:optional true} [:ref "String"]]
  ["RunAs"
   {:optional true}
   [:ref "AWS::Greengrass::FunctionDefinition.RunAs"]]],
 "AWS::SSM::PatchBaseline.PatchStringDate" [:map {:closed :true}],
 "AWS::Kendra::DataSource.SalesforceCustomKnowledgeArticleTypeConfiguration"
 [:map
  {:closed :true}
  ["Name" {:optional true} [:ref "String"]]
  ["DocumentDataFieldName" {:optional true} [:ref "String"]]
  ["DocumentTitleFieldName" {:optional true} [:ref "String"]]
  ["FieldMappings"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"]]],
 "AWS::WAFRegional::SqlInjectionMatchSet.SqlInjectionMatchTuple"
 [:map
  {:closed :true}
  ["TextTransformation" {:optional true} [:ref "String"]]
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFRegional::SqlInjectionMatchSet.FieldToMatch"]]],
 "AWS::WAFv2::WebACL.StatementThree"
 [:map
  {:closed :true}
  ["SqliMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.SqliMatchStatement"]]
  ["SizeConstraintStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.SizeConstraintStatement"]]
  ["XssMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.XssMatchStatement"]]
  ["IPSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.IPSetReferenceStatement"]]
  ["RuleGroupReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.RuleGroupReferenceStatement"]]
  ["RegexPatternSetReferenceStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.RegexPatternSetReferenceStatement"]]
  ["ByteMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.ByteMatchStatement"]]
  ["GeoMatchStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.GeoMatchStatement"]]
  ["ManagedRuleGroupStatement"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.ManagedRuleGroupStatement"]]],
 "AWS::Pinpoint::SMSChannel"
 [:map
  ["Type" [:= "AWS::Pinpoint::SMSChannel"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ShortCode" {:optional true} [:ref "String"]]
    ["Enabled" {:optional true} [:ref "Boolean"]]
    ["ApplicationId" {:optional true} [:ref "String"]]
    ["SenderId" {:optional true} [:ref "String"]]]]],
 "AWS::EC2::EIPAssociation"
 [:map
  ["Type" [:= "AWS::EC2::EIPAssociation"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AllocationId" {:optional true} [:ref "String"]]
    ["EIP" {:optional true} [:ref "String"]]
    ["InstanceId" {:optional true} [:ref "String"]]
    ["NetworkInterfaceId" {:optional true} [:ref "String"]]
    ["PrivateIpAddress" {:optional true} [:ref "String"]]]]],
 "AWS::WAFRegional::IPSet.IPSetDescriptor"
 [:map
  {:closed :true}
  ["Type" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::CodeRepository"
 [:map
  ["Type" [:= "AWS::SageMaker::CodeRepository"]]
  ["Properties"
   [:map
    {:closed :true}
    ["CodeRepositoryName" {:optional true} [:ref "String"]]
    ["GitConfig"
     {:optional true}
     [:ref "AWS::SageMaker::CodeRepository.GitConfig"]]]]],
 "AWS::ElasticLoadBalancingV2::Listener.Action"
 [:map
  {:closed :true}
  ["AuthenticateCognitoConfig"
   {:optional true}
   [:ref
    "AWS::ElasticLoadBalancingV2::Listener.AuthenticateCognitoConfig"]]
  ["AuthenticateOidcConfig"
   {:optional true}
   [:ref
    "AWS::ElasticLoadBalancingV2::Listener.AuthenticateOidcConfig"]]
  ["FixedResponseConfig"
   {:optional true}
   [:ref "AWS::ElasticLoadBalancingV2::Listener.FixedResponseConfig"]]
  ["ForwardConfig"
   {:optional true}
   [:ref "AWS::ElasticLoadBalancingV2::Listener.ForwardConfig"]]
  ["Order" {:optional true} [:ref "Integer"]]
  ["RedirectConfig"
   {:optional true}
   [:ref "AWS::ElasticLoadBalancingV2::Listener.RedirectConfig"]]
  ["TargetGroupArn" {:optional true} [:ref "String"]]
  ["Type" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.Output"
 [:map
  {:closed :true}
  ["OutputSettings"
   {:optional true}
   [:ref "AWS::MediaLive::Channel.OutputSettings"]]
  ["CaptionDescriptionNames" {:optional true} [:ref "StringList"]]
  ["AudioDescriptionNames" {:optional true} [:ref "StringList"]]
  ["OutputName" {:optional true} [:ref "String"]]
  ["VideoDescriptionName" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::Distribution.OriginCustomHeader"
 [:map
  {:closed :true}
  ["HeaderValue" {:optional true} [:ref "String"]]
  ["HeaderName" {:optional true} [:ref "String"]]],
 "AWS::IAM::UserToGroupAddition"
 [:map
  ["Type" [:= "AWS::IAM::UserToGroupAddition"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GroupName" {:optional true} [:ref "String"]]
    ["Users" {:optional true} [:ref "StringList"]]]]],
 "AWS::WAFv2::WebACL.RegexPatternSetReferenceStatement"
 [:map
  {:closed :true}
  ["Arn" {:optional true} [:ref "String"]]
  ["FieldToMatch"
   {:optional true}
   [:ref "AWS::WAFv2::WebACL.FieldToMatch"]]
  ["TextTransformations"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.TextTransformation"]]
    "Fn::If"]]],
 "AWS::AutoScalingPlans::ScalingPlan.CustomizedScalingMetricSpecification"
 [:map
  {:closed :true}
  ["MetricName" {:optional true} [:ref "String"]]
  ["Statistic" {:optional true} [:ref "String"]]
  ["Dimensions"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::AutoScalingPlans::ScalingPlan.MetricDimension"]]
    "Fn::If"]]
  ["Unit" {:optional true} [:ref "String"]]
  ["Namespace" {:optional true} [:ref "String"]]],
 "AWS::EFS::AccessPoint"
 [:map
  ["Type" [:= "AWS::EFS::AccessPoint"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ClientToken" {:optional true} [:ref "String"]]
    ["AccessPointTags"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::EFS::AccessPoint.AccessPointTag"]]
      "Fn::If"]]
    ["FileSystemId" {:optional true} [:ref "String"]]
    ["PosixUser"
     {:optional true}
     [:ref "AWS::EFS::AccessPoint.PosixUser"]]
    ["RootDirectory"
     {:optional true}
     [:ref "AWS::EFS::AccessPoint.RootDirectory"]]]]],
 "AWS::SES::ReceiptRule"
 [:map
  ["Type" [:= "AWS::SES::ReceiptRule"]]
  ["Properties"
   [:map
    {:closed :true}
    ["After" {:optional true} [:ref "String"]]
    ["Rule" {:optional true} [:ref "AWS::SES::ReceiptRule.Rule"]]
    ["RuleSetName" {:optional true} [:ref "String"]]]]],
 "AWS::MediaLive::Channel.MediaPackageOutputSettings"
 [:map {:closed :true}],
 "AWS::GameLift::MatchmakingConfiguration"
 [:map
  ["Type" [:= "AWS::GameLift::MatchmakingConfiguration"]]
  ["Properties"
   [:map
    {:closed :true}
    ["GameSessionData" {:optional true} [:ref "String"]]
    ["CustomEventData" {:optional true} [:ref "String"]]
    ["AcceptanceTimeoutSeconds" {:optional true} [:ref "Integer"]]
    ["GameSessionQueueArns" {:optional true} [:ref "StringList"]]
    ["GameProperties"
     {:optional true}
     [:or
      [:sequential
       [:ref "AWS::GameLift::MatchmakingConfiguration.GameProperty"]]
      "Fn::If"]]
    ["NotificationTarget" {:optional true} [:ref "String"]]
    ["BackfillMode" {:optional true} [:ref "String"]]
    ["RequestTimeoutSeconds" {:optional true} [:ref "Integer"]]
    ["Name" {:optional true} [:ref "String"]]
    ["AdditionalPlayerCount" {:optional true} [:ref "Integer"]]
    ["Description" {:optional true} [:ref "String"]]
    ["AcceptanceRequired" {:optional true} [:ref "Boolean"]]
    ["RuleSetName" {:optional true} [:ref "String"]]]]],
 "AWS::IoT::TopicRule.DynamoDBAction"
 [:map
  {:closed :true}
  ["HashKeyField" {:optional true} [:ref "String"]]
  ["RangeKeyType" {:optional true} [:ref "String"]]
  ["PayloadField" {:optional true} [:ref "String"]]
  ["RoleArn" {:optional true} [:ref "String"]]
  ["HashKeyValue" {:optional true} [:ref "String"]]
  ["HashKeyType" {:optional true} [:ref "String"]]
  ["TableName" {:optional true} [:ref "String"]]
  ["RangeKeyField" {:optional true} [:ref "String"]]
  ["RangeKeyValue" {:optional true} [:ref "String"]]],
 "AWS::Glue::Partition.StorageDescriptor"
 [:map
  {:closed :true}
  ["SortColumns"
   {:optional true}
   [:or [:sequential [:ref "AWS::Glue::Partition.Order"]] "Fn::If"]]
  ["OutputFormat" {:optional true} [:ref "String"]]
  ["NumberOfBuckets" {:optional true} [:ref "Integer"]]
  ["Parameters" {:optional true} [:ref "Json"]]
  ["Compressed" {:optional true} [:ref "Boolean"]]
  ["StoredAsSubDirectories" {:optional true} [:ref "Boolean"]]
  ["Columns"
   {:optional true}
   [:or [:sequential [:ref "AWS::Glue::Partition.Column"]] "Fn::If"]]
  ["SerdeInfo"
   {:optional true}
   [:ref "AWS::Glue::Partition.SerdeInfo"]]
  ["BucketColumns" {:optional true} [:ref "StringList"]]
  ["InputFormat" {:optional true} [:ref "String"]]
  ["SkewedInfo"
   {:optional true}
   [:ref "AWS::Glue::Partition.SkewedInfo"]]
  ["Location" {:optional true} [:ref "String"]]],
 "AWS::EC2::LaunchTemplate.BlockDeviceMapping"
 [:map
  {:closed :true}
  ["Ebs" {:optional true} [:ref "AWS::EC2::LaunchTemplate.Ebs"]]
  ["NoDevice" {:optional true} [:ref "String"]]
  ["VirtualName" {:optional true} [:ref "String"]]
  ["DeviceName" {:optional true} [:ref "String"]]],
 "AWS::IoT::TopicRule.AssetPropertyVariant"
 [:map
  {:closed :true}
  ["BooleanValue" {:optional true} [:ref "String"]]
  ["DoubleValue" {:optional true} [:ref "String"]]
  ["IntegerValue" {:optional true} [:ref "String"]]
  ["StringValue" {:optional true} [:ref "String"]]],
 "AWS::EC2::SpotFleet.LoadBalancersConfig"
 [:map
  {:closed :true}
  ["ClassicLoadBalancersConfig"
   {:optional true}
   [:ref "AWS::EC2::SpotFleet.ClassicLoadBalancersConfig"]]
  ["TargetGroupsConfig"
   {:optional true}
   [:ref "AWS::EC2::SpotFleet.TargetGroupsConfig"]]],
 "AWS::ElasticBeanstalk::ApplicationVersion.SourceBundle"
 [:map
  {:closed :true}
  ["S3Bucket" {:optional true} [:ref "String"]]
  ["S3Key" {:optional true} [:ref "String"]]],
 "AWS::KinesisFirehose::DeliveryStream.EncryptionConfiguration"
 [:map
  {:closed :true}
  ["KMSEncryptionConfig"
   {:optional true}
   [:ref "AWS::KinesisFirehose::DeliveryStream.KMSEncryptionConfig"]]
  ["NoEncryptionConfig" {:optional true} [:ref "String"]]],
 "AWS::SNS::Topic"
 [:map
  ["Type" [:= "AWS::SNS::Topic"]]
  ["Properties"
   [:map
    {:closed :true}
    ["ContentBasedDeduplication" {:optional true} [:ref "Boolean"]]
    ["DisplayName" {:optional true} [:ref "String"]]
    ["KmsMasterKeyId" {:optional true} [:ref "String"]]
    ["Subscription"
     {:optional true}
     [:or
      [:sequential [:ref "AWS::SNS::Topic.Subscription"]]
      "Fn::If"]]
    ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
    ["TopicName" {:optional true} [:ref "String"]]]]],
 "AWS::SSM::ResourceDataSync.S3Destination"
 [:map
  {:closed :true}
  ["KMSKeyArn" {:optional true} [:ref "String"]]
  ["BucketName" {:optional true} [:ref "String"]]
  ["BucketRegion" {:optional true} [:ref "String"]]
  ["SyncFormat" {:optional true} [:ref "String"]]
  ["BucketPrefix" {:optional true} [:ref "String"]]],
 "AWS::ElasticLoadBalancing::LoadBalancer.AppCookieStickinessPolicy"
 [:map
  {:closed :true}
  ["CookieName" {:optional true} [:ref "String"]]
  ["PolicyName" {:optional true} [:ref "String"]]],
 "AWS::LakeFormation::Permissions.DataLakePrincipal"
 [:map
  {:closed :true}
  ["DataLakePrincipalIdentifier" {:optional true} [:ref "String"]]],
 "AWS::ApplicationInsights::Application.LogPattern"
 [:map
  {:closed :true}
  ["PatternName" {:optional true} [:ref "String"]]
  ["Pattern" {:optional true} [:ref "String"]]
  ["Rank" {:optional true} [:ref "Integer"]]],
 "AWS::ElasticLoadBalancingV2::Listener.AuthenticateCognitoConfig"
 [:map
  {:closed :true}
  ["AuthenticationRequestExtraParams"
   {:optional true}
   [:ref "StringMap"]]
  ["OnUnauthenticatedRequest" {:optional true} [:ref "String"]]
  ["Scope" {:optional true} [:ref "String"]]
  ["SessionCookieName" {:optional true} [:ref "String"]]
  ["SessionTimeout" {:optional true} [:ref "Long"]]
  ["UserPoolArn" {:optional true} [:ref "String"]]
  ["UserPoolClientId" {:optional true} [:ref "String"]]
  ["UserPoolDomain" {:optional true} [:ref "String"]]],
 "AWS::DMS::Endpoint.KafkaSettings"
 [:map
  {:closed :true}
  ["Broker" {:optional true} [:ref "String"]]
  ["Topic" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalyticsV2::Application.SqlApplicationConfiguration"
 [:map
  {:closed :true}
  ["Inputs"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::KinesisAnalyticsV2::Application.Input"]]
    "Fn::If"]]],
 "AWS::ApiGateway::RestApi.S3Location"
 [:map
  {:closed :true}
  ["Bucket" {:optional true} [:ref "String"]]
  ["ETag" {:optional true} [:ref "String"]]
  ["Key" {:optional true} [:ref "String"]]
  ["Version" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::GatewayRoute.GatewayRouteSpec"
 [:map
  {:closed :true}
  ["HttpRoute"
   {:optional true}
   [:ref "AWS::AppMesh::GatewayRoute.HttpGatewayRoute"]]
  ["Http2Route"
   {:optional true}
   [:ref "AWS::AppMesh::GatewayRoute.HttpGatewayRoute"]]
  ["GrpcRoute"
   {:optional true}
   [:ref "AWS::AppMesh::GatewayRoute.GrpcGatewayRoute"]]],
 "AWS::ApiGateway::DomainName"
 [:map
  ["Type" [:= "AWS::ApiGateway::DomainName"]]
  ["Properties"
   [:map
    {:closed :true}
    ["DomainName" {:optional true} [:ref "String"]]
    ["EndpointConfiguration"
     {:optional true}
     [:ref "AWS::ApiGateway::DomainName.EndpointConfiguration"]]
    ["CertificateArn" {:optional true} [:ref "String"]]
    ["RegionalCertificateArn" {:optional true} [:ref "String"]]
    ["SecurityPolicy" {:optional true} [:ref "String"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::AppMesh::VirtualRouter"
 [:map
  ["Type" [:= "AWS::AppMesh::VirtualRouter"]]
  ["Properties"
   [:map
    {:closed :true}
    ["MeshName" {:optional true} [:ref "String"]]
    ["VirtualRouterName" {:optional true} [:ref "String"]]
    ["MeshOwner" {:optional true} [:ref "String"]]
    ["Spec"
     {:optional true}
     [:ref "AWS::AppMesh::VirtualRouter.VirtualRouterSpec"]]
    ["Tags"
     {:optional true}
     [:or [:sequential [:ref "Tag"]] "Fn::If"]]]]],
 "AWS::EC2::ClientVpnEndpoint.TagSpecification"
 [:map
  {:closed :true}
  ["ResourceType" {:optional true} [:ref "String"]]
  ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::Kendra::DataSource.ServiceNowKnowledgeArticleConfiguration"
 [:map
  {:closed :true}
  ["CrawlAttachments" {:optional true} [:ref "Boolean"]]
  ["IncludeAttachmentFilePatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["ExcludeAttachmentFilePatterns"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceInclusionsExclusionsStrings"]]
  ["DocumentDataFieldName" {:optional true} [:ref "String"]]
  ["DocumentTitleFieldName" {:optional true} [:ref "String"]]
  ["FieldMappings"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"]]],
 "AWS::WAFv2::WebACL.AndStatementTwo"
 [:map
  {:closed :true}
  ["Statements"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::WAFv2::WebACL.StatementThree"]]
    "Fn::If"]]],
 "AWS::PinpointEmail::ConfigurationSetEventDestination.PinpointDestination"
 [:map
  {:closed :true}
  ["ApplicationArn" {:optional true} [:ref "String"]]],
 "AWS::S3::Bucket.Rule"
 [:map
  {:closed :true}
  ["Prefix" {:optional true} [:ref "String"]]
  ["NoncurrentVersionExpirationInDays"
   {:optional true}
   [:ref "Integer"]]
  ["Id" {:optional true} [:ref "String"]]
  ["NoncurrentVersionTransitions"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::S3::Bucket.NoncurrentVersionTransition"]]
    "Fn::If"]]
  ["ExpirationDate" {:optional true} [:ref "Timestamp"]]
  ["AbortIncompleteMultipartUpload"
   {:optional true}
   [:ref "AWS::S3::Bucket.AbortIncompleteMultipartUpload"]]
  ["Transitions"
   {:optional true}
   [:or [:sequential [:ref "AWS::S3::Bucket.Transition"]] "Fn::If"]]
  ["TagFilters"
   {:optional true}
   [:or [:sequential [:ref "AWS::S3::Bucket.TagFilter"]] "Fn::If"]]
  ["ExpirationInDays" {:optional true} [:ref "Integer"]]
  ["NoncurrentVersionTransition"
   {:optional true}
   [:ref "AWS::S3::Bucket.NoncurrentVersionTransition"]]
  ["Transition" {:optional true} [:ref "AWS::S3::Bucket.Transition"]]
  ["Status" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::RealtimeLogConfig.EndPoint"
 [:map
  {:closed :true}
  ["KinesisStreamConfig"
   {:optional true}
   [:ref "AWS::CloudFront::RealtimeLogConfig.KinesisStreamConfig"]]
  ["StreamType" {:optional true} [:ref "String"]]],
 "AWS::SageMaker::CodeRepository.GitConfig"
 [:map
  {:closed :true}
  ["SecretArn" {:optional true} [:ref "String"]]
  ["Branch" {:optional true} [:ref "String"]]
  ["RepositoryUrl" {:optional true} [:ref "String"]]],
 "AWS::Kendra::DataSource.SalesforceStandardKnowledgeArticleTypeConfiguration"
 [:map
  {:closed :true}
  ["DocumentDataFieldName" {:optional true} [:ref "String"]]
  ["DocumentTitleFieldName" {:optional true} [:ref "String"]]
  ["FieldMappings"
   {:optional true}
   [:ref
    "AWS::Kendra::DataSource.DataSourceToIndexFieldMappingList"]]],
 "AWS::Greengrass::ResourceDefinitionVersion.GroupOwnerSetting"
 [:map
  {:closed :true}
  ["AutoAddGroupOwner" {:optional true} [:ref "Boolean"]]
  ["GroupOwner" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::Distribution.StatusCodes"
 [:map
  {:closed :true}
  ["Quantity" {:optional true} [:ref "Integer"]]
  ["Items" {:optional true} [:ref "IntegerList"]]],
 "AWS::AccessAnalyzer::Analyzer.Filter"
 [:map
  {:closed :true}
  ["Contains" {:optional true} [:ref "StringList"]]
  ["Eq" {:optional true} [:ref "StringList"]]
  ["Exists" {:optional true} [:ref "Boolean"]]
  ["Property" {:optional true} [:ref "String"]]
  ["Neq" {:optional true} [:ref "StringList"]]],
 "AWS::MediaLive::Channel.HlsInputSettings"
 [:map
  {:closed :true}
  ["BufferSegments" {:optional true} [:ref "Integer"]]
  ["Retries" {:optional true} [:ref "Integer"]]
  ["Bandwidth" {:optional true} [:ref "Integer"]]
  ["RetryInterval" {:optional true} [:ref "Integer"]]],
 "AWS::SSM::MaintenanceWindowTask.TaskInvocationParameters"
 [:map
  {:closed :true}
  ["MaintenanceWindowRunCommandParameters"
   {:optional true}
   [:ref
    "AWS::SSM::MaintenanceWindowTask.MaintenanceWindowRunCommandParameters"]]
  ["MaintenanceWindowAutomationParameters"
   {:optional true}
   [:ref
    "AWS::SSM::MaintenanceWindowTask.MaintenanceWindowAutomationParameters"]]
  ["MaintenanceWindowStepFunctionsParameters"
   {:optional true}
   [:ref
    "AWS::SSM::MaintenanceWindowTask.MaintenanceWindowStepFunctionsParameters"]]
  ["MaintenanceWindowLambdaParameters"
   {:optional true}
   [:ref
    "AWS::SSM::MaintenanceWindowTask.MaintenanceWindowLambdaParameters"]]],
 "AWS::IoT::ProvisioningTemplate.Tags"
 [:map
  {:closed :true}
  ["Tags"
   {:optional true}
   [:or [:sequential [:ref "Json"]] "Fn::If"]]],
 "AWS::EMR::Cluster.KeyValue"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::EMR::InstanceGroupConfig.CloudWatchAlarmDefinition"
 [:map
  {:closed :true}
  ["Unit" {:optional true} [:ref "String"]]
  ["EvaluationPeriods" {:optional true} [:ref "Integer"]]
  ["Statistic" {:optional true} [:ref "String"]]
  ["Dimensions"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::EMR::InstanceGroupConfig.MetricDimension"]]
    "Fn::If"]]
  ["ComparisonOperator" {:optional true} [:ref "String"]]
  ["Threshold" {:optional true} [:ref "Double"]]
  ["Namespace" {:optional true} [:ref "String"]]
  ["Period" {:optional true} [:ref "Integer"]]
  ["MetricName" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.TeletextDestinationSettings"
 [:map {:closed :true}],
 "AWS::ECS::TaskDefinition.InferenceAccelerator"
 [:map
  {:closed :true}
  ["DeviceName" {:optional true} [:ref "String"]]
  ["DeviceType" {:optional true} [:ref "String"]]],
 "AWS::CloudFront::Distribution.OriginGroups"
 [:map
  {:closed :true}
  ["Quantity" {:optional true} [:ref "Integer"]]
  ["Items"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::CloudFront::Distribution.OriginGroup"]]
    "Fn::If"]]],
 "AWS::AutoScalingPlans::ScalingPlan.TargetTrackingConfiguration"
 [:map
  {:closed :true}
  ["ScaleOutCooldown" {:optional true} [:ref "Integer"]]
  ["TargetValue" {:optional true} [:ref "Double"]]
  ["PredefinedScalingMetricSpecification"
   {:optional true}
   [:ref
    "AWS::AutoScalingPlans::ScalingPlan.PredefinedScalingMetricSpecification"]]
  ["DisableScaleIn" {:optional true} [:ref "Boolean"]]
  ["ScaleInCooldown" {:optional true} [:ref "Integer"]]
  ["EstimatedInstanceWarmup" {:optional true} [:ref "Integer"]]
  ["CustomizedScalingMetricSpecification"
   {:optional true}
   [:ref
    "AWS::AutoScalingPlans::ScalingPlan.CustomizedScalingMetricSpecification"]]],
 "AWS::AppMesh::Route.HttpRouteMatch"
 [:map
  {:closed :true}
  ["Scheme" {:optional true} [:ref "String"]]
  ["Headers"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::AppMesh::Route.HttpRouteHeader"]]
    "Fn::If"]]
  ["Prefix" {:optional true} [:ref "String"]]
  ["Method" {:optional true} [:ref "String"]]],
 "AWS::AppMesh::Route.WeightedTarget"
 [:map
  {:closed :true}
  ["VirtualNode" {:optional true} [:ref "String"]]
  ["Weight" {:optional true} [:ref "Integer"]]],
 "AWS::ElasticLoadBalancing::LoadBalancer.HealthCheck"
 [:map
  {:closed :true}
  ["HealthyThreshold" {:optional true} [:ref "String"]]
  ["Interval" {:optional true} [:ref "String"]]
  ["Target" {:optional true} [:ref "String"]]
  ["Timeout" {:optional true} [:ref "String"]]
  ["UnhealthyThreshold" {:optional true} [:ref "String"]]],
 "AWS::Elasticsearch::Domain.EncryptionAtRestOptions"
 [:map
  {:closed :true}
  ["Enabled" {:optional true} [:ref "Boolean"]]
  ["KmsKeyId" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::Application.JSONMappingParameters"
 [:map
  {:closed :true}
  ["RecordRowPath" {:optional true} [:ref "String"]]],
 "AWS::EC2::TrafficMirrorFilterRule.TrafficMirrorPortRange"
 [:map
  {:closed :true}
  ["FromPort" {:optional true} [:ref "Integer"]]
  ["ToPort" {:optional true} [:ref "Integer"]]],
 "AWS::EKS::FargateProfile.Label"
 [:map
  {:closed :true}
  ["Key" {:optional true} [:ref "String"]]
  ["Value" {:optional true} [:ref "String"]]],
 "AWS::PinpointEmail::ConfigurationSetEventDestination.SnsDestination"
 [:map {:closed :true} ["TopicArn" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.M3u8Settings"
 [:map
  {:closed :true}
  ["Scte35Pid" {:optional true} [:ref "String"]]
  ["NielsenId3Behavior" {:optional true} [:ref "String"]]
  ["EcmPid" {:optional true} [:ref "String"]]
  ["VideoPid" {:optional true} [:ref "String"]]
  ["PcrControl" {:optional true} [:ref "String"]]
  ["PatInterval" {:optional true} [:ref "Integer"]]
  ["AudioPids" {:optional true} [:ref "String"]]
  ["PcrPeriod" {:optional true} [:ref "Integer"]]
  ["Scte35Behavior" {:optional true} [:ref "String"]]
  ["PcrPid" {:optional true} [:ref "String"]]
  ["TimedMetadataBehavior" {:optional true} [:ref "String"]]
  ["ProgramNum" {:optional true} [:ref "Integer"]]
  ["TransportStreamId" {:optional true} [:ref "Integer"]]
  ["PmtPid" {:optional true} [:ref "String"]]
  ["PmtInterval" {:optional true} [:ref "Integer"]]
  ["AudioFramesPerPes" {:optional true} [:ref "Integer"]]
  ["TimedMetadataPid" {:optional true} [:ref "String"]]],
 "AWS::PinpointEmail::ConfigurationSetEventDestination.KinesisFirehoseDestination"
 [:map
  {:closed :true}
  ["DeliveryStreamArn" {:optional true} [:ref "String"]]
  ["IamRoleArn" {:optional true} [:ref "String"]]],
 "AWS::MediaLive::Channel.HlsAkamaiSettings"
 [:map
  {:closed :true}
  ["Salt" {:optional true} [:ref "String"]]
  ["FilecacheDuration" {:optional true} [:ref "Integer"]]
  ["NumRetries" {:optional true} [:ref "Integer"]]
  ["Token" {:optional true} [:ref "String"]]
  ["RestartDelay" {:optional true} [:ref "Integer"]]
  ["ConnectionRetryInterval" {:optional true} [:ref "Integer"]]
  ["HttpTransferMode" {:optional true} [:ref "String"]]],
 "Alexa::ASK::Skill.Overrides"
 [:map {:closed :true} ["Manifest" {:optional true} [:ref "Json"]]],
 "AWS::LakeFormation::Permissions.Resource"
 [:map
  {:closed :true}
  ["TableResource"
   {:optional true}
   [:ref "AWS::LakeFormation::Permissions.TableResource"]]
  ["DatabaseResource"
   {:optional true}
   [:ref "AWS::LakeFormation::Permissions.DatabaseResource"]]
  ["DataLocationResource"
   {:optional true}
   [:ref "AWS::LakeFormation::Permissions.DataLocationResource"]]
  ["TableWithColumnsResource"
   {:optional true}
   [:ref "AWS::LakeFormation::Permissions.TableWithColumnsResource"]]],
 "AWS::EC2::CapacityReservation.TagSpecification"
 [:map
  {:closed :true}
  ["ResourceType" {:optional true} [:ref "String"]]
  ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]],
 "AWS::KinesisAnalyticsV2::Application.InputProcessingConfiguration"
 [:map
  {:closed :true}
  ["InputLambdaProcessor"
   {:optional true}
   [:ref
    "AWS::KinesisAnalyticsV2::Application.InputLambdaProcessor"]]],
 "AWS::Backup::BackupPlan.CopyActionResourceType"
 [:map
  {:closed :true}
  ["Lifecycle"
   {:optional true}
   [:ref "AWS::Backup::BackupPlan.LifecycleResourceType"]]
  ["DestinationBackupVaultArn" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPool.EmailConfiguration"
 [:map
  {:closed :true}
  ["ReplyToEmailAddress" {:optional true} [:ref "String"]]
  ["ConfigurationSet" {:optional true} [:ref "String"]]
  ["EmailSendingAccount" {:optional true} [:ref "String"]]
  ["SourceArn" {:optional true} [:ref "String"]]
  ["From" {:optional true} [:ref "String"]]],
 "AWS::KinesisAnalytics::Application.InputParallelism"
 [:map {:closed :true} ["Count" {:optional true} [:ref "Integer"]]],
 "AWS::KinesisAnalyticsV2::Application.RecordFormat"
 [:map
  {:closed :true}
  ["MappingParameters"
   {:optional true}
   [:ref "AWS::KinesisAnalyticsV2::Application.MappingParameters"]]
  ["RecordFormatType" {:optional true} [:ref "String"]]],
 "AWS::ApiGatewayV2::Stage.RouteSettings"
 [:map
  {:closed :true}
  ["LoggingLevel" {:optional true} [:ref "String"]]
  ["DataTraceEnabled" {:optional true} [:ref "Boolean"]]
  ["ThrottlingBurstLimit" {:optional true} [:ref "Integer"]]
  ["DetailedMetricsEnabled" {:optional true} [:ref "Boolean"]]
  ["ThrottlingRateLimit" {:optional true} [:ref "Double"]]],
 "AWS::OpsWorks::UserProfile"
 [:map
  ["Type" [:= "AWS::OpsWorks::UserProfile"]]
  ["Properties"
   [:map
    {:closed :true}
    ["AllowSelfManagement" {:optional true} [:ref "Boolean"]]
    ["IamUserArn" {:optional true} [:ref "String"]]
    ["SshPublicKey" {:optional true} [:ref "String"]]
    ["SshUsername" {:optional true} [:ref "String"]]]]],
 "AWS::Glue::Table.StorageDescriptor"
 [:map
  {:closed :true}
  ["SortColumns"
   {:optional true}
   [:or [:sequential [:ref "AWS::Glue::Table.Order"]] "Fn::If"]]
  ["OutputFormat" {:optional true} [:ref "String"]]
  ["NumberOfBuckets" {:optional true} [:ref "Integer"]]
  ["Parameters" {:optional true} [:ref "Json"]]
  ["Compressed" {:optional true} [:ref "Boolean"]]
  ["StoredAsSubDirectories" {:optional true} [:ref "Boolean"]]
  ["Columns"
   {:optional true}
   [:or [:sequential [:ref "AWS::Glue::Table.Column"]] "Fn::If"]]
  ["SerdeInfo" {:optional true} [:ref "AWS::Glue::Table.SerdeInfo"]]
  ["BucketColumns" {:optional true} [:ref "StringList"]]
  ["InputFormat" {:optional true} [:ref "String"]]
  ["SkewedInfo" {:optional true} [:ref "AWS::Glue::Table.SkewedInfo"]]
  ["Location" {:optional true} [:ref "String"]]],
 "AWS::EMR::Cluster.ScalingTrigger"
 [:map
  {:closed :true}
  ["CloudWatchAlarmDefinition"
   {:optional true}
   [:ref "AWS::EMR::Cluster.CloudWatchAlarmDefinition"]]],
 "AWS::KinesisAnalyticsV2::Application.RecordColumn"
 [:map
  {:closed :true}
  ["Mapping" {:optional true} [:ref "String"]]
  ["SqlType" {:optional true} [:ref "String"]]
  ["Name" {:optional true} [:ref "String"]]],
 "AWS::Cognito::UserPool.VerificationMessageTemplate"
 [:map
  {:closed :true}
  ["EmailMessageByLink" {:optional true} [:ref "String"]]
  ["EmailMessage" {:optional true} [:ref "String"]]
  ["SmsMessage" {:optional true} [:ref "String"]]
  ["EmailSubject" {:optional true} [:ref "String"]]
  ["DefaultEmailOption" {:optional true} [:ref "String"]]
  ["EmailSubjectByLink" {:optional true} [:ref "String"]]],
 "AWS::ApiGateway::Deployment.StageDescription"
 [:map
  {:closed :true}
  ["DataTraceEnabled" {:optional true} [:ref "Boolean"]]
  ["CacheClusterSize" {:optional true} [:ref "String"]]
  ["MethodSettings"
   {:optional true}
   [:or
    [:sequential [:ref "AWS::ApiGateway::Deployment.MethodSetting"]]
    "Fn::If"]]
  ["MetricsEnabled" {:optional true} [:ref "Boolean"]]
  ["CanarySetting"
   {:optional true}
   [:ref "AWS::ApiGateway::Deployment.CanarySetting"]]
  ["CacheClusterEnabled" {:optional true} [:ref "Boolean"]]
  ["Tags" {:optional true} [:or [:sequential [:ref "Tag"]] "Fn::If"]]
  ["ClientCertificateId" {:optional true} [:ref "String"]]
  ["CachingEnabled" {:optional true} [:ref "Boolean"]]
  ["DocumentationVersion" {:optional true} [:ref "String"]]
  ["CacheTtlInSeconds" {:optional true} [:ref "Integer"]]
  ["LoggingLevel" {:optional true} [:ref "String"]]
  ["ThrottlingRateLimit" {:optional true} [:ref "Double"]]
  ["AccessLogSetting"
   {:optional true}
   [:ref "AWS::ApiGateway::Deployment.AccessLogSetting"]]
  ["ThrottlingBurstLimit" {:optional true} [:ref "Integer"]]
  ["Variables" {:optional true} [:ref "StringMap"]]
  ["Description" {:optional true} [:ref "String"]]
  ["CacheDataEncrypted" {:optional true} [:ref "Boolean"]]
  ["TracingEnabled" {:optional true} [:ref "Boolean"]]],
 "AWS::Backup::BackupPlan"
 [:map
  ["Type" [:= "AWS::Backup::BackupPlan"]]
  ["Properties"
   [:map
    {:closed :true}
    ["BackupPlan"
     {:optional true}
     [:ref "AWS::Backup::BackupPlan.BackupPlanResourceType"]]
    ["BackupPlanTags" {:optional true} [:ref "Json"]]]]],
 "AWS::MediaLive::Channel.Hdr10Settings"
 [:map
  {:closed :true}
  ["MaxCll" {:optional true} [:ref "Integer"]]
  ["MaxFall" {:optional true} [:ref "Integer"]]],
 "AWS::Greengrass::LoggerDefinition.Logger"
 [:map
  {:closed :true}
  ["Space" {:optional true} [:ref "Integer"]]
  ["Type" {:optional true} [:ref "String"]]
  ["Level" {:optional true} [:ref "String"]]
  ["Id" {:optional true} [:ref "String"]]
  ["Component" {:optional true} [:ref "String"]]],
 "AWS::DLM::LifecyclePolicy.Schedule"
 [:map
  {:closed :true}
  ["TagsToAdd"
   {:optional true}
   [:or [:sequential [:ref "Tag"]] "Fn::If"]]
  ["CreateRule"
   {:optional true}
   [:ref "AWS::DLM::LifecyclePolicy.CreateRule"]]
  ["VariableTags"
   {:optional true}
   [:or [:sequential [:ref "Tag"]] "Fn::If"]]
  ["FastRestoreRule"
   {:optional true}
   [:ref "AWS::DLM::LifecyclePolicy.FastRestoreRule"]]
  ["RetainRule"
   {:optional true}
   [:ref "AWS::DLM::LifecyclePolicy.RetainRule"]]
  ["CrossRegionCopyRules"
   {:optional true}
   [:or
    [:sequential
     [:ref "AWS::DLM::LifecyclePolicy.CrossRegionCopyRule"]]
    "Fn::If"]]
  ["Name" {:optional true} [:ref "String"]]
  ["CopyTags" {:optional true} [:ref "Boolean"]]]}
